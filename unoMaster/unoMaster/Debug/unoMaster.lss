
unoMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00000aa6  00000b3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080013e  0080013e  00000b78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001333  00000000  00000000  00000cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afb  00000000  00000000  00002007  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000908  00000000  00000000  00002b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  0000340c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  000035a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c4  00000000  00000000  00003b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000042e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e3       	ldi	r26, 0x3E	; 62
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 01 	call	0x36c	; 0x36c <main>
  9e:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	88 60       	ori	r24, 0x08	; 8
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	00 00       	nop
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	87 7f       	andi	r24, 0xF7	; 247
  b2:	85 b9       	out	0x05, r24	; 5
  b4:	08 95       	ret

000000b6 <lcd_write>:
  b6:	cf 93       	push	r28
  b8:	c8 2f       	mov	r28, r24
  ba:	66 23       	and	r22, r22
  bc:	21 f0       	breq	.+8      	; 0xc6 <lcd_write+0x10>
  be:	85 b1       	in	r24, 0x05	; 5
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	85 b9       	out	0x05, r24	; 5
  c4:	03 c0       	rjmp	.+6      	; 0xcc <lcd_write+0x16>
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	8d 7f       	andi	r24, 0xFD	; 253
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	85 b1       	in	r24, 0x05	; 5
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	85 b9       	out	0x05, r24	; 5
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	88 60       	ori	r24, 0x08	; 8
  d6:	8a b9       	out	0x0a, r24	; 10
  d8:	8a b1       	in	r24, 0x0a	; 10
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	8a b9       	out	0x0a, r24	; 10
  de:	8a b1       	in	r24, 0x0a	; 10
  e0:	80 62       	ori	r24, 0x20	; 32
  e2:	8a b9       	out	0x0a, r24	; 10
  e4:	8a b1       	in	r24, 0x0a	; 10
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	8a b9       	out	0x0a, r24	; 10
  ea:	8b b1       	in	r24, 0x0b	; 11
  ec:	8f 7b       	andi	r24, 0xBF	; 191
  ee:	8b b9       	out	0x0b, r24	; 11
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	8f 7d       	andi	r24, 0xDF	; 223
  f4:	8b b9       	out	0x0b, r24	; 11
  f6:	8b b1       	in	r24, 0x0b	; 11
  f8:	8f 7e       	andi	r24, 0xEF	; 239
  fa:	8b b9       	out	0x0b, r24	; 11
  fc:	8b b1       	in	r24, 0x0b	; 11
  fe:	87 7f       	andi	r24, 0xF7	; 247
 100:	8b b9       	out	0x0b, r24	; 11
 102:	cc 23       	and	r28, r28
 104:	1c f4       	brge	.+6      	; 0x10c <lcd_write+0x56>
 106:	8b b1       	in	r24, 0x0b	; 11
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	c6 ff       	sbrs	r28, 6
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x60>
 110:	8b b1       	in	r24, 0x0b	; 11
 112:	80 62       	ori	r24, 0x20	; 32
 114:	8b b9       	out	0x0b, r24	; 11
 116:	c5 ff       	sbrs	r28, 5
 118:	03 c0       	rjmp	.+6      	; 0x120 <lcd_write+0x6a>
 11a:	8b b1       	in	r24, 0x0b	; 11
 11c:	80 61       	ori	r24, 0x10	; 16
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	c4 ff       	sbrs	r28, 4
 122:	03 c0       	rjmp	.+6      	; 0x12a <lcd_write+0x74>
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	88 60       	ori	r24, 0x08	; 8
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 7b       	andi	r24, 0xBF	; 191
 132:	8b b9       	out	0x0b, r24	; 11
 134:	8b b1       	in	r24, 0x0b	; 11
 136:	8f 7d       	andi	r24, 0xDF	; 223
 138:	8b b9       	out	0x0b, r24	; 11
 13a:	8b b1       	in	r24, 0x0b	; 11
 13c:	8f 7e       	andi	r24, 0xEF	; 239
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	87 7f       	andi	r24, 0xF7	; 247
 144:	8b b9       	out	0x0b, r24	; 11
 146:	c3 ff       	sbrs	r28, 3
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0x9a>
 14a:	8b b1       	in	r24, 0x0b	; 11
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	8b b9       	out	0x0b, r24	; 11
 150:	c2 ff       	sbrs	r28, 2
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0xa4>
 154:	8b b1       	in	r24, 0x0b	; 11
 156:	80 62       	ori	r24, 0x20	; 32
 158:	8b b9       	out	0x0b, r24	; 11
 15a:	c1 ff       	sbrs	r28, 1
 15c:	03 c0       	rjmp	.+6      	; 0x164 <lcd_write+0xae>
 15e:	8b b1       	in	r24, 0x0b	; 11
 160:	80 61       	ori	r24, 0x10	; 16
 162:	8b b9       	out	0x0b, r24	; 11
 164:	c0 ff       	sbrs	r28, 0
 166:	03 c0       	rjmp	.+6      	; 0x16e <lcd_write+0xb8>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 172:	8b b1       	in	r24, 0x0b	; 11
 174:	88 60       	ori	r24, 0x08	; 8
 176:	8b b9       	out	0x0b, r24	; 11
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	80 61       	ori	r24, 0x10	; 16
 17c:	8b b9       	out	0x0b, r24	; 11
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 62       	ori	r24, 0x20	; 32
 182:	8b b9       	out	0x0b, r24	; 11
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	80 64       	ori	r24, 0x40	; 64
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <lcd_read>:
 18e:	88 23       	and	r24, r24
 190:	21 f0       	breq	.+8      	; 0x19a <lcd_read+0xc>
 192:	85 b1       	in	r24, 0x05	; 5
 194:	82 60       	ori	r24, 0x02	; 2
 196:	85 b9       	out	0x05, r24	; 5
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <lcd_read+0x12>
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	8d 7f       	andi	r24, 0xFD	; 253
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	84 60       	ori	r24, 0x04	; 4
 1a4:	85 b9       	out	0x05, r24	; 5
 1a6:	8a b1       	in	r24, 0x0a	; 10
 1a8:	87 7f       	andi	r24, 0xF7	; 247
 1aa:	8a b9       	out	0x0a, r24	; 10
 1ac:	8a b1       	in	r24, 0x0a	; 10
 1ae:	8f 7e       	andi	r24, 0xEF	; 239
 1b0:	8a b9       	out	0x0a, r24	; 10
 1b2:	8a b1       	in	r24, 0x0a	; 10
 1b4:	8f 7d       	andi	r24, 0xDF	; 223
 1b6:	8a b9       	out	0x0a, r24	; 10
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	8f 7b       	andi	r24, 0xBF	; 191
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	85 b1       	in	r24, 0x05	; 5
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	85 b9       	out	0x05, r24	; 5
 1c4:	00 00       	nop
 1c6:	4b 99       	sbic	0x09, 3	; 9
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <lcd_read+0x40>
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <lcd_read+0x42>
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	4c 99       	sbic	0x09, 4	; 9
 1d2:	80 62       	ori	r24, 0x20	; 32
 1d4:	4d 99       	sbic	0x09, 5	; 9
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	4e 99       	sbic	0x09, 6	; 9
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	95 b1       	in	r25, 0x05	; 5
 1de:	97 7f       	andi	r25, 0xF7	; 247
 1e0:	95 b9       	out	0x05, r25	; 5
 1e2:	00 00       	nop
 1e4:	95 b1       	in	r25, 0x05	; 5
 1e6:	98 60       	ori	r25, 0x08	; 8
 1e8:	95 b9       	out	0x05, r25	; 5
 1ea:	00 00       	nop
 1ec:	4b 99       	sbic	0x09, 3	; 9
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	4c 99       	sbic	0x09, 4	; 9
 1f2:	82 60       	ori	r24, 0x02	; 2
 1f4:	4d 99       	sbic	0x09, 5	; 9
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	4e 99       	sbic	0x09, 6	; 9
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	95 b1       	in	r25, 0x05	; 5
 1fe:	97 7f       	andi	r25, 0xF7	; 247
 200:	95 b9       	out	0x05, r25	; 5
 202:	08 95       	ret

00000204 <lcd_waitbusy>:
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_read>
 20a:	88 23       	and	r24, r24
 20c:	dc f3       	brlt	.-10     	; 0x204 <lcd_waitbusy>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <lcd_waitbusy+0xc>
 210:	00 c0       	rjmp	.+0      	; 0x212 <lcd_waitbusy+0xe>
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 c7 00 	call	0x18e	; 0x18e <lcd_read>
 218:	08 95       	ret

0000021a <lcd_command>:
 21a:	cf 93       	push	r28
 21c:	c8 2f       	mov	r28, r24
 21e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_waitbusy>
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	8c 2f       	mov	r24, r28
 226:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write>
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <lcd_gotoxy>:
 22e:	61 11       	cpse	r22, r1
 230:	04 c0       	rjmp	.+8      	; 0x23a <lcd_gotoxy+0xc>
 232:	80 58       	subi	r24, 0x80	; 128
 234:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
 238:	08 95       	ret
 23a:	80 54       	subi	r24, 0x40	; 64
 23c:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
 240:	08 95       	ret

00000242 <lcd_clrscr>:
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
 248:	08 95       	ret

0000024a <lcd_putc>:
 24a:	cf 93       	push	r28
 24c:	c8 2f       	mov	r28, r24
 24e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_waitbusy>
 252:	ca 30       	cpi	r28, 0x0A	; 10
 254:	49 f4       	brne	.+18     	; 0x268 <lcd_putc+0x1e>
 256:	80 34       	cpi	r24, 0x40	; 64
 258:	10 f4       	brcc	.+4      	; 0x25e <lcd_putc+0x14>
 25a:	80 e4       	ldi	r24, 0x40	; 64
 25c:	01 c0       	rjmp	.+2      	; 0x260 <lcd_putc+0x16>
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	80 58       	subi	r24, 0x80	; 128
 262:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
 266:	04 c0       	rjmp	.+8      	; 0x270 <lcd_putc+0x26>
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	8c 2f       	mov	r24, r28
 26c:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_write>
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <lcd_puts>:
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	fc 01       	movw	r30, r24
 27a:	03 c0       	rjmp	.+6      	; 0x282 <lcd_puts+0xe>
 27c:	0e 94 25 01 	call	0x24a	; 0x24a <lcd_putc>
 280:	fe 01       	movw	r30, r28
 282:	ef 01       	movw	r28, r30
 284:	21 96       	adiw	r28, 0x01	; 1
 286:	80 81       	ld	r24, Z
 288:	81 11       	cpse	r24, r1
 28a:	f8 cf       	rjmp	.-16     	; 0x27c <lcd_puts+0x8>
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 292:	cf 93       	push	r28
 294:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 296:	84 b1       	in	r24, 0x04	; 4
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 29c:	84 b1       	in	r24, 0x04	; 4
 29e:	84 60       	ori	r24, 0x04	; 4
 2a0:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 2a2:	84 b1       	in	r24, 0x04	; 4
 2a4:	88 60       	ori	r24, 0x08	; 8
 2a6:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 2a8:	8a b1       	in	r24, 0x0a	; 10
 2aa:	88 60       	ori	r24, 0x08	; 8
 2ac:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2ae:	8a b1       	in	r24, 0x0a	; 10
 2b0:	80 61       	ori	r24, 0x10	; 16
 2b2:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2b4:	8a b1       	in	r24, 0x0a	; 10
 2b6:	80 62       	ori	r24, 0x20	; 32
 2b8:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2ba:	8a b1       	in	r24, 0x0a	; 10
 2bc:	80 64       	ori	r24, 0x40	; 64
 2be:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	8f e9       	ldi	r24, 0x9F	; 159
 2c2:	9f e0       	ldi	r25, 0x0F	; 15
 2c4:	01 97       	sbiw	r24, 0x01	; 1
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <lcd_init+0x32>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <lcd_init+0x38>
 2ca:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 2cc:	8b b1       	in	r24, 0x0b	; 11
 2ce:	80 61       	ori	r24, 0x10	; 16
 2d0:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	88 60       	ori	r24, 0x08	; 8
 2d6:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2d8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 2dc:	81 ee       	ldi	r24, 0xE1	; 225
 2de:	94 e0       	ldi	r25, 0x04	; 4
 2e0:	01 97       	sbiw	r24, 0x01	; 1
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <lcd_init+0x4e>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <lcd_init+0x54>
 2e6:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 2e8:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 2ec:	95 e1       	ldi	r25, 0x15	; 21
 2ee:	9a 95       	dec	r25
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <lcd_init+0x5c>
 2f2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 2f4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 2f8:	85 e1       	ldi	r24, 0x15	; 21
 2fa:	8a 95       	dec	r24
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_init+0x68>
 2fe:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 300:	8b b1       	in	r24, 0x0b	; 11
 302:	87 7f       	andi	r24, 0xF7	; 247
 304:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 306:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 30a:	95 e1       	ldi	r25, 0x15	; 21
 30c:	9a 95       	dec	r25
 30e:	f1 f7       	brne	.-4      	; 0x30c <lcd_init+0x7a>
 310:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 312:	88 e2       	ldi	r24, 0x28	; 40
 314:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 318:	88 e0       	ldi	r24, 0x08	; 8
 31a:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 31e:	0e 94 21 01 	call	0x242	; 0x242 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 322:	86 e0       	ldi	r24, 0x06	; 6
 324:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 328:	8c 2f       	mov	r24, r28
 32a:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_command>

}/* lcd_init */
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <USART_init>:
#include <stdlib.h>
#include "lcd.h"

static void USART_init(uint16_t ubrr){
    /* Set baud rate in the USART Baud Rate Registers (UBRR) */
    UBRR0H = (unsigned char) (ubrr >> 8);
 332:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char) ubrr;
 336:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    
    /* Enable receiver and transmitter on RX0 and TX0 */
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0); 
 33a:	e1 ec       	ldi	r30, 0xC1	; 193
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	88 61       	ori	r24, 0x18	; 24
 342:	80 83       	st	Z, r24
    
    /* Set frame format: 8 bit data, 2 stop bit */
    UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
 344:	e2 ec       	ldi	r30, 0xC2	; 194
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	8e 60       	ori	r24, 0x0E	; 14
 34c:	80 83       	st	Z, r24
 34e:	08 95       	ret

00000350 <USART_Transmit>:
}

static void USART_Transmit(unsigned char data, FILE *stream){
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0))){;}
 350:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 354:	95 ff       	sbrs	r25, 5
 356:	fc cf       	rjmp	.-8      	; 0x350 <USART_Transmit>
    
    /* Puts the data into a buffer, then sends/transmits the data */
    UDR0 = data;
 358:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 35c:	08 95       	ret

0000035e <USART_Receive>:
}

static char USART_Receive(FILE *stream){
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0))){;}
 35e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 362:	85 ff       	sbrs	r24, 5
 364:	fc cf       	rjmp	.-8      	; 0x35e <USART_Receive>
    
    /* Get the received data from the buffer */
    return UDR0;
 366:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 36a:	08 95       	ret

0000036c <main>:

// Setup the stream functions for UART
FILE uart_output = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_Receive, _FDEV_SETUP_READ);

int main(void){
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
 374:	e8 97       	sbiw	r28, 0x38	; 56
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	f8 94       	cli
 37a:	de bf       	out	0x3e, r29	; 62
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	cd bf       	out	0x3d, r28	; 61
    /* set SS, MOSI and SCK as output, pins 16 (PB2), 17 (PB3) and 19 (PB5) */
    DDRB |= (1 << PB2) | (1 << PB3) | (1 << PB5); // SS as output
 380:	84 b1       	in	r24, 0x04	; 4
 382:	8c 62       	ori	r24, 0x2C	; 44
 384:	84 b9       	out	0x04, r24	; 4
    /* set SPI enable and master/slave select, making MEGA the master */
    SPCR |= (1 << 6) | (1 << 4);
 386:	8c b5       	in	r24, 0x2c	; 44
 388:	80 65       	ori	r24, 0x50	; 80
 38a:	8c bd       	out	0x2c, r24	; 44
    /* set SPI clock rate to 1 MHz */
    SPCR |= (1 << 0);
 38c:	8c b5       	in	r24, 0x2c	; 44
 38e:	81 60       	ori	r24, 0x01	; 1
 390:	8c bd       	out	0x2c, r24	; 44

    // initialize the UART with 9600 BAUD
    USART_init(MYUBRR);
 392:	87 e6       	ldi	r24, 0x67	; 103
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 99 01 	call	0x332	; 0x332 <USART_init>
        
    // redirect the stdin and stdout to UART functions
    stdout = &uart_output;
 39a:	ee e3       	ldi	r30, 0x3E	; 62
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	8e e0       	ldi	r24, 0x0E	; 14
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	93 83       	std	Z+3, r25	; 0x03
 3a4:	82 83       	std	Z+2, r24	; 0x02
    stdin = &uart_input;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	91 83       	std	Z+1, r25	; 0x01
 3ac:	80 83       	st	Z, r24
    
    unsigned char spi_send_data[20] = "IDLE\n";
 3ae:	86 e0       	ldi	r24, 0x06	; 6
 3b0:	ec e1       	ldi	r30, 0x1C	; 28
 3b2:	f1 e0       	ldi	r31, 0x01	; 1
 3b4:	de 01       	movw	r26, r28
 3b6:	11 96       	adiw	r26, 0x01	; 1
 3b8:	01 90       	ld	r0, Z+
 3ba:	0d 92       	st	X+, r0
 3bc:	8a 95       	dec	r24
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <main+0x4c>
 3c0:	fe 01       	movw	r30, r28
 3c2:	37 96       	adiw	r30, 0x07	; 7
 3c4:	8e e0       	ldi	r24, 0x0E	; 14
 3c6:	df 01       	movw	r26, r30
 3c8:	1d 92       	st	X+, r1
 3ca:	8a 95       	dec	r24
 3cc:	e9 f7       	brne	.-6      	; 0x3c8 <main+0x5c>
    unsigned char spi_receive_data[20];
	
	
	
	lcd_init(LCD_DISP_ON);
 3ce:	8c e0       	ldi	r24, 0x0C	; 12
 3d0:	0e 94 49 01 	call	0x292	; 0x292 <lcd_init>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 3d4:	4a e0       	ldi	r20, 0x0A	; 10
 3d6:	be 01       	movw	r22, r28
 3d8:	67 5d       	subi	r22, 0xD7	; 215
 3da:	7f 4f       	sbci	r23, 0xFF	; 255
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	93 e0       	ldi	r25, 0x03	; 3
 3e0:	0e 94 3e 02 	call	0x47c	; 0x47c <__itoa_ncheck>
	
	int16_t test_number = 1023;
	char test_char_array[16];
	itoa(test_number, test_char_array, 10);
	
	lcd_clrscr();
 3e4:	0e 94 21 01 	call	0x242	; 0x242 <lcd_clrscr>
	
	lcd_puts("Hello World!");
 3e8:	80 e3       	ldi	r24, 0x30	; 48
 3ea:	91 e0       	ldi	r25, 0x01	; 1
 3ec:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
	
	lcd_gotoxy(0,1);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 17 01 	call	0x22e	; 0x22e <lcd_gotoxy>
	lcd_puts(test_char_array);
 3f8:	ce 01       	movw	r24, r28
 3fa:	89 96       	adiw	r24, 0x29	; 41
 3fc:	0e 94 3a 01 	call	0x274	; 0x274 <lcd_puts>
	
    
    /* send message to slave and receive message from slave */
    while (1) {
        /* send byte to slave and receive a byte from slave */
        PORTB &= ~(1 << PB2); // SS LOW
 400:	85 b1       	in	r24, 0x05	; 5
 402:	8b 7f       	andi	r24, 0xFB	; 251
 404:	85 b9       	out	0x05, r24	; 5
            
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++){
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	21 c0       	rjmp	.+66     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
                
            SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 40a:	08 2e       	mov	r0, r24
 40c:	00 0c       	add	r0, r0
 40e:	99 0b       	sbc	r25, r25
 410:	e1 e0       	ldi	r30, 0x01	; 1
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	ec 0f       	add	r30, r28
 416:	fd 1f       	adc	r31, r29
 418:	e8 0f       	add	r30, r24
 41a:	f9 1f       	adc	r31, r25
 41c:	30 81       	ld	r19, Z
 41e:	3e bd       	out	0x2e, r19	; 46
 420:	ba e1       	ldi	r27, 0x1A	; 26
 422:	ba 95       	dec	r27
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
            _delay_us(5);
            while(!(SPSR & (1 << SPIF))){/* wait until the transmission is complete */;}
 428:	0d b4       	in	r0, 0x2d	; 45
 42a:	07 fe       	sbrs	r0, 7
 42c:	fd cf       	rjmp	.-6      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 42e:	3a e1       	ldi	r19, 0x1A	; 26
 430:	3a 95       	dec	r19
 432:	f1 f7       	brne	.-4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 434:	00 c0       	rjmp	.+0      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
            _delay_us(5);
            spi_receive_data[spi_data_index - 1] = SPDR; // receive byte from the SPI data register     
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	3e b5       	in	r19, 0x2e	; 46
 43a:	e5 e1       	ldi	r30, 0x15	; 21
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	ec 0f       	add	r30, r28
 440:	fd 1f       	adc	r31, r29
 442:	e8 0f       	add	r30, r24
 444:	f9 1f       	adc	r31, r25
 446:	30 83       	st	Z, r19
    /* send message to slave and receive message from slave */
    while (1) {
        /* send byte to slave and receive a byte from slave */
        PORTB &= ~(1 << PB2); // SS LOW
            
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++){
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	82 0f       	add	r24, r18
 44c:	28 2f       	mov	r18, r24
 44e:	84 31       	cpi	r24, 0x14	; 20
 450:	e0 f2       	brcs	.-72     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
            while(!(SPSR & (1 << SPIF))){/* wait until the transmission is complete */;}
            _delay_us(5);
            spi_receive_data[spi_data_index - 1] = SPDR; // receive byte from the SPI data register     
        }
            
        PORTB |= (1 << PB2); // SS HIGH
 452:	85 b1       	in	r24, 0x05	; 5
 454:	84 60       	ori	r24, 0x04	; 4
 456:	85 b9       	out	0x05, r24	; 5
        printf(spi_receive_data);
 458:	ce 01       	movw	r24, r28
 45a:	45 96       	adiw	r24, 0x15	; 21
 45c:	9f 93       	push	r25
 45e:	8f 93       	push	r24
 460:	0e 94 63 02 	call	0x4c6	; 0x4c6 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	99 e6       	ldi	r25, 0x69	; 105
 468:	a8 e1       	ldi	r26, 0x18	; 24
 46a:	81 50       	subi	r24, 0x01	; 1
 46c:	90 40       	sbci	r25, 0x00	; 0
 46e:	a0 40       	sbci	r26, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 474:	00 00       	nop
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	c2 cf       	rjmp	.-124    	; 0x400 <__EEPROM_REGION_LENGTH__>

0000047c <__itoa_ncheck>:
 47c:	bb 27       	eor	r27, r27
 47e:	4a 30       	cpi	r20, 0x0A	; 10
 480:	31 f4       	brne	.+12     	; 0x48e <__itoa_ncheck+0x12>
 482:	99 23       	and	r25, r25
 484:	22 f4       	brpl	.+8      	; 0x48e <__itoa_ncheck+0x12>
 486:	bd e2       	ldi	r27, 0x2D	; 45
 488:	90 95       	com	r25
 48a:	81 95       	neg	r24
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	0c 94 4a 02 	jmp	0x494	; 0x494 <__utoa_common>

00000492 <__utoa_ncheck>:
 492:	bb 27       	eor	r27, r27

00000494 <__utoa_common>:
 494:	fb 01       	movw	r30, r22
 496:	55 27       	eor	r21, r21
 498:	aa 27       	eor	r26, r26
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	aa 1f       	adc	r26, r26
 4a0:	a4 17       	cp	r26, r20
 4a2:	10 f0       	brcs	.+4      	; 0x4a8 <__utoa_common+0x14>
 4a4:	a4 1b       	sub	r26, r20
 4a6:	83 95       	inc	r24
 4a8:	50 51       	subi	r21, 0x10	; 16
 4aa:	b9 f7       	brne	.-18     	; 0x49a <__utoa_common+0x6>
 4ac:	a0 5d       	subi	r26, 0xD0	; 208
 4ae:	aa 33       	cpi	r26, 0x3A	; 58
 4b0:	08 f0       	brcs	.+2      	; 0x4b4 <__utoa_common+0x20>
 4b2:	a9 5d       	subi	r26, 0xD9	; 217
 4b4:	a1 93       	st	Z+, r26
 4b6:	00 97       	sbiw	r24, 0x00	; 0
 4b8:	79 f7       	brne	.-34     	; 0x498 <__utoa_common+0x4>
 4ba:	b1 11       	cpse	r27, r1
 4bc:	b1 93       	st	Z+, r27
 4be:	11 92       	st	Z+, r1
 4c0:	cb 01       	movw	r24, r22
 4c2:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <strrev>

000004c6 <printf>:
 4c6:	a0 e0       	ldi	r26, 0x00	; 0
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e9 e6       	ldi	r30, 0x69	; 105
 4cc:	f2 e0       	ldi	r31, 0x02	; 2
 4ce:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__prologue_saves__+0x20>
 4d2:	ae 01       	movw	r20, r28
 4d4:	4b 5f       	subi	r20, 0xFB	; 251
 4d6:	5f 4f       	sbci	r21, 0xFF	; 255
 4d8:	fa 01       	movw	r30, r20
 4da:	61 91       	ld	r22, Z+
 4dc:	71 91       	ld	r23, Z+
 4de:	af 01       	movw	r20, r30
 4e0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end+0x2>
 4e4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x3>
 4e8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <vfprintf>
 4ec:	e2 e0       	ldi	r30, 0x02	; 2
 4ee:	0c 94 46 05 	jmp	0xa8c	; 0xa8c <__epilogue_restores__+0x20>

000004f2 <vfprintf>:
 4f2:	ab e0       	ldi	r26, 0x0B	; 11
 4f4:	b0 e0       	ldi	r27, 0x00	; 0
 4f6:	ef e7       	ldi	r30, 0x7F	; 127
 4f8:	f2 e0       	ldi	r31, 0x02	; 2
 4fa:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__prologue_saves__>
 4fe:	6c 01       	movw	r12, r24
 500:	7b 01       	movw	r14, r22
 502:	8a 01       	movw	r16, r20
 504:	fc 01       	movw	r30, r24
 506:	17 82       	std	Z+7, r1	; 0x07
 508:	16 82       	std	Z+6, r1	; 0x06
 50a:	83 81       	ldd	r24, Z+3	; 0x03
 50c:	81 ff       	sbrs	r24, 1
 50e:	cc c1       	rjmp	.+920    	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 510:	ce 01       	movw	r24, r28
 512:	01 96       	adiw	r24, 0x01	; 1
 514:	3c 01       	movw	r6, r24
 516:	f6 01       	movw	r30, r12
 518:	93 81       	ldd	r25, Z+3	; 0x03
 51a:	f7 01       	movw	r30, r14
 51c:	93 fd       	sbrc	r25, 3
 51e:	85 91       	lpm	r24, Z+
 520:	93 ff       	sbrs	r25, 3
 522:	81 91       	ld	r24, Z+
 524:	7f 01       	movw	r14, r30
 526:	88 23       	and	r24, r24
 528:	09 f4       	brne	.+2      	; 0x52c <vfprintf+0x3a>
 52a:	ba c1       	rjmp	.+884    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 52c:	85 32       	cpi	r24, 0x25	; 37
 52e:	39 f4       	brne	.+14     	; 0x53e <vfprintf+0x4c>
 530:	93 fd       	sbrc	r25, 3
 532:	85 91       	lpm	r24, Z+
 534:	93 ff       	sbrs	r25, 3
 536:	81 91       	ld	r24, Z+
 538:	7f 01       	movw	r14, r30
 53a:	85 32       	cpi	r24, 0x25	; 37
 53c:	29 f4       	brne	.+10     	; 0x548 <vfprintf+0x56>
 53e:	b6 01       	movw	r22, r12
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 80 04 	call	0x900	; 0x900 <fputc>
 546:	e7 cf       	rjmp	.-50     	; 0x516 <vfprintf+0x24>
 548:	91 2c       	mov	r9, r1
 54a:	21 2c       	mov	r2, r1
 54c:	31 2c       	mov	r3, r1
 54e:	ff e1       	ldi	r31, 0x1F	; 31
 550:	f3 15       	cp	r31, r3
 552:	d8 f0       	brcs	.+54     	; 0x58a <vfprintf+0x98>
 554:	8b 32       	cpi	r24, 0x2B	; 43
 556:	79 f0       	breq	.+30     	; 0x576 <vfprintf+0x84>
 558:	38 f4       	brcc	.+14     	; 0x568 <vfprintf+0x76>
 55a:	80 32       	cpi	r24, 0x20	; 32
 55c:	79 f0       	breq	.+30     	; 0x57c <vfprintf+0x8a>
 55e:	83 32       	cpi	r24, 0x23	; 35
 560:	a1 f4       	brne	.+40     	; 0x58a <vfprintf+0x98>
 562:	23 2d       	mov	r18, r3
 564:	20 61       	ori	r18, 0x10	; 16
 566:	1d c0       	rjmp	.+58     	; 0x5a2 <vfprintf+0xb0>
 568:	8d 32       	cpi	r24, 0x2D	; 45
 56a:	61 f0       	breq	.+24     	; 0x584 <vfprintf+0x92>
 56c:	80 33       	cpi	r24, 0x30	; 48
 56e:	69 f4       	brne	.+26     	; 0x58a <vfprintf+0x98>
 570:	23 2d       	mov	r18, r3
 572:	21 60       	ori	r18, 0x01	; 1
 574:	16 c0       	rjmp	.+44     	; 0x5a2 <vfprintf+0xb0>
 576:	83 2d       	mov	r24, r3
 578:	82 60       	ori	r24, 0x02	; 2
 57a:	38 2e       	mov	r3, r24
 57c:	e3 2d       	mov	r30, r3
 57e:	e4 60       	ori	r30, 0x04	; 4
 580:	3e 2e       	mov	r3, r30
 582:	2a c0       	rjmp	.+84     	; 0x5d8 <vfprintf+0xe6>
 584:	f3 2d       	mov	r31, r3
 586:	f8 60       	ori	r31, 0x08	; 8
 588:	1d c0       	rjmp	.+58     	; 0x5c4 <vfprintf+0xd2>
 58a:	37 fc       	sbrc	r3, 7
 58c:	2d c0       	rjmp	.+90     	; 0x5e8 <vfprintf+0xf6>
 58e:	20 ed       	ldi	r18, 0xD0	; 208
 590:	28 0f       	add	r18, r24
 592:	2a 30       	cpi	r18, 0x0A	; 10
 594:	40 f0       	brcs	.+16     	; 0x5a6 <vfprintf+0xb4>
 596:	8e 32       	cpi	r24, 0x2E	; 46
 598:	b9 f4       	brne	.+46     	; 0x5c8 <vfprintf+0xd6>
 59a:	36 fc       	sbrc	r3, 6
 59c:	81 c1       	rjmp	.+770    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 59e:	23 2d       	mov	r18, r3
 5a0:	20 64       	ori	r18, 0x40	; 64
 5a2:	32 2e       	mov	r3, r18
 5a4:	19 c0       	rjmp	.+50     	; 0x5d8 <vfprintf+0xe6>
 5a6:	36 fe       	sbrs	r3, 6
 5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <vfprintf+0xc4>
 5aa:	8a e0       	ldi	r24, 0x0A	; 10
 5ac:	98 9e       	mul	r9, r24
 5ae:	20 0d       	add	r18, r0
 5b0:	11 24       	eor	r1, r1
 5b2:	92 2e       	mov	r9, r18
 5b4:	11 c0       	rjmp	.+34     	; 0x5d8 <vfprintf+0xe6>
 5b6:	ea e0       	ldi	r30, 0x0A	; 10
 5b8:	2e 9e       	mul	r2, r30
 5ba:	20 0d       	add	r18, r0
 5bc:	11 24       	eor	r1, r1
 5be:	22 2e       	mov	r2, r18
 5c0:	f3 2d       	mov	r31, r3
 5c2:	f0 62       	ori	r31, 0x20	; 32
 5c4:	3f 2e       	mov	r3, r31
 5c6:	08 c0       	rjmp	.+16     	; 0x5d8 <vfprintf+0xe6>
 5c8:	8c 36       	cpi	r24, 0x6C	; 108
 5ca:	21 f4       	brne	.+8      	; 0x5d4 <vfprintf+0xe2>
 5cc:	83 2d       	mov	r24, r3
 5ce:	80 68       	ori	r24, 0x80	; 128
 5d0:	38 2e       	mov	r3, r24
 5d2:	02 c0       	rjmp	.+4      	; 0x5d8 <vfprintf+0xe6>
 5d4:	88 36       	cpi	r24, 0x68	; 104
 5d6:	41 f4       	brne	.+16     	; 0x5e8 <vfprintf+0xf6>
 5d8:	f7 01       	movw	r30, r14
 5da:	93 fd       	sbrc	r25, 3
 5dc:	85 91       	lpm	r24, Z+
 5de:	93 ff       	sbrs	r25, 3
 5e0:	81 91       	ld	r24, Z+
 5e2:	7f 01       	movw	r14, r30
 5e4:	81 11       	cpse	r24, r1
 5e6:	b3 cf       	rjmp	.-154    	; 0x54e <vfprintf+0x5c>
 5e8:	98 2f       	mov	r25, r24
 5ea:	9f 7d       	andi	r25, 0xDF	; 223
 5ec:	95 54       	subi	r25, 0x45	; 69
 5ee:	93 30       	cpi	r25, 0x03	; 3
 5f0:	28 f4       	brcc	.+10     	; 0x5fc <vfprintf+0x10a>
 5f2:	0c 5f       	subi	r16, 0xFC	; 252
 5f4:	1f 4f       	sbci	r17, 0xFF	; 255
 5f6:	9f e3       	ldi	r25, 0x3F	; 63
 5f8:	99 83       	std	Y+1, r25	; 0x01
 5fa:	0d c0       	rjmp	.+26     	; 0x616 <vfprintf+0x124>
 5fc:	83 36       	cpi	r24, 0x63	; 99
 5fe:	31 f0       	breq	.+12     	; 0x60c <vfprintf+0x11a>
 600:	83 37       	cpi	r24, 0x73	; 115
 602:	71 f0       	breq	.+28     	; 0x620 <vfprintf+0x12e>
 604:	83 35       	cpi	r24, 0x53	; 83
 606:	09 f0       	breq	.+2      	; 0x60a <vfprintf+0x118>
 608:	59 c0       	rjmp	.+178    	; 0x6bc <vfprintf+0x1ca>
 60a:	21 c0       	rjmp	.+66     	; 0x64e <vfprintf+0x15c>
 60c:	f8 01       	movw	r30, r16
 60e:	80 81       	ld	r24, Z
 610:	89 83       	std	Y+1, r24	; 0x01
 612:	0e 5f       	subi	r16, 0xFE	; 254
 614:	1f 4f       	sbci	r17, 0xFF	; 255
 616:	88 24       	eor	r8, r8
 618:	83 94       	inc	r8
 61a:	91 2c       	mov	r9, r1
 61c:	53 01       	movw	r10, r6
 61e:	13 c0       	rjmp	.+38     	; 0x646 <vfprintf+0x154>
 620:	28 01       	movw	r4, r16
 622:	f2 e0       	ldi	r31, 0x02	; 2
 624:	4f 0e       	add	r4, r31
 626:	51 1c       	adc	r5, r1
 628:	f8 01       	movw	r30, r16
 62a:	a0 80       	ld	r10, Z
 62c:	b1 80       	ldd	r11, Z+1	; 0x01
 62e:	36 fe       	sbrs	r3, 6
 630:	03 c0       	rjmp	.+6      	; 0x638 <vfprintf+0x146>
 632:	69 2d       	mov	r22, r9
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	02 c0       	rjmp	.+4      	; 0x63c <vfprintf+0x14a>
 638:	6f ef       	ldi	r22, 0xFF	; 255
 63a:	7f ef       	ldi	r23, 0xFF	; 255
 63c:	c5 01       	movw	r24, r10
 63e:	0e 94 65 04 	call	0x8ca	; 0x8ca <strnlen>
 642:	4c 01       	movw	r8, r24
 644:	82 01       	movw	r16, r4
 646:	f3 2d       	mov	r31, r3
 648:	ff 77       	andi	r31, 0x7F	; 127
 64a:	3f 2e       	mov	r3, r31
 64c:	16 c0       	rjmp	.+44     	; 0x67a <vfprintf+0x188>
 64e:	28 01       	movw	r4, r16
 650:	22 e0       	ldi	r18, 0x02	; 2
 652:	42 0e       	add	r4, r18
 654:	51 1c       	adc	r5, r1
 656:	f8 01       	movw	r30, r16
 658:	a0 80       	ld	r10, Z
 65a:	b1 80       	ldd	r11, Z+1	; 0x01
 65c:	36 fe       	sbrs	r3, 6
 65e:	03 c0       	rjmp	.+6      	; 0x666 <vfprintf+0x174>
 660:	69 2d       	mov	r22, r9
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	02 c0       	rjmp	.+4      	; 0x66a <vfprintf+0x178>
 666:	6f ef       	ldi	r22, 0xFF	; 255
 668:	7f ef       	ldi	r23, 0xFF	; 255
 66a:	c5 01       	movw	r24, r10
 66c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <strnlen_P>
 670:	4c 01       	movw	r8, r24
 672:	f3 2d       	mov	r31, r3
 674:	f0 68       	ori	r31, 0x80	; 128
 676:	3f 2e       	mov	r3, r31
 678:	82 01       	movw	r16, r4
 67a:	33 fc       	sbrc	r3, 3
 67c:	1b c0       	rjmp	.+54     	; 0x6b4 <vfprintf+0x1c2>
 67e:	82 2d       	mov	r24, r2
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	88 16       	cp	r8, r24
 684:	99 06       	cpc	r9, r25
 686:	b0 f4       	brcc	.+44     	; 0x6b4 <vfprintf+0x1c2>
 688:	b6 01       	movw	r22, r12
 68a:	80 e2       	ldi	r24, 0x20	; 32
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 80 04 	call	0x900	; 0x900 <fputc>
 692:	2a 94       	dec	r2
 694:	f4 cf       	rjmp	.-24     	; 0x67e <vfprintf+0x18c>
 696:	f5 01       	movw	r30, r10
 698:	37 fc       	sbrc	r3, 7
 69a:	85 91       	lpm	r24, Z+
 69c:	37 fe       	sbrs	r3, 7
 69e:	81 91       	ld	r24, Z+
 6a0:	5f 01       	movw	r10, r30
 6a2:	b6 01       	movw	r22, r12
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 80 04 	call	0x900	; 0x900 <fputc>
 6aa:	21 10       	cpse	r2, r1
 6ac:	2a 94       	dec	r2
 6ae:	21 e0       	ldi	r18, 0x01	; 1
 6b0:	82 1a       	sub	r8, r18
 6b2:	91 08       	sbc	r9, r1
 6b4:	81 14       	cp	r8, r1
 6b6:	91 04       	cpc	r9, r1
 6b8:	71 f7       	brne	.-36     	; 0x696 <vfprintf+0x1a4>
 6ba:	e8 c0       	rjmp	.+464    	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 6bc:	84 36       	cpi	r24, 0x64	; 100
 6be:	11 f0       	breq	.+4      	; 0x6c4 <vfprintf+0x1d2>
 6c0:	89 36       	cpi	r24, 0x69	; 105
 6c2:	41 f5       	brne	.+80     	; 0x714 <vfprintf+0x222>
 6c4:	f8 01       	movw	r30, r16
 6c6:	37 fe       	sbrs	r3, 7
 6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <vfprintf+0x1e6>
 6ca:	60 81       	ld	r22, Z
 6cc:	71 81       	ldd	r23, Z+1	; 0x01
 6ce:	82 81       	ldd	r24, Z+2	; 0x02
 6d0:	93 81       	ldd	r25, Z+3	; 0x03
 6d2:	0c 5f       	subi	r16, 0xFC	; 252
 6d4:	1f 4f       	sbci	r17, 0xFF	; 255
 6d6:	08 c0       	rjmp	.+16     	; 0x6e8 <vfprintf+0x1f6>
 6d8:	60 81       	ld	r22, Z
 6da:	71 81       	ldd	r23, Z+1	; 0x01
 6dc:	07 2e       	mov	r0, r23
 6de:	00 0c       	add	r0, r0
 6e0:	88 0b       	sbc	r24, r24
 6e2:	99 0b       	sbc	r25, r25
 6e4:	0e 5f       	subi	r16, 0xFE	; 254
 6e6:	1f 4f       	sbci	r17, 0xFF	; 255
 6e8:	f3 2d       	mov	r31, r3
 6ea:	ff 76       	andi	r31, 0x6F	; 111
 6ec:	3f 2e       	mov	r3, r31
 6ee:	97 ff       	sbrs	r25, 7
 6f0:	09 c0       	rjmp	.+18     	; 0x704 <vfprintf+0x212>
 6f2:	90 95       	com	r25
 6f4:	80 95       	com	r24
 6f6:	70 95       	com	r23
 6f8:	61 95       	neg	r22
 6fa:	7f 4f       	sbci	r23, 0xFF	; 255
 6fc:	8f 4f       	sbci	r24, 0xFF	; 255
 6fe:	9f 4f       	sbci	r25, 0xFF	; 255
 700:	f0 68       	ori	r31, 0x80	; 128
 702:	3f 2e       	mov	r3, r31
 704:	2a e0       	ldi	r18, 0x0A	; 10
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	a3 01       	movw	r20, r6
 70a:	0e 94 bc 04 	call	0x978	; 0x978 <__ultoa_invert>
 70e:	88 2e       	mov	r8, r24
 710:	86 18       	sub	r8, r6
 712:	45 c0       	rjmp	.+138    	; 0x79e <vfprintf+0x2ac>
 714:	85 37       	cpi	r24, 0x75	; 117
 716:	31 f4       	brne	.+12     	; 0x724 <vfprintf+0x232>
 718:	23 2d       	mov	r18, r3
 71a:	2f 7e       	andi	r18, 0xEF	; 239
 71c:	b2 2e       	mov	r11, r18
 71e:	2a e0       	ldi	r18, 0x0A	; 10
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	25 c0       	rjmp	.+74     	; 0x76e <vfprintf+0x27c>
 724:	93 2d       	mov	r25, r3
 726:	99 7f       	andi	r25, 0xF9	; 249
 728:	b9 2e       	mov	r11, r25
 72a:	8f 36       	cpi	r24, 0x6F	; 111
 72c:	c1 f0       	breq	.+48     	; 0x75e <vfprintf+0x26c>
 72e:	18 f4       	brcc	.+6      	; 0x736 <vfprintf+0x244>
 730:	88 35       	cpi	r24, 0x58	; 88
 732:	79 f0       	breq	.+30     	; 0x752 <vfprintf+0x260>
 734:	b5 c0       	rjmp	.+362    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 736:	80 37       	cpi	r24, 0x70	; 112
 738:	19 f0       	breq	.+6      	; 0x740 <vfprintf+0x24e>
 73a:	88 37       	cpi	r24, 0x78	; 120
 73c:	21 f0       	breq	.+8      	; 0x746 <vfprintf+0x254>
 73e:	b0 c0       	rjmp	.+352    	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 740:	e9 2f       	mov	r30, r25
 742:	e0 61       	ori	r30, 0x10	; 16
 744:	be 2e       	mov	r11, r30
 746:	b4 fe       	sbrs	r11, 4
 748:	0d c0       	rjmp	.+26     	; 0x764 <vfprintf+0x272>
 74a:	fb 2d       	mov	r31, r11
 74c:	f4 60       	ori	r31, 0x04	; 4
 74e:	bf 2e       	mov	r11, r31
 750:	09 c0       	rjmp	.+18     	; 0x764 <vfprintf+0x272>
 752:	34 fe       	sbrs	r3, 4
 754:	0a c0       	rjmp	.+20     	; 0x76a <vfprintf+0x278>
 756:	29 2f       	mov	r18, r25
 758:	26 60       	ori	r18, 0x06	; 6
 75a:	b2 2e       	mov	r11, r18
 75c:	06 c0       	rjmp	.+12     	; 0x76a <vfprintf+0x278>
 75e:	28 e0       	ldi	r18, 0x08	; 8
 760:	30 e0       	ldi	r19, 0x00	; 0
 762:	05 c0       	rjmp	.+10     	; 0x76e <vfprintf+0x27c>
 764:	20 e1       	ldi	r18, 0x10	; 16
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	02 c0       	rjmp	.+4      	; 0x76e <vfprintf+0x27c>
 76a:	20 e1       	ldi	r18, 0x10	; 16
 76c:	32 e0       	ldi	r19, 0x02	; 2
 76e:	f8 01       	movw	r30, r16
 770:	b7 fe       	sbrs	r11, 7
 772:	07 c0       	rjmp	.+14     	; 0x782 <vfprintf+0x290>
 774:	60 81       	ld	r22, Z
 776:	71 81       	ldd	r23, Z+1	; 0x01
 778:	82 81       	ldd	r24, Z+2	; 0x02
 77a:	93 81       	ldd	r25, Z+3	; 0x03
 77c:	0c 5f       	subi	r16, 0xFC	; 252
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	06 c0       	rjmp	.+12     	; 0x78e <vfprintf+0x29c>
 782:	60 81       	ld	r22, Z
 784:	71 81       	ldd	r23, Z+1	; 0x01
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	0e 5f       	subi	r16, 0xFE	; 254
 78c:	1f 4f       	sbci	r17, 0xFF	; 255
 78e:	a3 01       	movw	r20, r6
 790:	0e 94 bc 04 	call	0x978	; 0x978 <__ultoa_invert>
 794:	88 2e       	mov	r8, r24
 796:	86 18       	sub	r8, r6
 798:	fb 2d       	mov	r31, r11
 79a:	ff 77       	andi	r31, 0x7F	; 127
 79c:	3f 2e       	mov	r3, r31
 79e:	36 fe       	sbrs	r3, 6
 7a0:	0d c0       	rjmp	.+26     	; 0x7bc <vfprintf+0x2ca>
 7a2:	23 2d       	mov	r18, r3
 7a4:	2e 7f       	andi	r18, 0xFE	; 254
 7a6:	a2 2e       	mov	r10, r18
 7a8:	89 14       	cp	r8, r9
 7aa:	58 f4       	brcc	.+22     	; 0x7c2 <vfprintf+0x2d0>
 7ac:	34 fe       	sbrs	r3, 4
 7ae:	0b c0       	rjmp	.+22     	; 0x7c6 <vfprintf+0x2d4>
 7b0:	32 fc       	sbrc	r3, 2
 7b2:	09 c0       	rjmp	.+18     	; 0x7c6 <vfprintf+0x2d4>
 7b4:	83 2d       	mov	r24, r3
 7b6:	8e 7e       	andi	r24, 0xEE	; 238
 7b8:	a8 2e       	mov	r10, r24
 7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <vfprintf+0x2d4>
 7bc:	b8 2c       	mov	r11, r8
 7be:	a3 2c       	mov	r10, r3
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <vfprintf+0x2d6>
 7c2:	b8 2c       	mov	r11, r8
 7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <vfprintf+0x2d6>
 7c6:	b9 2c       	mov	r11, r9
 7c8:	a4 fe       	sbrs	r10, 4
 7ca:	0f c0       	rjmp	.+30     	; 0x7ea <vfprintf+0x2f8>
 7cc:	fe 01       	movw	r30, r28
 7ce:	e8 0d       	add	r30, r8
 7d0:	f1 1d       	adc	r31, r1
 7d2:	80 81       	ld	r24, Z
 7d4:	80 33       	cpi	r24, 0x30	; 48
 7d6:	21 f4       	brne	.+8      	; 0x7e0 <vfprintf+0x2ee>
 7d8:	9a 2d       	mov	r25, r10
 7da:	99 7e       	andi	r25, 0xE9	; 233
 7dc:	a9 2e       	mov	r10, r25
 7de:	09 c0       	rjmp	.+18     	; 0x7f2 <vfprintf+0x300>
 7e0:	a2 fe       	sbrs	r10, 2
 7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <vfprintf+0x2fe>
 7e4:	b3 94       	inc	r11
 7e6:	b3 94       	inc	r11
 7e8:	04 c0       	rjmp	.+8      	; 0x7f2 <vfprintf+0x300>
 7ea:	8a 2d       	mov	r24, r10
 7ec:	86 78       	andi	r24, 0x86	; 134
 7ee:	09 f0       	breq	.+2      	; 0x7f2 <vfprintf+0x300>
 7f0:	b3 94       	inc	r11
 7f2:	a3 fc       	sbrc	r10, 3
 7f4:	11 c0       	rjmp	.+34     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7f6:	a0 fe       	sbrs	r10, 0
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fa:	b2 14       	cp	r11, r2
 7fc:	88 f4       	brcc	.+34     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 7fe:	28 0c       	add	r2, r8
 800:	92 2c       	mov	r9, r2
 802:	9b 18       	sub	r9, r11
 804:	0e c0       	rjmp	.+28     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 806:	b2 14       	cp	r11, r2
 808:	60 f4       	brcc	.+24     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 80a:	b6 01       	movw	r22, r12
 80c:	80 e2       	ldi	r24, 0x20	; 32
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 80 04 	call	0x900	; 0x900 <fputc>
 814:	b3 94       	inc	r11
 816:	f7 cf       	rjmp	.-18     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 818:	b2 14       	cp	r11, r2
 81a:	18 f4       	brcc	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 81c:	2b 18       	sub	r2, r11
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	98 2c       	mov	r9, r8
 822:	21 2c       	mov	r2, r1
 824:	a4 fe       	sbrs	r10, 4
 826:	10 c0       	rjmp	.+32     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 828:	b6 01       	movw	r22, r12
 82a:	80 e3       	ldi	r24, 0x30	; 48
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 80 04 	call	0x900	; 0x900 <fputc>
 832:	a2 fe       	sbrs	r10, 2
 834:	17 c0       	rjmp	.+46     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 836:	a1 fc       	sbrc	r10, 1
 838:	03 c0       	rjmp	.+6      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 83a:	88 e7       	ldi	r24, 0x78	; 120
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	02 c0       	rjmp	.+4      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 840:	88 e5       	ldi	r24, 0x58	; 88
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	b6 01       	movw	r22, r12
 846:	0c c0       	rjmp	.+24     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 848:	8a 2d       	mov	r24, r10
 84a:	86 78       	andi	r24, 0x86	; 134
 84c:	59 f0       	breq	.+22     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 84e:	a1 fe       	sbrs	r10, 1
 850:	02 c0       	rjmp	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 852:	8b e2       	ldi	r24, 0x2B	; 43
 854:	01 c0       	rjmp	.+2      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 856:	80 e2       	ldi	r24, 0x20	; 32
 858:	a7 fc       	sbrc	r10, 7
 85a:	8d e2       	ldi	r24, 0x2D	; 45
 85c:	b6 01       	movw	r22, r12
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 80 04 	call	0x900	; 0x900 <fputc>
 864:	89 14       	cp	r8, r9
 866:	38 f4       	brcc	.+14     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 868:	b6 01       	movw	r22, r12
 86a:	80 e3       	ldi	r24, 0x30	; 48
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	0e 94 80 04 	call	0x900	; 0x900 <fputc>
 872:	9a 94       	dec	r9
 874:	f7 cf       	rjmp	.-18     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
 876:	8a 94       	dec	r8
 878:	f3 01       	movw	r30, r6
 87a:	e8 0d       	add	r30, r8
 87c:	f1 1d       	adc	r31, r1
 87e:	80 81       	ld	r24, Z
 880:	b6 01       	movw	r22, r12
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	0e 94 80 04 	call	0x900	; 0x900 <fputc>
 888:	81 10       	cpse	r8, r1
 88a:	f5 cf       	rjmp	.-22     	; 0x876 <__DATA_REGION_LENGTH__+0x76>
 88c:	22 20       	and	r2, r2
 88e:	09 f4       	brne	.+2      	; 0x892 <__DATA_REGION_LENGTH__+0x92>
 890:	42 ce       	rjmp	.-892    	; 0x516 <vfprintf+0x24>
 892:	b6 01       	movw	r22, r12
 894:	80 e2       	ldi	r24, 0x20	; 32
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 80 04 	call	0x900	; 0x900 <fputc>
 89c:	2a 94       	dec	r2
 89e:	f6 cf       	rjmp	.-20     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 8a0:	f6 01       	movw	r30, r12
 8a2:	86 81       	ldd	r24, Z+6	; 0x06
 8a4:	97 81       	ldd	r25, Z+7	; 0x07
 8a6:	02 c0       	rjmp	.+4      	; 0x8ac <__DATA_REGION_LENGTH__+0xac>
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	9f ef       	ldi	r25, 0xFF	; 255
 8ac:	2b 96       	adiw	r28, 0x0b	; 11
 8ae:	e2 e1       	ldi	r30, 0x12	; 18
 8b0:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__epilogue_restores__>

000008b4 <strnlen_P>:
 8b4:	fc 01       	movw	r30, r24
 8b6:	05 90       	lpm	r0, Z+
 8b8:	61 50       	subi	r22, 0x01	; 1
 8ba:	70 40       	sbci	r23, 0x00	; 0
 8bc:	01 10       	cpse	r0, r1
 8be:	d8 f7       	brcc	.-10     	; 0x8b6 <strnlen_P+0x2>
 8c0:	80 95       	com	r24
 8c2:	90 95       	com	r25
 8c4:	8e 0f       	add	r24, r30
 8c6:	9f 1f       	adc	r25, r31
 8c8:	08 95       	ret

000008ca <strnlen>:
 8ca:	fc 01       	movw	r30, r24
 8cc:	61 50       	subi	r22, 0x01	; 1
 8ce:	70 40       	sbci	r23, 0x00	; 0
 8d0:	01 90       	ld	r0, Z+
 8d2:	01 10       	cpse	r0, r1
 8d4:	d8 f7       	brcc	.-10     	; 0x8cc <strnlen+0x2>
 8d6:	80 95       	com	r24
 8d8:	90 95       	com	r25
 8da:	8e 0f       	add	r24, r30
 8dc:	9f 1f       	adc	r25, r31
 8de:	08 95       	ret

000008e0 <strrev>:
 8e0:	dc 01       	movw	r26, r24
 8e2:	fc 01       	movw	r30, r24
 8e4:	67 2f       	mov	r22, r23
 8e6:	71 91       	ld	r23, Z+
 8e8:	77 23       	and	r23, r23
 8ea:	e1 f7       	brne	.-8      	; 0x8e4 <strrev+0x4>
 8ec:	32 97       	sbiw	r30, 0x02	; 2
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <strrev+0x18>
 8f0:	7c 91       	ld	r23, X
 8f2:	6d 93       	st	X+, r22
 8f4:	70 83       	st	Z, r23
 8f6:	62 91       	ld	r22, -Z
 8f8:	ae 17       	cp	r26, r30
 8fa:	bf 07       	cpc	r27, r31
 8fc:	c8 f3       	brcs	.-14     	; 0x8f0 <strrev+0x10>
 8fe:	08 95       	ret

00000900 <fputc>:
 900:	0f 93       	push	r16
 902:	1f 93       	push	r17
 904:	cf 93       	push	r28
 906:	df 93       	push	r29
 908:	fb 01       	movw	r30, r22
 90a:	23 81       	ldd	r18, Z+3	; 0x03
 90c:	21 fd       	sbrc	r18, 1
 90e:	03 c0       	rjmp	.+6      	; 0x916 <fputc+0x16>
 910:	8f ef       	ldi	r24, 0xFF	; 255
 912:	9f ef       	ldi	r25, 0xFF	; 255
 914:	2c c0       	rjmp	.+88     	; 0x96e <fputc+0x6e>
 916:	22 ff       	sbrs	r18, 2
 918:	16 c0       	rjmp	.+44     	; 0x946 <fputc+0x46>
 91a:	46 81       	ldd	r20, Z+6	; 0x06
 91c:	57 81       	ldd	r21, Z+7	; 0x07
 91e:	24 81       	ldd	r18, Z+4	; 0x04
 920:	35 81       	ldd	r19, Z+5	; 0x05
 922:	42 17       	cp	r20, r18
 924:	53 07       	cpc	r21, r19
 926:	44 f4       	brge	.+16     	; 0x938 <fputc+0x38>
 928:	a0 81       	ld	r26, Z
 92a:	b1 81       	ldd	r27, Z+1	; 0x01
 92c:	9d 01       	movw	r18, r26
 92e:	2f 5f       	subi	r18, 0xFF	; 255
 930:	3f 4f       	sbci	r19, 0xFF	; 255
 932:	31 83       	std	Z+1, r19	; 0x01
 934:	20 83       	st	Z, r18
 936:	8c 93       	st	X, r24
 938:	26 81       	ldd	r18, Z+6	; 0x06
 93a:	37 81       	ldd	r19, Z+7	; 0x07
 93c:	2f 5f       	subi	r18, 0xFF	; 255
 93e:	3f 4f       	sbci	r19, 0xFF	; 255
 940:	37 83       	std	Z+7, r19	; 0x07
 942:	26 83       	std	Z+6, r18	; 0x06
 944:	14 c0       	rjmp	.+40     	; 0x96e <fputc+0x6e>
 946:	8b 01       	movw	r16, r22
 948:	ec 01       	movw	r28, r24
 94a:	fb 01       	movw	r30, r22
 94c:	00 84       	ldd	r0, Z+8	; 0x08
 94e:	f1 85       	ldd	r31, Z+9	; 0x09
 950:	e0 2d       	mov	r30, r0
 952:	09 95       	icall
 954:	89 2b       	or	r24, r25
 956:	e1 f6       	brne	.-72     	; 0x910 <fputc+0x10>
 958:	d8 01       	movw	r26, r16
 95a:	16 96       	adiw	r26, 0x06	; 6
 95c:	8d 91       	ld	r24, X+
 95e:	9c 91       	ld	r25, X
 960:	17 97       	sbiw	r26, 0x07	; 7
 962:	01 96       	adiw	r24, 0x01	; 1
 964:	17 96       	adiw	r26, 0x07	; 7
 966:	9c 93       	st	X, r25
 968:	8e 93       	st	-X, r24
 96a:	16 97       	sbiw	r26, 0x06	; 6
 96c:	ce 01       	movw	r24, r28
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	1f 91       	pop	r17
 974:	0f 91       	pop	r16
 976:	08 95       	ret

00000978 <__ultoa_invert>:
 978:	fa 01       	movw	r30, r20
 97a:	aa 27       	eor	r26, r26
 97c:	28 30       	cpi	r18, 0x08	; 8
 97e:	51 f1       	breq	.+84     	; 0x9d4 <__ultoa_invert+0x5c>
 980:	20 31       	cpi	r18, 0x10	; 16
 982:	81 f1       	breq	.+96     	; 0x9e4 <__ultoa_invert+0x6c>
 984:	e8 94       	clt
 986:	6f 93       	push	r22
 988:	6e 7f       	andi	r22, 0xFE	; 254
 98a:	6e 5f       	subi	r22, 0xFE	; 254
 98c:	7f 4f       	sbci	r23, 0xFF	; 255
 98e:	8f 4f       	sbci	r24, 0xFF	; 255
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	af 4f       	sbci	r26, 0xFF	; 255
 994:	b1 e0       	ldi	r27, 0x01	; 1
 996:	3e d0       	rcall	.+124    	; 0xa14 <__ultoa_invert+0x9c>
 998:	b4 e0       	ldi	r27, 0x04	; 4
 99a:	3c d0       	rcall	.+120    	; 0xa14 <__ultoa_invert+0x9c>
 99c:	67 0f       	add	r22, r23
 99e:	78 1f       	adc	r23, r24
 9a0:	89 1f       	adc	r24, r25
 9a2:	9a 1f       	adc	r25, r26
 9a4:	a1 1d       	adc	r26, r1
 9a6:	68 0f       	add	r22, r24
 9a8:	79 1f       	adc	r23, r25
 9aa:	8a 1f       	adc	r24, r26
 9ac:	91 1d       	adc	r25, r1
 9ae:	a1 1d       	adc	r26, r1
 9b0:	6a 0f       	add	r22, r26
 9b2:	71 1d       	adc	r23, r1
 9b4:	81 1d       	adc	r24, r1
 9b6:	91 1d       	adc	r25, r1
 9b8:	a1 1d       	adc	r26, r1
 9ba:	20 d0       	rcall	.+64     	; 0x9fc <__ultoa_invert+0x84>
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <__ultoa_invert+0x48>
 9be:	68 94       	set
 9c0:	3f 91       	pop	r19
 9c2:	2a e0       	ldi	r18, 0x0A	; 10
 9c4:	26 9f       	mul	r18, r22
 9c6:	11 24       	eor	r1, r1
 9c8:	30 19       	sub	r19, r0
 9ca:	30 5d       	subi	r19, 0xD0	; 208
 9cc:	31 93       	st	Z+, r19
 9ce:	de f6       	brtc	.-74     	; 0x986 <__ultoa_invert+0xe>
 9d0:	cf 01       	movw	r24, r30
 9d2:	08 95       	ret
 9d4:	46 2f       	mov	r20, r22
 9d6:	47 70       	andi	r20, 0x07	; 7
 9d8:	40 5d       	subi	r20, 0xD0	; 208
 9da:	41 93       	st	Z+, r20
 9dc:	b3 e0       	ldi	r27, 0x03	; 3
 9de:	0f d0       	rcall	.+30     	; 0x9fe <__ultoa_invert+0x86>
 9e0:	c9 f7       	brne	.-14     	; 0x9d4 <__ultoa_invert+0x5c>
 9e2:	f6 cf       	rjmp	.-20     	; 0x9d0 <__ultoa_invert+0x58>
 9e4:	46 2f       	mov	r20, r22
 9e6:	4f 70       	andi	r20, 0x0F	; 15
 9e8:	40 5d       	subi	r20, 0xD0	; 208
 9ea:	4a 33       	cpi	r20, 0x3A	; 58
 9ec:	18 f0       	brcs	.+6      	; 0x9f4 <__ultoa_invert+0x7c>
 9ee:	49 5d       	subi	r20, 0xD9	; 217
 9f0:	31 fd       	sbrc	r19, 1
 9f2:	40 52       	subi	r20, 0x20	; 32
 9f4:	41 93       	st	Z+, r20
 9f6:	02 d0       	rcall	.+4      	; 0x9fc <__ultoa_invert+0x84>
 9f8:	a9 f7       	brne	.-22     	; 0x9e4 <__ultoa_invert+0x6c>
 9fa:	ea cf       	rjmp	.-44     	; 0x9d0 <__ultoa_invert+0x58>
 9fc:	b4 e0       	ldi	r27, 0x04	; 4
 9fe:	a6 95       	lsr	r26
 a00:	97 95       	ror	r25
 a02:	87 95       	ror	r24
 a04:	77 95       	ror	r23
 a06:	67 95       	ror	r22
 a08:	ba 95       	dec	r27
 a0a:	c9 f7       	brne	.-14     	; 0x9fe <__ultoa_invert+0x86>
 a0c:	00 97       	sbiw	r24, 0x00	; 0
 a0e:	61 05       	cpc	r22, r1
 a10:	71 05       	cpc	r23, r1
 a12:	08 95       	ret
 a14:	9b 01       	movw	r18, r22
 a16:	ac 01       	movw	r20, r24
 a18:	0a 2e       	mov	r0, r26
 a1a:	06 94       	lsr	r0
 a1c:	57 95       	ror	r21
 a1e:	47 95       	ror	r20
 a20:	37 95       	ror	r19
 a22:	27 95       	ror	r18
 a24:	ba 95       	dec	r27
 a26:	c9 f7       	brne	.-14     	; 0xa1a <__ultoa_invert+0xa2>
 a28:	62 0f       	add	r22, r18
 a2a:	73 1f       	adc	r23, r19
 a2c:	84 1f       	adc	r24, r20
 a2e:	95 1f       	adc	r25, r21
 a30:	a0 1d       	adc	r26, r0
 a32:	08 95       	ret

00000a34 <__prologue_saves__>:
 a34:	2f 92       	push	r2
 a36:	3f 92       	push	r3
 a38:	4f 92       	push	r4
 a3a:	5f 92       	push	r5
 a3c:	6f 92       	push	r6
 a3e:	7f 92       	push	r7
 a40:	8f 92       	push	r8
 a42:	9f 92       	push	r9
 a44:	af 92       	push	r10
 a46:	bf 92       	push	r11
 a48:	cf 92       	push	r12
 a4a:	df 92       	push	r13
 a4c:	ef 92       	push	r14
 a4e:	ff 92       	push	r15
 a50:	0f 93       	push	r16
 a52:	1f 93       	push	r17
 a54:	cf 93       	push	r28
 a56:	df 93       	push	r29
 a58:	cd b7       	in	r28, 0x3d	; 61
 a5a:	de b7       	in	r29, 0x3e	; 62
 a5c:	ca 1b       	sub	r28, r26
 a5e:	db 0b       	sbc	r29, r27
 a60:	0f b6       	in	r0, 0x3f	; 63
 a62:	f8 94       	cli
 a64:	de bf       	out	0x3e, r29	; 62
 a66:	0f be       	out	0x3f, r0	; 63
 a68:	cd bf       	out	0x3d, r28	; 61
 a6a:	09 94       	ijmp

00000a6c <__epilogue_restores__>:
 a6c:	2a 88       	ldd	r2, Y+18	; 0x12
 a6e:	39 88       	ldd	r3, Y+17	; 0x11
 a70:	48 88       	ldd	r4, Y+16	; 0x10
 a72:	5f 84       	ldd	r5, Y+15	; 0x0f
 a74:	6e 84       	ldd	r6, Y+14	; 0x0e
 a76:	7d 84       	ldd	r7, Y+13	; 0x0d
 a78:	8c 84       	ldd	r8, Y+12	; 0x0c
 a7a:	9b 84       	ldd	r9, Y+11	; 0x0b
 a7c:	aa 84       	ldd	r10, Y+10	; 0x0a
 a7e:	b9 84       	ldd	r11, Y+9	; 0x09
 a80:	c8 84       	ldd	r12, Y+8	; 0x08
 a82:	df 80       	ldd	r13, Y+7	; 0x07
 a84:	ee 80       	ldd	r14, Y+6	; 0x06
 a86:	fd 80       	ldd	r15, Y+5	; 0x05
 a88:	0c 81       	ldd	r16, Y+4	; 0x04
 a8a:	1b 81       	ldd	r17, Y+3	; 0x03
 a8c:	aa 81       	ldd	r26, Y+2	; 0x02
 a8e:	b9 81       	ldd	r27, Y+1	; 0x01
 a90:	ce 0f       	add	r28, r30
 a92:	d1 1d       	adc	r29, r1
 a94:	0f b6       	in	r0, 0x3f	; 63
 a96:	f8 94       	cli
 a98:	de bf       	out	0x3e, r29	; 62
 a9a:	0f be       	out	0x3f, r0	; 63
 a9c:	cd bf       	out	0x3d, r28	; 61
 a9e:	ed 01       	movw	r28, r26
 aa0:	08 95       	ret

00000aa2 <_exit>:
 aa2:	f8 94       	cli

00000aa4 <__stop_program>:
 aa4:	ff cf       	rjmp	.-2      	; 0xaa4 <__stop_program>

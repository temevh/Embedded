
SPISlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800200  00000cbc  00000d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  008002b0  008002b0  00000e00  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e5c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016f5  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fcd  00000000  00000000  00002641  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f9  00000000  00000000  0000360e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00004008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000820  00000000  00000000  00004124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ac  00000000  00000000  00004944  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004df0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
  62:	00 00       	nop
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	7f 01       	movw	r14, r30
  e6:	87 01       	movw	r16, r14
  e8:	87 01       	movw	r16, r14
  ea:	87 01       	movw	r16, r14
  ec:	81 01       	movw	r16, r2
  ee:	87 01       	movw	r16, r14
  f0:	83 01       	movw	r16, r6
  f2:	85 01       	movw	r16, r10
  f4:	87 01       	movw	r16, r14
  f6:	87 01       	movw	r16, r14
  f8:	87 01       	movw	r16, r14
  fa:	87 01       	movw	r16, r14
  fc:	87 01       	movw	r16, r14
  fe:	87 01       	movw	r16, r14
 100:	87 01       	movw	r16, r14
 102:	87 01       	movw	r16, r14
 104:	87 01       	movw	r16, r14
 106:	87 01       	movw	r16, r14
 108:	87 01       	movw	r16, r14
 10a:	87 01       	movw	r16, r14
 10c:	87 01       	movw	r16, r14
 10e:	87 01       	movw	r16, r14
 110:	87 01       	movw	r16, r14
 112:	87 01       	movw	r16, r14
 114:	87 01       	movw	r16, r14
 116:	87 01       	movw	r16, r14
 118:	87 01       	movw	r16, r14
 11a:	87 01       	movw	r16, r14
 11c:	87 01       	movw	r16, r14
 11e:	87 01       	movw	r16, r14
 120:	87 01       	movw	r16, r14
 122:	87 01       	movw	r16, r14
 124:	87 01       	movw	r16, r14
 126:	87 01       	movw	r16, r14
 128:	87 01       	movw	r16, r14
 12a:	87 01       	movw	r16, r14
 12c:	87 01       	movw	r16, r14
 12e:	87 01       	movw	r16, r14
 130:	87 01       	movw	r16, r14
 132:	87 01       	movw	r16, r14
 134:	87 01       	movw	r16, r14
 136:	87 01       	movw	r16, r14
 138:	87 01       	movw	r16, r14
 13a:	87 01       	movw	r16, r14
 13c:	87 01       	movw	r16, r14
 13e:	87 01       	movw	r16, r14
 140:	87 01       	movw	r16, r14
 142:	87 01       	movw	r16, r14
 144:	87 01       	movw	r16, r14
 146:	87 01       	movw	r16, r14
 148:	87 01       	movw	r16, r14
 14a:	87 01       	movw	r16, r14
 14c:	87 01       	movw	r16, r14
 14e:	87 01       	movw	r16, r14
 150:	87 01       	movw	r16, r14
 152:	87 01       	movw	r16, r14
 154:	87 01       	movw	r16, r14
 156:	87 01       	movw	r16, r14
 158:	87 01       	movw	r16, r14
 15a:	87 01       	movw	r16, r14
 15c:	87 01       	movw	r16, r14
 15e:	87 01       	movw	r16, r14
 160:	87 01       	movw	r16, r14
 162:	87 01       	movw	r16, r14
 164:	77 01       	movw	r14, r14
 166:	87 01       	movw	r16, r14
 168:	87 01       	movw	r16, r14
 16a:	87 01       	movw	r16, r14
 16c:	79 01       	movw	r14, r18
 16e:	87 01       	movw	r16, r14
 170:	7b 01       	movw	r14, r22
 172:	7d 01       	movw	r14, r26
 174:	87 01       	movw	r16, r14
 176:	87 01       	movw	r16, r14
 178:	87 01       	movw	r16, r14
 17a:	87 01       	movw	r16, r14
 17c:	87 01       	movw	r16, r14
 17e:	87 01       	movw	r16, r14
 180:	87 01       	movw	r16, r14
 182:	87 01       	movw	r16, r14
 184:	87 01       	movw	r16, r14
 186:	87 01       	movw	r16, r14
 188:	87 01       	movw	r16, r14
 18a:	87 01       	movw	r16, r14
 18c:	87 01       	movw	r16, r14
 18e:	87 01       	movw	r16, r14
 190:	87 01       	movw	r16, r14
 192:	87 01       	movw	r16, r14
 194:	87 01       	movw	r16, r14
 196:	87 01       	movw	r16, r14
 198:	87 01       	movw	r16, r14
 19a:	87 01       	movw	r16, r14
 19c:	87 01       	movw	r16, r14
 19e:	87 01       	movw	r16, r14
 1a0:	87 01       	movw	r16, r14
 1a2:	87 01       	movw	r16, r14
 1a4:	6f 01       	movw	r12, r30
 1a6:	87 01       	movw	r16, r14
 1a8:	87 01       	movw	r16, r14
 1aa:	87 01       	movw	r16, r14
 1ac:	71 01       	movw	r14, r2
 1ae:	87 01       	movw	r16, r14
 1b0:	73 01       	movw	r14, r6
 1b2:	75 01       	movw	r14, r10
 1b4:	87 01       	movw	r16, r14
 1b6:	87 01       	movw	r16, r14
 1b8:	87 01       	movw	r16, r14
 1ba:	87 01       	movw	r16, r14
 1bc:	87 01       	movw	r16, r14
 1be:	87 01       	movw	r16, r14
 1c0:	87 01       	movw	r16, r14
 1c2:	87 01       	movw	r16, r14
 1c4:	69 01       	movw	r12, r18
 1c6:	87 01       	movw	r16, r14
 1c8:	87 01       	movw	r16, r14
 1ca:	87 01       	movw	r16, r14
 1cc:	89 01       	movw	r16, r18
 1ce:	87 01       	movw	r16, r14
 1d0:	6b 01       	movw	r12, r22
 1d2:	6d 01       	movw	r12, r26

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	ec eb       	ldi	r30, 0xBC	; 188
 1ec:	fc e0       	ldi	r31, 0x0C	; 12
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	a0 3b       	cpi	r26, 0xB0	; 176
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	22 e0       	ldi	r18, 0x02	; 2
 200:	a0 eb       	ldi	r26, 0xB0	; 176
 202:	b2 e0       	ldi	r27, 0x02	; 2
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	a4 3d       	cpi	r26, 0xD4	; 212
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	b9 d0       	rcall	.+370    	; 0x382 <main>
 210:	53 c5       	rjmp	.+2726   	; 0xcb8 <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 214:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
 216:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 218:	10 c0       	rjmp	.+32     	; 0x23a <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
 21a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	e9 ef       	ldi	r30, 0xF9	; 249
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <keypad_ScanKey+0xe>
 226:	00 c0       	rjmp	.+0      	; 0x228 <keypad_ScanKey+0x14>
 228:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
 22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 22e:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
 230:	8f 30       	cpi	r24, 0x0F	; 15
 232:	29 f4       	brne	.+10     	; 0x23e <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
 234:	99 0f       	add	r25, r25
 236:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	24 30       	cpi	r18, 0x04	; 4
 23c:	70 f3       	brcs	.-36     	; 0x21a <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
 23e:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
 240:	89 0f       	add	r24, r25
 242:	08 95       	ret

00000244 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
 244:	80 ef       	ldi	r24, 0xF0	; 240
 246:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 24a:	08 95       	ret

0000024c <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 24c:	8f e0       	ldi	r24, 0x0F	; 15
 24e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
 252:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 256:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
 258:	8f 30       	cpi	r24, 0x0F	; 15
 25a:	c1 f7       	brne	.-16     	; 0x24c <KEYPAD_WaitForKeyRelease>
 25c:	89 ef       	ldi	r24, 0xF9	; 249
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <KEYPAD_WaitForKeyRelease+0x14>
 264:	00 c0       	rjmp	.+0      	; 0x266 <KEYPAD_WaitForKeyRelease+0x1a>
 266:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
 26e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 272:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
 274:	8f 30       	cpi	r24, 0x0F	; 15
 276:	51 f7       	brne	.-44     	; 0x24c <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
 278:	08 95       	ret

0000027a <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
 280:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 284:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
 286:	8f 30       	cpi	r24, 0x0F	; 15
 288:	c1 f3       	breq	.-16     	; 0x27a <KEYPAD_WaitForKeyPress>
 28a:	89 ef       	ldi	r24, 0xF9	; 249
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <KEYPAD_WaitForKeyPress+0x14>
 292:	00 c0       	rjmp	.+0      	; 0x294 <KEYPAD_WaitForKeyPress+0x1a>
 294:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
 29c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 2a0:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
 2a2:	8f 30       	cpi	r24, 0x0F	; 15
 2a4:	51 f3       	breq	.-44     	; 0x27a <KEYPAD_WaitForKeyPress>
}
 2a6:	08 95       	ret

000002a8 <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
 2a8:	d1 df       	rcall	.-94     	; 0x24c <KEYPAD_WaitForKeyRelease>
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <KEYPAD_GetKey+0x6>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
 2b4:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
 2b6:	e1 df       	rcall	.-62     	; 0x27a <KEYPAD_WaitForKeyPress>
 2b8:	ad df       	rcall	.-166    	; 0x214 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	fc 01       	movw	r30, r24
 2be:	e7 57       	subi	r30, 0x77	; 119
 2c0:	f1 09       	sbc	r31, r1
 2c2:	e8 37       	cpi	r30, 0x78	; 120
 2c4:	f1 05       	cpc	r31, r1
 2c6:	18 f5       	brcc	.+70     	; 0x30e <KEYPAD_GetKey+0x66>
 2c8:	88 27       	eor	r24, r24
 2ca:	ee 58       	subi	r30, 0x8E	; 142
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	bd c1       	rjmp	.+890    	; 0x64c <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
 2d2:	8a e2       	ldi	r24, 0x2A	; 42
 2d4:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
 2d6:	84 e3       	ldi	r24, 0x34	; 52
 2d8:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
 2da:	81 e3       	ldi	r24, 0x31	; 49
 2dc:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
 2e2:	88 e3       	ldi	r24, 0x38	; 56
 2e4:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
 2e6:	85 e3       	ldi	r24, 0x35	; 53
 2e8:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
 2ea:	82 e3       	ldi	r24, 0x32	; 50
 2ec:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
 2ee:	83 e2       	ldi	r24, 0x23	; 35
 2f0:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
 2f2:	89 e3       	ldi	r24, 0x39	; 57
 2f4:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
 2f6:	86 e3       	ldi	r24, 0x36	; 54
 2f8:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
 2fe:	84 e4       	ldi	r24, 0x44	; 68
 300:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
 302:	83 e4       	ldi	r24, 0x43	; 67
 304:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
 306:	82 e4       	ldi	r24, 0x42	; 66
 308:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
 30e:	8a e7       	ldi	r24, 0x7A	; 122
 310:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
 312:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
 314:	08 95       	ret

00000316 <USART_init>:


static void USART_init(uint16_t ubrr) // unsigned int
{
    /* Set baud rate in the USART Baud Rate Registers (UBRR) */
    UBRR0H = (unsigned char) (ubrr >> 8);
 316:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    UBRR0L = (unsigned char) ubrr;
 31a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    
    /* Enable receiver and transmitter on RX0 and TX0 */
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //NOTE: the ATmega328p has 1 UART: 0
 31e:	e1 ec       	ldi	r30, 0xC1	; 193
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	88 61       	ori	r24, 0x18	; 24
 326:	80 83       	st	Z, r24
    
    /* Set frame format: 8 bit data, 2 stop bit */
    UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
 328:	e2 ec       	ldi	r30, 0xC2	; 194
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	8e 60       	ori	r24, 0x0E	; 14
 330:	80 83       	st	Z, r24
 332:	08 95       	ret

00000334 <USART_Transmit>:
    
}
static void USART_Transmit(unsigned char data, FILE *stream)
{
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0)))
 334:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 338:	95 ff       	sbrs	r25, 5
 33a:	fc cf       	rjmp	.-8      	; 0x334 <USART_Transmit>
    {
        ;
    }
    
    /* Put the data into a buffer, then send/transmit the data */
    UDR0 = data;
 33c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 340:	08 95       	ret

00000342 <USART_Receive>:
}
static char USART_Receive(FILE *stream)
{
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0)))
 342:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 346:	85 ff       	sbrs	r24, 5
 348:	fc cf       	rjmp	.-8      	; 0x342 <USART_Receive>
    {
        ;
    }
    
    /* Get the received data from the buffer */
    return UDR0;
 34a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 34e:	08 95       	ret

00000350 <change_password>:


void init_uart(void);

void change_password(char changed_password[], size_t size){
 350:	ac 01       	movw	r20, r24
	// Write data to eeprom
	for (uint16_t address_index = 0; address_index < size; address_index++){
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	11 c0       	rjmp	.+34     	; 0x37a <change_password+0x2a>
		while(EECR & (1 << 1)){/* wait for the previous write operation to end */}
 358:	f9 99       	sbic	0x1f, 1	; 31
 35a:	fe cf       	rjmp	.-4      	; 0x358 <change_password+0x8>
		
		EEAR = address_index;
 35c:	32 bd       	out	0x22, r19	; 34
 35e:	21 bd       	out	0x21, r18	; 33
		EEDR = changed_password[address_index];
 360:	fa 01       	movw	r30, r20
 362:	e2 0f       	add	r30, r18
 364:	f3 1f       	adc	r31, r19
 366:	90 81       	ld	r25, Z
 368:	90 bd       	out	0x20, r25	; 32
		EECR |= (1 << 2); // master programming enable
 36a:	9f b3       	in	r25, 0x1f	; 31
 36c:	94 60       	ori	r25, 0x04	; 4
 36e:	9f bb       	out	0x1f, r25	; 31
		EECR |= (1 << 1); // EEPROM programming enable
 370:	9f b3       	in	r25, 0x1f	; 31
 372:	92 60       	ori	r25, 0x02	; 2
 374:	9f bb       	out	0x1f, r25	; 31

void init_uart(void);

void change_password(char changed_password[], size_t size){
	// Write data to eeprom
	for (uint16_t address_index = 0; address_index < size; address_index++){
 376:	2f 5f       	subi	r18, 0xFF	; 255
 378:	3f 4f       	sbci	r19, 0xFF	; 255
 37a:	26 17       	cp	r18, r22
 37c:	37 07       	cpc	r19, r23
 37e:	60 f3       	brcs	.-40     	; 0x358 <change_password+0x8>
		EEAR = address_index;
		EEDR = changed_password[address_index];
		EECR |= (1 << 2); // master programming enable
		EECR |= (1 << 1); // EEPROM programming enable
	}
}
 380:	08 95       	ret

00000382 <main>:
// Setup the stream functions for UART
FILE uart_output = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_Receive, _FDEV_SETUP_READ);

int main(void)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	a5 97       	sbiw	r28, 0x25	; 37
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61
	init_uart();
 396:	46 d1       	rcall	.+652    	; 0x624 <init_uart>
	KEYPAD_Init();
 398:	55 df       	rcall	.-342    	; 0x244 <KEYPAD_Init>
 39a:	88 e0       	ldi	r24, 0x08	; 8
	//sei();
	
    /* set MISO as output, pin 12 (PB4)*/
    DDRB  = (1 << PB3);
 39c:	84 b9       	out	0x04, r24	; 4
 39e:	80 e4       	ldi	r24, 0x40	; 64
    /* set SPI enable */
    SPCR  = (1 << 6);
 3a0:	8c bd       	out	0x2c, r24	; 44
 3a2:	8a b1       	in	r24, 0x0a	; 10
	
	// Set PD7 as input
	DDRD &= ~(1 << PIR_SENSOR);
 3a4:	8f 77       	andi	r24, 0x7F	; 127
 3a6:	8a b9       	out	0x0a, r24	; 10
 3a8:	87 e6       	ldi	r24, 0x67	; 103
	
    // initialize the UART with 9600 BAUD
    USART_init(MYUBRR);
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	b4 df       	rcall	.-152    	; 0x316 <USART_init>
 3ae:	ee ec       	ldi	r30, 0xCE	; 206
        
    // redirect the stdin and stdout to UART functions
    stdout = &uart_output;
 3b0:	f2 e0       	ldi	r31, 0x02	; 2
 3b2:	8e e0       	ldi	r24, 0x0E	; 14
 3b4:	92 e0       	ldi	r25, 0x02	; 2
 3b6:	93 83       	std	Z+3, r25	; 0x03
 3b8:	82 83       	std	Z+2, r24	; 0x02
 3ba:	80 e0       	ldi	r24, 0x00	; 0
    stdin = &uart_input;
 3bc:	92 e0       	ldi	r25, 0x02	; 2
 3be:	91 83       	std	Z+1, r25	; 0x01
 3c0:	80 83       	st	Z, r24
 3c2:	85 e0       	ldi	r24, 0x05	; 5
	/* UNO has 1 kB (1023 bytes) of EEPROM memory and MEGA 2560 has 4 kB (4096 B) */
	uint16_t memory_address_max = 32;
	char correct_password[32]; // data read from eeprom
	
	//changing the password can be done here
	char changed_password[] = "6651";
 3c4:	eb ea       	ldi	r30, 0xAB	; 171
 3c6:	f2 e0       	ldi	r31, 0x02	; 2
 3c8:	de 01       	movw	r26, r28
 3ca:	91 96       	adiw	r26, 0x21	; 33
 3cc:	01 90       	ld	r0, Z+
 3ce:	0d 92       	st	X+, r0
 3d0:	8a 95       	dec	r24
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0x4a>
 3d4:	65 e0       	ldi	r22, 0x05	; 5
	change_password(changed_password, sizeof(changed_password));
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	ce 01       	movw	r24, r28
 3da:	81 96       	adiw	r24, 0x21	; 33
 3dc:	b9 df       	rcall	.-142    	; 0x350 <change_password>
 3de:	80 e0       	ldi	r24, 0x00	; 0
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	10 c0       	rjmp	.+32     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e4:	f9 99       	sbic	0x1f, 1	; 31
		while(EECR & (1 << 1)){/*wait for previous write operation to end*/}
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <main+0x62>
 3e8:	92 bd       	out	0x22, r25	; 34
		EEAR = address_index;
 3ea:	81 bd       	out	0x21, r24	; 33
 3ec:	2f b3       	in	r18, 0x1f	; 31
		EECR |=0x01; //enable EEPROM read
 3ee:	21 60       	ori	r18, 0x01	; 1
 3f0:	2f bb       	out	0x1f, r18	; 31
 3f2:	20 b5       	in	r18, 0x20	; 32
		correct_password[address_index] = EEDR;
 3f4:	e1 e0       	ldi	r30, 0x01	; 1
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	ec 0f       	add	r30, r28
 3fa:	fd 1f       	adc	r31, r29
 3fc:	e8 0f       	add	r30, r24
 3fe:	f9 1f       	adc	r31, r25
 400:	20 83       	st	Z, r18
 402:	01 96       	adiw	r24, 0x01	; 1
	//changing the password can be done here
	char changed_password[] = "6651";
	change_password(changed_password, sizeof(changed_password));
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 404:	80 32       	cpi	r24, 0x20	; 32
 406:	91 05       	cpc	r25, r1
 408:	68 f3       	brcs	.-38     	; 0x3e4 <main+0x62>
 40a:	4f 9b       	sbis	0x09, 7	; 9
    /* send message to master and receive message from master */
    while (1) 
    {
		int i = 0;
		
		if (PIND & (1 << PIR_SENSOR)) {
 40c:	12 c0       	rjmp	.+36     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 40e:	81 e0       	ldi	r24, 0x01	; 1
			movementDetected = true;
 410:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <movementDetected>
			printf("DETECTED MOVEMENT, GIVE PASSWORD\n");
 414:	80 e5       	ldi	r24, 0x50	; 80
 416:	92 e0       	ldi	r25, 0x02	; 2
 418:	44 d1       	rcall	.+648    	; 0x6a2 <puts>
			//strcpy(spi_send_data, givePass_message);
			strcpy(spi_send_data, givePass_code);  // Set the spi_send_data to 222
 41a:	6c e1       	ldi	r22, 0x1C	; 28
 41c:	72 e0       	ldi	r23, 0x02	; 2
 41e:	8b e2       	ldi	r24, 0x2B	; 43
 420:	92 e0       	ldi	r25, 0x02	; 2
 422:	25 d1       	rcall	.+586    	; 0x66e <strcpy>
			printf(spi_send_data);
 424:	8b e2       	ldi	r24, 0x2B	; 43
 426:	92 e0       	ldi	r25, 0x02	; 2
 428:	9f 93       	push	r25
 42a:	8f 93       	push	r24
 42c:	27 d1       	rcall	.+590    	; 0x67c <printf>
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	80 e0       	ldi	r24, 0x00	; 0
	//changing the password can be done here
	char changed_password[] = "6651";
	change_password(changed_password, sizeof(changed_password));
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 434:	12 c0       	rjmp	.+36     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 436:	08 2e       	mov	r0, r24
			
		}
		
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
        {
            SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 438:	00 0c       	add	r0, r0
 43a:	99 0b       	sbc	r25, r25
 43c:	fc 01       	movw	r30, r24
 43e:	e5 5d       	subi	r30, 0xD5	; 213
 440:	fd 4f       	sbci	r31, 0xFD	; 253
 442:	30 81       	ld	r19, Z
 444:	3e bd       	out	0x2e, r19	; 46
 446:	0d b4       	in	r0, 0x2d	; 45
            while(!(SPSR & (1 << SPIF))){;}
 448:	07 fe       	sbrs	r0, 7
 44a:	fd cf       	rjmp	.-6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44c:	3e b5       	in	r19, 0x2e	; 46
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 44e:	fc 01       	movw	r30, r24
 450:	e8 54       	subi	r30, 0x48	; 72
 452:	fd 4f       	sbci	r31, 0xFD	; 253
 454:	30 83       	st	Z, r19
 456:	81 e0       	ldi	r24, 0x01	; 1
			strcpy(spi_send_data, givePass_code);  // Set the spi_send_data to 222
			printf(spi_send_data);
			
		}
		
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 458:	82 0f       	add	r24, r18
 45a:	28 2f       	mov	r18, r24
 45c:	85 30       	cpi	r24, 0x05	; 5
 45e:	58 f3       	brcs	.-42     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 460:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <movementDetected>
            SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
            while(!(SPSR & (1 << SPIF))){;}
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
        }
		
        if(movementDetected == true){
 464:	88 23       	and	r24, r24
 466:	89 f2       	breq	.-94     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 468:	13 c0       	rjmp	.+38     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 46a:	08 2e       	mov	r0, r24
			for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
			{
				SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 46c:	00 0c       	add	r0, r0
 46e:	99 0b       	sbc	r25, r25
 470:	fc 01       	movw	r30, r24
 472:	e5 5d       	subi	r30, 0xD5	; 213
 474:	fd 4f       	sbci	r31, 0xFD	; 253
 476:	30 81       	ld	r19, Z
 478:	3e bd       	out	0x2e, r19	; 46
 47a:	0d b4       	in	r0, 0x2d	; 45
				while(!(SPSR & (1 << SPIF))){;}
 47c:	07 fe       	sbrs	r0, 7
 47e:	fd cf       	rjmp	.-6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 480:	3e b5       	in	r19, 0x2e	; 46
				spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 482:	fc 01       	movw	r30, r24
 484:	e8 54       	subi	r30, 0x48	; 72
 486:	fd 4f       	sbci	r31, 0xFD	; 253
 488:	30 83       	st	Z, r19
 48a:	81 e0       	ldi	r24, 0x01	; 1
            while(!(SPSR & (1 << SPIF))){;}
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
        }
		
        if(movementDetected == true){
			for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 48c:	82 0f       	add	r24, r18
 48e:	01 c0       	rjmp	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	28 2f       	mov	r18, r24
 494:	85 30       	cpi	r24, 0x05	; 5
 496:	48 f3       	brcs	.-46     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 498:	00 e0       	ldi	r16, 0x00	; 0
 49a:	10 e0       	ldi	r17, 0x00	; 0
 49c:	5e c0       	rjmp	.+188    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
				while(!(SPSR & (1 << SPIF))){;}
				spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
			}
			//printf(spi_receive_data);
			while(passwordCorrect == false){
				Keypress = KEYPAD_GetKey();
 49e:	04 df       	rcall	.-504    	; 0x2a8 <KEYPAD_GetKey>
 4a0:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <Keypress>
 4a4:	1f 92       	push	r1
				//turns uint_8 to char
				sprintf(str, "%c", Keypress);
 4a6:	8f 93       	push	r24
 4a8:	81 e7       	ldi	r24, 0x71	; 113
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	9f 93       	push	r25
 4ae:	8f 93       	push	r24
 4b0:	0f 2e       	mov	r0, r31
 4b2:	fc ec       	ldi	r31, 0xCC	; 204
 4b4:	ef 2e       	mov	r14, r31
 4b6:	f2 e0       	ldi	r31, 0x02	; 2
 4b8:	ff 2e       	mov	r15, r31
 4ba:	f0 2d       	mov	r31, r0
 4bc:	ff 92       	push	r15
 4be:	ef 92       	push	r14
 4c0:	20 d1       	rcall	.+576    	; 0x702 <sprintf>
 4c2:	f7 01       	movw	r30, r14

				if(str[0] == submit[0]){
 4c4:	80 81       	ld	r24, Z
 4c6:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <submit>
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	89 17       	cp	r24, r25
 4d8:	09 f4       	brne	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4da:	44 c0       	rjmp	.+136    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 4dc:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <backspace>
					break;
				}
				if(str[0] == backspace[0] && i > 0){
 4e0:	82 13       	cpse	r24, r18
 4e2:	0a c0       	rjmp	.+20     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4e4:	10 16       	cp	r1, r16
 4e6:	11 06       	cpc	r1, r17
 4e8:	3c f4       	brge	.+14     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 4ea:	01 50       	subi	r16, 0x01	; 1
					i--;
 4ec:	11 09       	sbc	r17, r1
 4ee:	f8 01       	movw	r30, r16
					password[i] = '\0';
 4f0:	ee 54       	subi	r30, 0x4E	; 78
 4f2:	fd 4f       	sbci	r31, 0xFD	; 253
 4f4:	10 82       	st	Z, r1
 4f6:	0d c0       	rjmp	.+26     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 4f8:	04 30       	cpi	r16, 0x04	; 4
				}
				else if(i < 4 && str[0] != backspace[0] && str[0] != submit[0]){
 4fa:	11 05       	cpc	r17, r1
 4fc:	54 f4       	brge	.+20     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 4fe:	82 17       	cp	r24, r18
 500:	41 f0       	breq	.+16     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 502:	89 17       	cp	r24, r25
 504:	31 f0       	breq	.+12     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
 506:	f8 01       	movw	r30, r16
					password[i] = str[0];
 508:	ee 54       	subi	r30, 0x4E	; 78
 50a:	fd 4f       	sbci	r31, 0xFD	; 253
 50c:	80 83       	st	Z, r24
 50e:	0f 5f       	subi	r16, 0xFF	; 255
					i++;
 510:	1f 4f       	sbci	r17, 0xFF	; 255
 512:	80 e0       	ldi	r24, 0x00	; 0
				}
				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 514:	12 c0       	rjmp	.+36     	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
 516:	08 2e       	mov	r0, r24
				{
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 518:	00 0c       	add	r0, r0
 51a:	99 0b       	sbc	r25, r25
 51c:	fc 01       	movw	r30, r24
 51e:	e5 5d       	subi	r30, 0xD5	; 213
 520:	fd 4f       	sbci	r31, 0xFD	; 253
 522:	30 81       	ld	r19, Z
 524:	3e bd       	out	0x2e, r19	; 46
 526:	0d b4       	in	r0, 0x2d	; 45
					while(!(SPSR & (1 << SPIF))){;}
 528:	07 fe       	sbrs	r0, 7
 52a:	fd cf       	rjmp	.-6      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 52c:	3e b5       	in	r19, 0x2e	; 46
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 52e:	fc 01       	movw	r30, r24
 530:	e8 54       	subi	r30, 0x48	; 72
 532:	fd 4f       	sbci	r31, 0xFD	; 253
 534:	30 83       	st	Z, r19
 536:	81 e0       	ldi	r24, 0x01	; 1
				}
				else if(i < 4 && str[0] != backspace[0] && str[0] != submit[0]){
					password[i] = str[0];
					i++;
				}
				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 538:	82 0f       	add	r24, r18
 53a:	28 2f       	mov	r18, r24
 53c:	85 30       	cpi	r24, 0x05	; 5
 53e:	58 f3       	brcs	.-42     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
					while(!(SPSR & (1 << SPIF))){;}
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
				}
				//strcpy(spi_send_data, password);
				printf("\nPaswd: %s\n", password);
 540:	82 eb       	ldi	r24, 0xB2	; 178
 542:	92 e0       	ldi	r25, 0x02	; 2
 544:	9f 93       	push	r25
 546:	8f 93       	push	r24
 548:	84 e7       	ldi	r24, 0x74	; 116
 54a:	92 e0       	ldi	r25, 0x02	; 2
 54c:	9f 93       	push	r25
 54e:	8f 93       	push	r24
 550:	95 d0       	rcall	.+298    	; 0x67c <printf>
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <__data_end>
				SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
				while(!(SPSR & (1 << SPIF))){;}
				spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
			}
			//printf(spi_receive_data);
			while(passwordCorrect == false){
 55e:	88 23       	and	r24, r24
 560:	09 f4       	brne	.+2      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 562:	9d cf       	rjmp	.-198    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				//strcpy(spi_send_data, password);
				printf("\nPaswd: %s\n", password);

			}

			password[4] = '\0';
 564:	e2 eb       	ldi	r30, 0xB2	; 178
 566:	f2 e0       	ldi	r31, 0x02	; 2
 568:	14 82       	std	Z+4, r1	; 0x04
			printf("\nPassword entered: %s\n", password);
 56a:	ff 93       	push	r31
 56c:	ef 93       	push	r30
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	92 e0       	ldi	r25, 0x02	; 2
 572:	9f 93       	push	r25
 574:	8f 93       	push	r24
 576:	82 d0       	rcall	.+260    	; 0x67c <printf>
			//Wrong pass -> 444
			//Correct pass -> 333
			//Give pass -> 222


			if (strcmp(correct_password, password) != 0) {
 578:	62 eb       	ldi	r22, 0xB2	; 178
 57a:	72 e0       	ldi	r23, 0x02	; 2
 57c:	ce 01       	movw	r24, r28
 57e:	01 96       	adiw	r24, 0x01	; 1
 580:	6d d0       	rcall	.+218    	; 0x65c <strcmp>
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	89 2b       	or	r24, r25
				printf("Incorrect password.\n");
 58c:	51 f1       	breq	.+84     	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
 58e:	87 e9       	ldi	r24, 0x97	; 151
 590:	92 e0       	ldi	r25, 0x02	; 2
				strcpy(spi_send_data, inCorrect_code);
 592:	87 d0       	rcall	.+270    	; 0x6a2 <puts>
 594:	66 e2       	ldi	r22, 0x26	; 38
 596:	72 e0       	ldi	r23, 0x02	; 2
 598:	8b e2       	ldi	r24, 0x2B	; 43
 59a:	92 e0       	ldi	r25, 0x02	; 2
 59c:	68 d0       	rcall	.+208    	; 0x66e <strcpy>
				printf(spi_send_data);
 59e:	8b e2       	ldi	r24, 0x2B	; 43
 5a0:	92 e0       	ldi	r25, 0x02	; 2
 5a2:	9f 93       	push	r25
 5a4:	8f 93       	push	r24
 5a6:	6a d0       	rcall	.+212    	; 0x67c <printf>
 5a8:	0f 90       	pop	r0
				
				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 5aa:	0f 90       	pop	r0
 5ac:	80 e0       	ldi	r24, 0x00	; 0
 5ae:	12 c0       	rjmp	.+36     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5b0:	08 2e       	mov	r0, r24
				{
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 5b2:	00 0c       	add	r0, r0
 5b4:	99 0b       	sbc	r25, r25
 5b6:	fc 01       	movw	r30, r24
 5b8:	e5 5d       	subi	r30, 0xD5	; 213
 5ba:	fd 4f       	sbci	r31, 0xFD	; 253
 5bc:	30 81       	ld	r19, Z
 5be:	3e bd       	out	0x2e, r19	; 46
 5c0:	0d b4       	in	r0, 0x2d	; 45
					while(!(SPSR & (1 << SPIF))){;}
 5c2:	07 fe       	sbrs	r0, 7
 5c4:	fd cf       	rjmp	.-6      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
 5c6:	3e b5       	in	r19, 0x2e	; 46
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 5c8:	fc 01       	movw	r30, r24
 5ca:	e8 54       	subi	r30, 0x48	; 72
 5cc:	fd 4f       	sbci	r31, 0xFD	; 253
 5ce:	30 83       	st	Z, r19
			if (strcmp(correct_password, password) != 0) {
				printf("Incorrect password.\n");
				strcpy(spi_send_data, inCorrect_code);
				printf(spi_send_data);
				
				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	82 0f       	add	r24, r18
 5d4:	28 2f       	mov	r18, r24
 5d6:	85 30       	cpi	r24, 0x05	; 5
				{
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
					while(!(SPSR & (1 << SPIF))){;}
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
				}
				passwordCorrect = true;
 5d8:	58 f3       	brcs	.-42     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__data_end>
			}
			else {
				strcpy(spi_send_data, correct_code);
 5e0:	14 cf       	rjmp	.-472    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 5e2:	61 e2       	ldi	r22, 0x21	; 33
 5e4:	72 e0       	ldi	r23, 0x02	; 2
 5e6:	8b e2       	ldi	r24, 0x2B	; 43
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	41 d0       	rcall	.+130    	; 0x66e <strcpy>
				printf(spi_send_data);
 5ec:	8b e2       	ldi	r24, 0x2B	; 43
 5ee:	92 e0       	ldi	r25, 0x02	; 2
 5f0:	9f 93       	push	r25
 5f2:	8f 93       	push	r24
 5f4:	43 d0       	rcall	.+134    	; 0x67c <printf>
 5f6:	81 e0       	ldi	r24, 0x01	; 1
				passwordCorrect = true;
 5f8:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <__data_end>
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	04 cf       	rjmp	.-504    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

00000602 <uart_putchar>:
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
/******************************************************************************
******************************************************************************/
int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 602:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 606:	95 ff       	sbrs	r25, 5
 608:	fc cf       	rjmp	.-8      	; 0x602 <uart_putchar>
	UDR0 = c;
 60a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	return 0;
}
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	08 95       	ret

00000614 <uart_getchar>:
/******************************************************************************
******************************************************************************/
int uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
 614:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 618:	88 23       	and	r24, r24
 61a:	e4 f7       	brge	.-8      	; 0x614 <uart_getchar>
	return UDR0;
 61c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	08 95       	ret

00000624 <init_uart>:
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 624:	88 e1       	ldi	r24, 0x18	; 24
 626:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
 62a:	87 e6       	ldi	r24, 0x67	; 103
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 632:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	stdout = &mystdout;
 636:	ee ec       	ldi	r30, 0xCE	; 206
 638:	f2 e0       	ldi	r31, 0x02	; 2
 63a:	82 e4       	ldi	r24, 0x42	; 66
 63c:	92 e0       	ldi	r25, 0x02	; 2
 63e:	93 83       	std	Z+3, r25	; 0x03
 640:	82 83       	std	Z+2, r24	; 0x02
	stdin = &mystdin;
 642:	84 e3       	ldi	r24, 0x34	; 52
 644:	92 e0       	ldi	r25, 0x02	; 2
 646:	91 83       	std	Z+1, r25	; 0x01
 648:	80 83       	st	Z, r24
 64a:	08 95       	ret

0000064c <__tablejump2__>:
 64c:	ee 0f       	add	r30, r30
 64e:	ff 1f       	adc	r31, r31
 650:	88 1f       	adc	r24, r24
 652:	8b bf       	out	0x3b, r24	; 59
 654:	07 90       	elpm	r0, Z+
 656:	f6 91       	elpm	r31, Z
 658:	e0 2d       	mov	r30, r0
 65a:	19 94       	eijmp

0000065c <strcmp>:
 65c:	fb 01       	movw	r30, r22
 65e:	dc 01       	movw	r26, r24
 660:	8d 91       	ld	r24, X+
 662:	01 90       	ld	r0, Z+
 664:	80 19       	sub	r24, r0
 666:	01 10       	cpse	r0, r1
 668:	d9 f3       	breq	.-10     	; 0x660 <strcmp+0x4>
 66a:	99 0b       	sbc	r25, r25
 66c:	08 95       	ret

0000066e <strcpy>:
 66e:	fb 01       	movw	r30, r22
 670:	dc 01       	movw	r26, r24
 672:	01 90       	ld	r0, Z+
 674:	0d 92       	st	X+, r0
 676:	00 20       	and	r0, r0
 678:	e1 f7       	brne	.-8      	; 0x672 <strcpy+0x4>
 67a:	08 95       	ret

0000067c <printf>:
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	ae 01       	movw	r20, r28
 686:	4a 5f       	subi	r20, 0xFA	; 250
 688:	5f 4f       	sbci	r21, 0xFF	; 255
 68a:	fa 01       	movw	r30, r20
 68c:	61 91       	ld	r22, Z+
 68e:	71 91       	ld	r23, Z+
 690:	af 01       	movw	r20, r30
 692:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <__iob+0x2>
 696:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <__iob+0x3>
 69a:	61 d0       	rcall	.+194    	; 0x75e <vfprintf>
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <puts>:
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	e0 91 d0 02 	lds	r30, 0x02D0	; 0x8002d0 <__iob+0x2>
 6ae:	f0 91 d1 02 	lds	r31, 0x02D1	; 0x8002d1 <__iob+0x3>
 6b2:	23 81       	ldd	r18, Z+3	; 0x03
 6b4:	21 ff       	sbrs	r18, 1
 6b6:	1b c0       	rjmp	.+54     	; 0x6ee <puts+0x4c>
 6b8:	8c 01       	movw	r16, r24
 6ba:	d0 e0       	ldi	r29, 0x00	; 0
 6bc:	c0 e0       	ldi	r28, 0x00	; 0
 6be:	f8 01       	movw	r30, r16
 6c0:	81 91       	ld	r24, Z+
 6c2:	8f 01       	movw	r16, r30
 6c4:	60 91 d0 02 	lds	r22, 0x02D0	; 0x8002d0 <__iob+0x2>
 6c8:	70 91 d1 02 	lds	r23, 0x02D1	; 0x8002d1 <__iob+0x3>
 6cc:	db 01       	movw	r26, r22
 6ce:	18 96       	adiw	r26, 0x08	; 8
 6d0:	ed 91       	ld	r30, X+
 6d2:	fc 91       	ld	r31, X
 6d4:	19 97       	sbiw	r26, 0x09	; 9
 6d6:	88 23       	and	r24, r24
 6d8:	31 f0       	breq	.+12     	; 0x6e6 <puts+0x44>
 6da:	19 95       	eicall
 6dc:	89 2b       	or	r24, r25
 6de:	79 f3       	breq	.-34     	; 0x6be <puts+0x1c>
 6e0:	df ef       	ldi	r29, 0xFF	; 255
 6e2:	cf ef       	ldi	r28, 0xFF	; 255
 6e4:	ec cf       	rjmp	.-40     	; 0x6be <puts+0x1c>
 6e6:	8a e0       	ldi	r24, 0x0A	; 10
 6e8:	19 95       	eicall
 6ea:	89 2b       	or	r24, r25
 6ec:	19 f0       	breq	.+6      	; 0x6f4 <puts+0x52>
 6ee:	8f ef       	ldi	r24, 0xFF	; 255
 6f0:	9f ef       	ldi	r25, 0xFF	; 255
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <puts+0x56>
 6f4:	8d 2f       	mov	r24, r29
 6f6:	9c 2f       	mov	r25, r28
 6f8:	df 91       	pop	r29
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	08 95       	ret

00000702 <sprintf>:
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	2e 97       	sbiw	r28, 0x0e	; 14
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	0e 89       	ldd	r16, Y+22	; 0x16
 71c:	1f 89       	ldd	r17, Y+23	; 0x17
 71e:	86 e0       	ldi	r24, 0x06	; 6
 720:	8c 83       	std	Y+4, r24	; 0x04
 722:	1a 83       	std	Y+2, r17	; 0x02
 724:	09 83       	std	Y+1, r16	; 0x01
 726:	8f ef       	ldi	r24, 0xFF	; 255
 728:	9f e7       	ldi	r25, 0x7F	; 127
 72a:	9e 83       	std	Y+6, r25	; 0x06
 72c:	8d 83       	std	Y+5, r24	; 0x05
 72e:	ae 01       	movw	r20, r28
 730:	46 5e       	subi	r20, 0xE6	; 230
 732:	5f 4f       	sbci	r21, 0xFF	; 255
 734:	68 8d       	ldd	r22, Y+24	; 0x18
 736:	79 8d       	ldd	r23, Y+25	; 0x19
 738:	ce 01       	movw	r24, r28
 73a:	01 96       	adiw	r24, 0x01	; 1
 73c:	10 d0       	rcall	.+32     	; 0x75e <vfprintf>
 73e:	ef 81       	ldd	r30, Y+7	; 0x07
 740:	f8 85       	ldd	r31, Y+8	; 0x08
 742:	e0 0f       	add	r30, r16
 744:	f1 1f       	adc	r31, r17
 746:	10 82       	st	Z, r1
 748:	2e 96       	adiw	r28, 0x0e	; 14
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	08 95       	ret

0000075e <vfprintf>:
 75e:	2f 92       	push	r2
 760:	3f 92       	push	r3
 762:	4f 92       	push	r4
 764:	5f 92       	push	r5
 766:	6f 92       	push	r6
 768:	7f 92       	push	r7
 76a:	8f 92       	push	r8
 76c:	9f 92       	push	r9
 76e:	af 92       	push	r10
 770:	bf 92       	push	r11
 772:	cf 92       	push	r12
 774:	df 92       	push	r13
 776:	ef 92       	push	r14
 778:	ff 92       	push	r15
 77a:	0f 93       	push	r16
 77c:	1f 93       	push	r17
 77e:	cf 93       	push	r28
 780:	df 93       	push	r29
 782:	cd b7       	in	r28, 0x3d	; 61
 784:	de b7       	in	r29, 0x3e	; 62
 786:	2b 97       	sbiw	r28, 0x0b	; 11
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	f8 94       	cli
 78c:	de bf       	out	0x3e, r29	; 62
 78e:	0f be       	out	0x3f, r0	; 63
 790:	cd bf       	out	0x3d, r28	; 61
 792:	6c 01       	movw	r12, r24
 794:	7b 01       	movw	r14, r22
 796:	8a 01       	movw	r16, r20
 798:	fc 01       	movw	r30, r24
 79a:	17 82       	std	Z+7, r1	; 0x07
 79c:	16 82       	std	Z+6, r1	; 0x06
 79e:	83 81       	ldd	r24, Z+3	; 0x03
 7a0:	81 ff       	sbrs	r24, 1
 7a2:	bf c1       	rjmp	.+894    	; 0xb22 <vfprintf+0x3c4>
 7a4:	ce 01       	movw	r24, r28
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	3c 01       	movw	r6, r24
 7aa:	f6 01       	movw	r30, r12
 7ac:	93 81       	ldd	r25, Z+3	; 0x03
 7ae:	f7 01       	movw	r30, r14
 7b0:	93 fd       	sbrc	r25, 3
 7b2:	85 91       	lpm	r24, Z+
 7b4:	93 ff       	sbrs	r25, 3
 7b6:	81 91       	ld	r24, Z+
 7b8:	7f 01       	movw	r14, r30
 7ba:	88 23       	and	r24, r24
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <vfprintf+0x62>
 7be:	ad c1       	rjmp	.+858    	; 0xb1a <vfprintf+0x3bc>
 7c0:	85 32       	cpi	r24, 0x25	; 37
 7c2:	39 f4       	brne	.+14     	; 0x7d2 <vfprintf+0x74>
 7c4:	93 fd       	sbrc	r25, 3
 7c6:	85 91       	lpm	r24, Z+
 7c8:	93 ff       	sbrs	r25, 3
 7ca:	81 91       	ld	r24, Z+
 7cc:	7f 01       	movw	r14, r30
 7ce:	85 32       	cpi	r24, 0x25	; 37
 7d0:	21 f4       	brne	.+8      	; 0x7da <vfprintf+0x7c>
 7d2:	b6 01       	movw	r22, r12
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	d6 d1       	rcall	.+940    	; 0xb84 <fputc>
 7d8:	e8 cf       	rjmp	.-48     	; 0x7aa <vfprintf+0x4c>
 7da:	91 2c       	mov	r9, r1
 7dc:	21 2c       	mov	r2, r1
 7de:	31 2c       	mov	r3, r1
 7e0:	ff e1       	ldi	r31, 0x1F	; 31
 7e2:	f3 15       	cp	r31, r3
 7e4:	d8 f0       	brcs	.+54     	; 0x81c <vfprintf+0xbe>
 7e6:	8b 32       	cpi	r24, 0x2B	; 43
 7e8:	79 f0       	breq	.+30     	; 0x808 <vfprintf+0xaa>
 7ea:	38 f4       	brcc	.+14     	; 0x7fa <vfprintf+0x9c>
 7ec:	80 32       	cpi	r24, 0x20	; 32
 7ee:	79 f0       	breq	.+30     	; 0x80e <vfprintf+0xb0>
 7f0:	83 32       	cpi	r24, 0x23	; 35
 7f2:	a1 f4       	brne	.+40     	; 0x81c <vfprintf+0xbe>
 7f4:	23 2d       	mov	r18, r3
 7f6:	20 61       	ori	r18, 0x10	; 16
 7f8:	1d c0       	rjmp	.+58     	; 0x834 <vfprintf+0xd6>
 7fa:	8d 32       	cpi	r24, 0x2D	; 45
 7fc:	61 f0       	breq	.+24     	; 0x816 <vfprintf+0xb8>
 7fe:	80 33       	cpi	r24, 0x30	; 48
 800:	69 f4       	brne	.+26     	; 0x81c <vfprintf+0xbe>
 802:	23 2d       	mov	r18, r3
 804:	21 60       	ori	r18, 0x01	; 1
 806:	16 c0       	rjmp	.+44     	; 0x834 <vfprintf+0xd6>
 808:	83 2d       	mov	r24, r3
 80a:	82 60       	ori	r24, 0x02	; 2
 80c:	38 2e       	mov	r3, r24
 80e:	e3 2d       	mov	r30, r3
 810:	e4 60       	ori	r30, 0x04	; 4
 812:	3e 2e       	mov	r3, r30
 814:	2a c0       	rjmp	.+84     	; 0x86a <vfprintf+0x10c>
 816:	f3 2d       	mov	r31, r3
 818:	f8 60       	ori	r31, 0x08	; 8
 81a:	1d c0       	rjmp	.+58     	; 0x856 <vfprintf+0xf8>
 81c:	37 fc       	sbrc	r3, 7
 81e:	2d c0       	rjmp	.+90     	; 0x87a <vfprintf+0x11c>
 820:	20 ed       	ldi	r18, 0xD0	; 208
 822:	28 0f       	add	r18, r24
 824:	2a 30       	cpi	r18, 0x0A	; 10
 826:	40 f0       	brcs	.+16     	; 0x838 <vfprintf+0xda>
 828:	8e 32       	cpi	r24, 0x2E	; 46
 82a:	b9 f4       	brne	.+46     	; 0x85a <vfprintf+0xfc>
 82c:	36 fc       	sbrc	r3, 6
 82e:	75 c1       	rjmp	.+746    	; 0xb1a <vfprintf+0x3bc>
 830:	23 2d       	mov	r18, r3
 832:	20 64       	ori	r18, 0x40	; 64
 834:	32 2e       	mov	r3, r18
 836:	19 c0       	rjmp	.+50     	; 0x86a <vfprintf+0x10c>
 838:	36 fe       	sbrs	r3, 6
 83a:	06 c0       	rjmp	.+12     	; 0x848 <vfprintf+0xea>
 83c:	8a e0       	ldi	r24, 0x0A	; 10
 83e:	98 9e       	mul	r9, r24
 840:	20 0d       	add	r18, r0
 842:	11 24       	eor	r1, r1
 844:	92 2e       	mov	r9, r18
 846:	11 c0       	rjmp	.+34     	; 0x86a <vfprintf+0x10c>
 848:	ea e0       	ldi	r30, 0x0A	; 10
 84a:	2e 9e       	mul	r2, r30
 84c:	20 0d       	add	r18, r0
 84e:	11 24       	eor	r1, r1
 850:	22 2e       	mov	r2, r18
 852:	f3 2d       	mov	r31, r3
 854:	f0 62       	ori	r31, 0x20	; 32
 856:	3f 2e       	mov	r3, r31
 858:	08 c0       	rjmp	.+16     	; 0x86a <vfprintf+0x10c>
 85a:	8c 36       	cpi	r24, 0x6C	; 108
 85c:	21 f4       	brne	.+8      	; 0x866 <vfprintf+0x108>
 85e:	83 2d       	mov	r24, r3
 860:	80 68       	ori	r24, 0x80	; 128
 862:	38 2e       	mov	r3, r24
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0x10c>
 866:	88 36       	cpi	r24, 0x68	; 104
 868:	41 f4       	brne	.+16     	; 0x87a <vfprintf+0x11c>
 86a:	f7 01       	movw	r30, r14
 86c:	93 fd       	sbrc	r25, 3
 86e:	85 91       	lpm	r24, Z+
 870:	93 ff       	sbrs	r25, 3
 872:	81 91       	ld	r24, Z+
 874:	7f 01       	movw	r14, r30
 876:	81 11       	cpse	r24, r1
 878:	b3 cf       	rjmp	.-154    	; 0x7e0 <vfprintf+0x82>
 87a:	98 2f       	mov	r25, r24
 87c:	9f 7d       	andi	r25, 0xDF	; 223
 87e:	95 54       	subi	r25, 0x45	; 69
 880:	93 30       	cpi	r25, 0x03	; 3
 882:	28 f4       	brcc	.+10     	; 0x88e <vfprintf+0x130>
 884:	0c 5f       	subi	r16, 0xFC	; 252
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	9f e3       	ldi	r25, 0x3F	; 63
 88a:	99 83       	std	Y+1, r25	; 0x01
 88c:	0d c0       	rjmp	.+26     	; 0x8a8 <vfprintf+0x14a>
 88e:	83 36       	cpi	r24, 0x63	; 99
 890:	31 f0       	breq	.+12     	; 0x89e <vfprintf+0x140>
 892:	83 37       	cpi	r24, 0x73	; 115
 894:	71 f0       	breq	.+28     	; 0x8b2 <vfprintf+0x154>
 896:	83 35       	cpi	r24, 0x53	; 83
 898:	09 f0       	breq	.+2      	; 0x89c <vfprintf+0x13e>
 89a:	55 c0       	rjmp	.+170    	; 0x946 <vfprintf+0x1e8>
 89c:	20 c0       	rjmp	.+64     	; 0x8de <vfprintf+0x180>
 89e:	f8 01       	movw	r30, r16
 8a0:	80 81       	ld	r24, Z
 8a2:	89 83       	std	Y+1, r24	; 0x01
 8a4:	0e 5f       	subi	r16, 0xFE	; 254
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	88 24       	eor	r8, r8
 8aa:	83 94       	inc	r8
 8ac:	91 2c       	mov	r9, r1
 8ae:	53 01       	movw	r10, r6
 8b0:	12 c0       	rjmp	.+36     	; 0x8d6 <vfprintf+0x178>
 8b2:	28 01       	movw	r4, r16
 8b4:	f2 e0       	ldi	r31, 0x02	; 2
 8b6:	4f 0e       	add	r4, r31
 8b8:	51 1c       	adc	r5, r1
 8ba:	f8 01       	movw	r30, r16
 8bc:	a0 80       	ld	r10, Z
 8be:	b1 80       	ldd	r11, Z+1	; 0x01
 8c0:	36 fe       	sbrs	r3, 6
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <vfprintf+0x16c>
 8c4:	69 2d       	mov	r22, r9
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <vfprintf+0x170>
 8ca:	6f ef       	ldi	r22, 0xFF	; 255
 8cc:	7f ef       	ldi	r23, 0xFF	; 255
 8ce:	c5 01       	movw	r24, r10
 8d0:	4e d1       	rcall	.+668    	; 0xb6e <strnlen>
 8d2:	4c 01       	movw	r8, r24
 8d4:	82 01       	movw	r16, r4
 8d6:	f3 2d       	mov	r31, r3
 8d8:	ff 77       	andi	r31, 0x7F	; 127
 8da:	3f 2e       	mov	r3, r31
 8dc:	15 c0       	rjmp	.+42     	; 0x908 <vfprintf+0x1aa>
 8de:	28 01       	movw	r4, r16
 8e0:	22 e0       	ldi	r18, 0x02	; 2
 8e2:	42 0e       	add	r4, r18
 8e4:	51 1c       	adc	r5, r1
 8e6:	f8 01       	movw	r30, r16
 8e8:	a0 80       	ld	r10, Z
 8ea:	b1 80       	ldd	r11, Z+1	; 0x01
 8ec:	36 fe       	sbrs	r3, 6
 8ee:	03 c0       	rjmp	.+6      	; 0x8f6 <vfprintf+0x198>
 8f0:	69 2d       	mov	r22, r9
 8f2:	70 e0       	ldi	r23, 0x00	; 0
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <vfprintf+0x19c>
 8f6:	6f ef       	ldi	r22, 0xFF	; 255
 8f8:	7f ef       	ldi	r23, 0xFF	; 255
 8fa:	c5 01       	movw	r24, r10
 8fc:	2d d1       	rcall	.+602    	; 0xb58 <strnlen_P>
 8fe:	4c 01       	movw	r8, r24
 900:	f3 2d       	mov	r31, r3
 902:	f0 68       	ori	r31, 0x80	; 128
 904:	3f 2e       	mov	r3, r31
 906:	82 01       	movw	r16, r4
 908:	33 fc       	sbrc	r3, 3
 90a:	19 c0       	rjmp	.+50     	; 0x93e <vfprintf+0x1e0>
 90c:	82 2d       	mov	r24, r2
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	88 16       	cp	r8, r24
 912:	99 06       	cpc	r9, r25
 914:	a0 f4       	brcc	.+40     	; 0x93e <vfprintf+0x1e0>
 916:	b6 01       	movw	r22, r12
 918:	80 e2       	ldi	r24, 0x20	; 32
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	33 d1       	rcall	.+614    	; 0xb84 <fputc>
 91e:	2a 94       	dec	r2
 920:	f5 cf       	rjmp	.-22     	; 0x90c <vfprintf+0x1ae>
 922:	f5 01       	movw	r30, r10
 924:	37 fc       	sbrc	r3, 7
 926:	85 91       	lpm	r24, Z+
 928:	37 fe       	sbrs	r3, 7
 92a:	81 91       	ld	r24, Z+
 92c:	5f 01       	movw	r10, r30
 92e:	b6 01       	movw	r22, r12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	28 d1       	rcall	.+592    	; 0xb84 <fputc>
 934:	21 10       	cpse	r2, r1
 936:	2a 94       	dec	r2
 938:	21 e0       	ldi	r18, 0x01	; 1
 93a:	82 1a       	sub	r8, r18
 93c:	91 08       	sbc	r9, r1
 93e:	81 14       	cp	r8, r1
 940:	91 04       	cpc	r9, r1
 942:	79 f7       	brne	.-34     	; 0x922 <vfprintf+0x1c4>
 944:	e1 c0       	rjmp	.+450    	; 0xb08 <vfprintf+0x3aa>
 946:	84 36       	cpi	r24, 0x64	; 100
 948:	11 f0       	breq	.+4      	; 0x94e <vfprintf+0x1f0>
 94a:	89 36       	cpi	r24, 0x69	; 105
 94c:	39 f5       	brne	.+78     	; 0x99c <vfprintf+0x23e>
 94e:	f8 01       	movw	r30, r16
 950:	37 fe       	sbrs	r3, 7
 952:	07 c0       	rjmp	.+14     	; 0x962 <vfprintf+0x204>
 954:	60 81       	ld	r22, Z
 956:	71 81       	ldd	r23, Z+1	; 0x01
 958:	82 81       	ldd	r24, Z+2	; 0x02
 95a:	93 81       	ldd	r25, Z+3	; 0x03
 95c:	0c 5f       	subi	r16, 0xFC	; 252
 95e:	1f 4f       	sbci	r17, 0xFF	; 255
 960:	08 c0       	rjmp	.+16     	; 0x972 <vfprintf+0x214>
 962:	60 81       	ld	r22, Z
 964:	71 81       	ldd	r23, Z+1	; 0x01
 966:	07 2e       	mov	r0, r23
 968:	00 0c       	add	r0, r0
 96a:	88 0b       	sbc	r24, r24
 96c:	99 0b       	sbc	r25, r25
 96e:	0e 5f       	subi	r16, 0xFE	; 254
 970:	1f 4f       	sbci	r17, 0xFF	; 255
 972:	f3 2d       	mov	r31, r3
 974:	ff 76       	andi	r31, 0x6F	; 111
 976:	3f 2e       	mov	r3, r31
 978:	97 ff       	sbrs	r25, 7
 97a:	09 c0       	rjmp	.+18     	; 0x98e <vfprintf+0x230>
 97c:	90 95       	com	r25
 97e:	80 95       	com	r24
 980:	70 95       	com	r23
 982:	61 95       	neg	r22
 984:	7f 4f       	sbci	r23, 0xFF	; 255
 986:	8f 4f       	sbci	r24, 0xFF	; 255
 988:	9f 4f       	sbci	r25, 0xFF	; 255
 98a:	f0 68       	ori	r31, 0x80	; 128
 98c:	3f 2e       	mov	r3, r31
 98e:	2a e0       	ldi	r18, 0x0A	; 10
 990:	30 e0       	ldi	r19, 0x00	; 0
 992:	a3 01       	movw	r20, r6
 994:	33 d1       	rcall	.+614    	; 0xbfc <__ultoa_invert>
 996:	88 2e       	mov	r8, r24
 998:	86 18       	sub	r8, r6
 99a:	44 c0       	rjmp	.+136    	; 0xa24 <vfprintf+0x2c6>
 99c:	85 37       	cpi	r24, 0x75	; 117
 99e:	31 f4       	brne	.+12     	; 0x9ac <vfprintf+0x24e>
 9a0:	23 2d       	mov	r18, r3
 9a2:	2f 7e       	andi	r18, 0xEF	; 239
 9a4:	b2 2e       	mov	r11, r18
 9a6:	2a e0       	ldi	r18, 0x0A	; 10
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	25 c0       	rjmp	.+74     	; 0x9f6 <vfprintf+0x298>
 9ac:	93 2d       	mov	r25, r3
 9ae:	99 7f       	andi	r25, 0xF9	; 249
 9b0:	b9 2e       	mov	r11, r25
 9b2:	8f 36       	cpi	r24, 0x6F	; 111
 9b4:	c1 f0       	breq	.+48     	; 0x9e6 <vfprintf+0x288>
 9b6:	18 f4       	brcc	.+6      	; 0x9be <vfprintf+0x260>
 9b8:	88 35       	cpi	r24, 0x58	; 88
 9ba:	79 f0       	breq	.+30     	; 0x9da <vfprintf+0x27c>
 9bc:	ae c0       	rjmp	.+348    	; 0xb1a <vfprintf+0x3bc>
 9be:	80 37       	cpi	r24, 0x70	; 112
 9c0:	19 f0       	breq	.+6      	; 0x9c8 <vfprintf+0x26a>
 9c2:	88 37       	cpi	r24, 0x78	; 120
 9c4:	21 f0       	breq	.+8      	; 0x9ce <vfprintf+0x270>
 9c6:	a9 c0       	rjmp	.+338    	; 0xb1a <vfprintf+0x3bc>
 9c8:	e9 2f       	mov	r30, r25
 9ca:	e0 61       	ori	r30, 0x10	; 16
 9cc:	be 2e       	mov	r11, r30
 9ce:	b4 fe       	sbrs	r11, 4
 9d0:	0d c0       	rjmp	.+26     	; 0x9ec <vfprintf+0x28e>
 9d2:	fb 2d       	mov	r31, r11
 9d4:	f4 60       	ori	r31, 0x04	; 4
 9d6:	bf 2e       	mov	r11, r31
 9d8:	09 c0       	rjmp	.+18     	; 0x9ec <vfprintf+0x28e>
 9da:	34 fe       	sbrs	r3, 4
 9dc:	0a c0       	rjmp	.+20     	; 0x9f2 <vfprintf+0x294>
 9de:	29 2f       	mov	r18, r25
 9e0:	26 60       	ori	r18, 0x06	; 6
 9e2:	b2 2e       	mov	r11, r18
 9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <vfprintf+0x294>
 9e6:	28 e0       	ldi	r18, 0x08	; 8
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <vfprintf+0x298>
 9ec:	20 e1       	ldi	r18, 0x10	; 16
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <vfprintf+0x298>
 9f2:	20 e1       	ldi	r18, 0x10	; 16
 9f4:	32 e0       	ldi	r19, 0x02	; 2
 9f6:	f8 01       	movw	r30, r16
 9f8:	b7 fe       	sbrs	r11, 7
 9fa:	07 c0       	rjmp	.+14     	; 0xa0a <vfprintf+0x2ac>
 9fc:	60 81       	ld	r22, Z
 9fe:	71 81       	ldd	r23, Z+1	; 0x01
 a00:	82 81       	ldd	r24, Z+2	; 0x02
 a02:	93 81       	ldd	r25, Z+3	; 0x03
 a04:	0c 5f       	subi	r16, 0xFC	; 252
 a06:	1f 4f       	sbci	r17, 0xFF	; 255
 a08:	06 c0       	rjmp	.+12     	; 0xa16 <vfprintf+0x2b8>
 a0a:	60 81       	ld	r22, Z
 a0c:	71 81       	ldd	r23, Z+1	; 0x01
 a0e:	80 e0       	ldi	r24, 0x00	; 0
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	0e 5f       	subi	r16, 0xFE	; 254
 a14:	1f 4f       	sbci	r17, 0xFF	; 255
 a16:	a3 01       	movw	r20, r6
 a18:	f1 d0       	rcall	.+482    	; 0xbfc <__ultoa_invert>
 a1a:	88 2e       	mov	r8, r24
 a1c:	86 18       	sub	r8, r6
 a1e:	fb 2d       	mov	r31, r11
 a20:	ff 77       	andi	r31, 0x7F	; 127
 a22:	3f 2e       	mov	r3, r31
 a24:	36 fe       	sbrs	r3, 6
 a26:	0d c0       	rjmp	.+26     	; 0xa42 <vfprintf+0x2e4>
 a28:	23 2d       	mov	r18, r3
 a2a:	2e 7f       	andi	r18, 0xFE	; 254
 a2c:	a2 2e       	mov	r10, r18
 a2e:	89 14       	cp	r8, r9
 a30:	58 f4       	brcc	.+22     	; 0xa48 <vfprintf+0x2ea>
 a32:	34 fe       	sbrs	r3, 4
 a34:	0b c0       	rjmp	.+22     	; 0xa4c <vfprintf+0x2ee>
 a36:	32 fc       	sbrc	r3, 2
 a38:	09 c0       	rjmp	.+18     	; 0xa4c <vfprintf+0x2ee>
 a3a:	83 2d       	mov	r24, r3
 a3c:	8e 7e       	andi	r24, 0xEE	; 238
 a3e:	a8 2e       	mov	r10, r24
 a40:	05 c0       	rjmp	.+10     	; 0xa4c <vfprintf+0x2ee>
 a42:	b8 2c       	mov	r11, r8
 a44:	a3 2c       	mov	r10, r3
 a46:	03 c0       	rjmp	.+6      	; 0xa4e <vfprintf+0x2f0>
 a48:	b8 2c       	mov	r11, r8
 a4a:	01 c0       	rjmp	.+2      	; 0xa4e <vfprintf+0x2f0>
 a4c:	b9 2c       	mov	r11, r9
 a4e:	a4 fe       	sbrs	r10, 4
 a50:	0f c0       	rjmp	.+30     	; 0xa70 <vfprintf+0x312>
 a52:	fe 01       	movw	r30, r28
 a54:	e8 0d       	add	r30, r8
 a56:	f1 1d       	adc	r31, r1
 a58:	80 81       	ld	r24, Z
 a5a:	80 33       	cpi	r24, 0x30	; 48
 a5c:	21 f4       	brne	.+8      	; 0xa66 <vfprintf+0x308>
 a5e:	9a 2d       	mov	r25, r10
 a60:	99 7e       	andi	r25, 0xE9	; 233
 a62:	a9 2e       	mov	r10, r25
 a64:	09 c0       	rjmp	.+18     	; 0xa78 <vfprintf+0x31a>
 a66:	a2 fe       	sbrs	r10, 2
 a68:	06 c0       	rjmp	.+12     	; 0xa76 <vfprintf+0x318>
 a6a:	b3 94       	inc	r11
 a6c:	b3 94       	inc	r11
 a6e:	04 c0       	rjmp	.+8      	; 0xa78 <vfprintf+0x31a>
 a70:	8a 2d       	mov	r24, r10
 a72:	86 78       	andi	r24, 0x86	; 134
 a74:	09 f0       	breq	.+2      	; 0xa78 <vfprintf+0x31a>
 a76:	b3 94       	inc	r11
 a78:	a3 fc       	sbrc	r10, 3
 a7a:	10 c0       	rjmp	.+32     	; 0xa9c <vfprintf+0x33e>
 a7c:	a0 fe       	sbrs	r10, 0
 a7e:	06 c0       	rjmp	.+12     	; 0xa8c <vfprintf+0x32e>
 a80:	b2 14       	cp	r11, r2
 a82:	80 f4       	brcc	.+32     	; 0xaa4 <vfprintf+0x346>
 a84:	28 0c       	add	r2, r8
 a86:	92 2c       	mov	r9, r2
 a88:	9b 18       	sub	r9, r11
 a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <vfprintf+0x348>
 a8c:	b2 14       	cp	r11, r2
 a8e:	58 f4       	brcc	.+22     	; 0xaa6 <vfprintf+0x348>
 a90:	b6 01       	movw	r22, r12
 a92:	80 e2       	ldi	r24, 0x20	; 32
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	76 d0       	rcall	.+236    	; 0xb84 <fputc>
 a98:	b3 94       	inc	r11
 a9a:	f8 cf       	rjmp	.-16     	; 0xa8c <vfprintf+0x32e>
 a9c:	b2 14       	cp	r11, r2
 a9e:	18 f4       	brcc	.+6      	; 0xaa6 <vfprintf+0x348>
 aa0:	2b 18       	sub	r2, r11
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <vfprintf+0x34a>
 aa4:	98 2c       	mov	r9, r8
 aa6:	21 2c       	mov	r2, r1
 aa8:	a4 fe       	sbrs	r10, 4
 aaa:	0f c0       	rjmp	.+30     	; 0xaca <vfprintf+0x36c>
 aac:	b6 01       	movw	r22, r12
 aae:	80 e3       	ldi	r24, 0x30	; 48
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	68 d0       	rcall	.+208    	; 0xb84 <fputc>
 ab4:	a2 fe       	sbrs	r10, 2
 ab6:	16 c0       	rjmp	.+44     	; 0xae4 <vfprintf+0x386>
 ab8:	a1 fc       	sbrc	r10, 1
 aba:	03 c0       	rjmp	.+6      	; 0xac2 <vfprintf+0x364>
 abc:	88 e7       	ldi	r24, 0x78	; 120
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <vfprintf+0x368>
 ac2:	88 e5       	ldi	r24, 0x58	; 88
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	b6 01       	movw	r22, r12
 ac8:	0c c0       	rjmp	.+24     	; 0xae2 <vfprintf+0x384>
 aca:	8a 2d       	mov	r24, r10
 acc:	86 78       	andi	r24, 0x86	; 134
 ace:	51 f0       	breq	.+20     	; 0xae4 <vfprintf+0x386>
 ad0:	a1 fe       	sbrs	r10, 1
 ad2:	02 c0       	rjmp	.+4      	; 0xad8 <vfprintf+0x37a>
 ad4:	8b e2       	ldi	r24, 0x2B	; 43
 ad6:	01 c0       	rjmp	.+2      	; 0xada <vfprintf+0x37c>
 ad8:	80 e2       	ldi	r24, 0x20	; 32
 ada:	a7 fc       	sbrc	r10, 7
 adc:	8d e2       	ldi	r24, 0x2D	; 45
 ade:	b6 01       	movw	r22, r12
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	50 d0       	rcall	.+160    	; 0xb84 <fputc>
 ae4:	89 14       	cp	r8, r9
 ae6:	30 f4       	brcc	.+12     	; 0xaf4 <vfprintf+0x396>
 ae8:	b6 01       	movw	r22, r12
 aea:	80 e3       	ldi	r24, 0x30	; 48
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	4a d0       	rcall	.+148    	; 0xb84 <fputc>
 af0:	9a 94       	dec	r9
 af2:	f8 cf       	rjmp	.-16     	; 0xae4 <vfprintf+0x386>
 af4:	8a 94       	dec	r8
 af6:	f3 01       	movw	r30, r6
 af8:	e8 0d       	add	r30, r8
 afa:	f1 1d       	adc	r31, r1
 afc:	80 81       	ld	r24, Z
 afe:	b6 01       	movw	r22, r12
 b00:	90 e0       	ldi	r25, 0x00	; 0
 b02:	40 d0       	rcall	.+128    	; 0xb84 <fputc>
 b04:	81 10       	cpse	r8, r1
 b06:	f6 cf       	rjmp	.-20     	; 0xaf4 <vfprintf+0x396>
 b08:	22 20       	and	r2, r2
 b0a:	09 f4       	brne	.+2      	; 0xb0e <vfprintf+0x3b0>
 b0c:	4e ce       	rjmp	.-868    	; 0x7aa <vfprintf+0x4c>
 b0e:	b6 01       	movw	r22, r12
 b10:	80 e2       	ldi	r24, 0x20	; 32
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	37 d0       	rcall	.+110    	; 0xb84 <fputc>
 b16:	2a 94       	dec	r2
 b18:	f7 cf       	rjmp	.-18     	; 0xb08 <vfprintf+0x3aa>
 b1a:	f6 01       	movw	r30, r12
 b1c:	86 81       	ldd	r24, Z+6	; 0x06
 b1e:	97 81       	ldd	r25, Z+7	; 0x07
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <vfprintf+0x3c8>
 b22:	8f ef       	ldi	r24, 0xFF	; 255
 b24:	9f ef       	ldi	r25, 0xFF	; 255
 b26:	2b 96       	adiw	r28, 0x0b	; 11
 b28:	0f b6       	in	r0, 0x3f	; 63
 b2a:	f8 94       	cli
 b2c:	de bf       	out	0x3e, r29	; 62
 b2e:	0f be       	out	0x3f, r0	; 63
 b30:	cd bf       	out	0x3d, r28	; 61
 b32:	df 91       	pop	r29
 b34:	cf 91       	pop	r28
 b36:	1f 91       	pop	r17
 b38:	0f 91       	pop	r16
 b3a:	ff 90       	pop	r15
 b3c:	ef 90       	pop	r14
 b3e:	df 90       	pop	r13
 b40:	cf 90       	pop	r12
 b42:	bf 90       	pop	r11
 b44:	af 90       	pop	r10
 b46:	9f 90       	pop	r9
 b48:	8f 90       	pop	r8
 b4a:	7f 90       	pop	r7
 b4c:	6f 90       	pop	r6
 b4e:	5f 90       	pop	r5
 b50:	4f 90       	pop	r4
 b52:	3f 90       	pop	r3
 b54:	2f 90       	pop	r2
 b56:	08 95       	ret

00000b58 <strnlen_P>:
 b58:	fc 01       	movw	r30, r24
 b5a:	05 90       	lpm	r0, Z+
 b5c:	61 50       	subi	r22, 0x01	; 1
 b5e:	70 40       	sbci	r23, 0x00	; 0
 b60:	01 10       	cpse	r0, r1
 b62:	d8 f7       	brcc	.-10     	; 0xb5a <strnlen_P+0x2>
 b64:	80 95       	com	r24
 b66:	90 95       	com	r25
 b68:	8e 0f       	add	r24, r30
 b6a:	9f 1f       	adc	r25, r31
 b6c:	08 95       	ret

00000b6e <strnlen>:
 b6e:	fc 01       	movw	r30, r24
 b70:	61 50       	subi	r22, 0x01	; 1
 b72:	70 40       	sbci	r23, 0x00	; 0
 b74:	01 90       	ld	r0, Z+
 b76:	01 10       	cpse	r0, r1
 b78:	d8 f7       	brcc	.-10     	; 0xb70 <strnlen+0x2>
 b7a:	80 95       	com	r24
 b7c:	90 95       	com	r25
 b7e:	8e 0f       	add	r24, r30
 b80:	9f 1f       	adc	r25, r31
 b82:	08 95       	ret

00000b84 <fputc>:
 b84:	0f 93       	push	r16
 b86:	1f 93       	push	r17
 b88:	cf 93       	push	r28
 b8a:	df 93       	push	r29
 b8c:	fb 01       	movw	r30, r22
 b8e:	23 81       	ldd	r18, Z+3	; 0x03
 b90:	21 fd       	sbrc	r18, 1
 b92:	03 c0       	rjmp	.+6      	; 0xb9a <fputc+0x16>
 b94:	8f ef       	ldi	r24, 0xFF	; 255
 b96:	9f ef       	ldi	r25, 0xFF	; 255
 b98:	2c c0       	rjmp	.+88     	; 0xbf2 <fputc+0x6e>
 b9a:	22 ff       	sbrs	r18, 2
 b9c:	16 c0       	rjmp	.+44     	; 0xbca <fputc+0x46>
 b9e:	46 81       	ldd	r20, Z+6	; 0x06
 ba0:	57 81       	ldd	r21, Z+7	; 0x07
 ba2:	24 81       	ldd	r18, Z+4	; 0x04
 ba4:	35 81       	ldd	r19, Z+5	; 0x05
 ba6:	42 17       	cp	r20, r18
 ba8:	53 07       	cpc	r21, r19
 baa:	44 f4       	brge	.+16     	; 0xbbc <fputc+0x38>
 bac:	a0 81       	ld	r26, Z
 bae:	b1 81       	ldd	r27, Z+1	; 0x01
 bb0:	9d 01       	movw	r18, r26
 bb2:	2f 5f       	subi	r18, 0xFF	; 255
 bb4:	3f 4f       	sbci	r19, 0xFF	; 255
 bb6:	31 83       	std	Z+1, r19	; 0x01
 bb8:	20 83       	st	Z, r18
 bba:	8c 93       	st	X, r24
 bbc:	26 81       	ldd	r18, Z+6	; 0x06
 bbe:	37 81       	ldd	r19, Z+7	; 0x07
 bc0:	2f 5f       	subi	r18, 0xFF	; 255
 bc2:	3f 4f       	sbci	r19, 0xFF	; 255
 bc4:	37 83       	std	Z+7, r19	; 0x07
 bc6:	26 83       	std	Z+6, r18	; 0x06
 bc8:	14 c0       	rjmp	.+40     	; 0xbf2 <fputc+0x6e>
 bca:	8b 01       	movw	r16, r22
 bcc:	ec 01       	movw	r28, r24
 bce:	fb 01       	movw	r30, r22
 bd0:	00 84       	ldd	r0, Z+8	; 0x08
 bd2:	f1 85       	ldd	r31, Z+9	; 0x09
 bd4:	e0 2d       	mov	r30, r0
 bd6:	19 95       	eicall
 bd8:	89 2b       	or	r24, r25
 bda:	e1 f6       	brne	.-72     	; 0xb94 <fputc+0x10>
 bdc:	d8 01       	movw	r26, r16
 bde:	16 96       	adiw	r26, 0x06	; 6
 be0:	8d 91       	ld	r24, X+
 be2:	9c 91       	ld	r25, X
 be4:	17 97       	sbiw	r26, 0x07	; 7
 be6:	01 96       	adiw	r24, 0x01	; 1
 be8:	17 96       	adiw	r26, 0x07	; 7
 bea:	9c 93       	st	X, r25
 bec:	8e 93       	st	-X, r24
 bee:	16 97       	sbiw	r26, 0x06	; 6
 bf0:	ce 01       	movw	r24, r28
 bf2:	df 91       	pop	r29
 bf4:	cf 91       	pop	r28
 bf6:	1f 91       	pop	r17
 bf8:	0f 91       	pop	r16
 bfa:	08 95       	ret

00000bfc <__ultoa_invert>:
 bfc:	fa 01       	movw	r30, r20
 bfe:	aa 27       	eor	r26, r26
 c00:	28 30       	cpi	r18, 0x08	; 8
 c02:	51 f1       	breq	.+84     	; 0xc58 <__ultoa_invert+0x5c>
 c04:	20 31       	cpi	r18, 0x10	; 16
 c06:	81 f1       	breq	.+96     	; 0xc68 <__ultoa_invert+0x6c>
 c08:	e8 94       	clt
 c0a:	6f 93       	push	r22
 c0c:	6e 7f       	andi	r22, 0xFE	; 254
 c0e:	6e 5f       	subi	r22, 0xFE	; 254
 c10:	7f 4f       	sbci	r23, 0xFF	; 255
 c12:	8f 4f       	sbci	r24, 0xFF	; 255
 c14:	9f 4f       	sbci	r25, 0xFF	; 255
 c16:	af 4f       	sbci	r26, 0xFF	; 255
 c18:	b1 e0       	ldi	r27, 0x01	; 1
 c1a:	3e d0       	rcall	.+124    	; 0xc98 <__ultoa_invert+0x9c>
 c1c:	b4 e0       	ldi	r27, 0x04	; 4
 c1e:	3c d0       	rcall	.+120    	; 0xc98 <__ultoa_invert+0x9c>
 c20:	67 0f       	add	r22, r23
 c22:	78 1f       	adc	r23, r24
 c24:	89 1f       	adc	r24, r25
 c26:	9a 1f       	adc	r25, r26
 c28:	a1 1d       	adc	r26, r1
 c2a:	68 0f       	add	r22, r24
 c2c:	79 1f       	adc	r23, r25
 c2e:	8a 1f       	adc	r24, r26
 c30:	91 1d       	adc	r25, r1
 c32:	a1 1d       	adc	r26, r1
 c34:	6a 0f       	add	r22, r26
 c36:	71 1d       	adc	r23, r1
 c38:	81 1d       	adc	r24, r1
 c3a:	91 1d       	adc	r25, r1
 c3c:	a1 1d       	adc	r26, r1
 c3e:	20 d0       	rcall	.+64     	; 0xc80 <__ultoa_invert+0x84>
 c40:	09 f4       	brne	.+2      	; 0xc44 <__ultoa_invert+0x48>
 c42:	68 94       	set
 c44:	3f 91       	pop	r19
 c46:	2a e0       	ldi	r18, 0x0A	; 10
 c48:	26 9f       	mul	r18, r22
 c4a:	11 24       	eor	r1, r1
 c4c:	30 19       	sub	r19, r0
 c4e:	30 5d       	subi	r19, 0xD0	; 208
 c50:	31 93       	st	Z+, r19
 c52:	de f6       	brtc	.-74     	; 0xc0a <__ultoa_invert+0xe>
 c54:	cf 01       	movw	r24, r30
 c56:	08 95       	ret
 c58:	46 2f       	mov	r20, r22
 c5a:	47 70       	andi	r20, 0x07	; 7
 c5c:	40 5d       	subi	r20, 0xD0	; 208
 c5e:	41 93       	st	Z+, r20
 c60:	b3 e0       	ldi	r27, 0x03	; 3
 c62:	0f d0       	rcall	.+30     	; 0xc82 <__ultoa_invert+0x86>
 c64:	c9 f7       	brne	.-14     	; 0xc58 <__ultoa_invert+0x5c>
 c66:	f6 cf       	rjmp	.-20     	; 0xc54 <__ultoa_invert+0x58>
 c68:	46 2f       	mov	r20, r22
 c6a:	4f 70       	andi	r20, 0x0F	; 15
 c6c:	40 5d       	subi	r20, 0xD0	; 208
 c6e:	4a 33       	cpi	r20, 0x3A	; 58
 c70:	18 f0       	brcs	.+6      	; 0xc78 <__ultoa_invert+0x7c>
 c72:	49 5d       	subi	r20, 0xD9	; 217
 c74:	31 fd       	sbrc	r19, 1
 c76:	40 52       	subi	r20, 0x20	; 32
 c78:	41 93       	st	Z+, r20
 c7a:	02 d0       	rcall	.+4      	; 0xc80 <__ultoa_invert+0x84>
 c7c:	a9 f7       	brne	.-22     	; 0xc68 <__ultoa_invert+0x6c>
 c7e:	ea cf       	rjmp	.-44     	; 0xc54 <__ultoa_invert+0x58>
 c80:	b4 e0       	ldi	r27, 0x04	; 4
 c82:	a6 95       	lsr	r26
 c84:	97 95       	ror	r25
 c86:	87 95       	ror	r24
 c88:	77 95       	ror	r23
 c8a:	67 95       	ror	r22
 c8c:	ba 95       	dec	r27
 c8e:	c9 f7       	brne	.-14     	; 0xc82 <__ultoa_invert+0x86>
 c90:	00 97       	sbiw	r24, 0x00	; 0
 c92:	61 05       	cpc	r22, r1
 c94:	71 05       	cpc	r23, r1
 c96:	08 95       	ret
 c98:	9b 01       	movw	r18, r22
 c9a:	ac 01       	movw	r20, r24
 c9c:	0a 2e       	mov	r0, r26
 c9e:	06 94       	lsr	r0
 ca0:	57 95       	ror	r21
 ca2:	47 95       	ror	r20
 ca4:	37 95       	ror	r19
 ca6:	27 95       	ror	r18
 ca8:	ba 95       	dec	r27
 caa:	c9 f7       	brne	.-14     	; 0xc9e <__ultoa_invert+0xa2>
 cac:	62 0f       	add	r22, r18
 cae:	73 1f       	adc	r23, r19
 cb0:	84 1f       	adc	r24, r20
 cb2:	95 1f       	adc	r25, r21
 cb4:	a0 1d       	adc	r26, r0
 cb6:	08 95       	ret

00000cb8 <_exit>:
 cb8:	f8 94       	cli

00000cba <__stop_program>:
 cba:	ff cf       	rjmp	.-2      	; 0xcba <__stop_program>

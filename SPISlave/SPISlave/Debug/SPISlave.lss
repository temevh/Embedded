
SPISlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800200  00000cb0  00000d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  008002c2  008002c2  00000e06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001704  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fcd  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f9  00000000  00000000  00003625  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00004020  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000820  00000000  00000000  0000413c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ac  00000000  00000000  0000495c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004e08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
  62:	00 00       	nop
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	7f 01       	movw	r14, r30
  e6:	87 01       	movw	r16, r14
  e8:	87 01       	movw	r16, r14
  ea:	87 01       	movw	r16, r14
  ec:	81 01       	movw	r16, r2
  ee:	87 01       	movw	r16, r14
  f0:	83 01       	movw	r16, r6
  f2:	85 01       	movw	r16, r10
  f4:	87 01       	movw	r16, r14
  f6:	87 01       	movw	r16, r14
  f8:	87 01       	movw	r16, r14
  fa:	87 01       	movw	r16, r14
  fc:	87 01       	movw	r16, r14
  fe:	87 01       	movw	r16, r14
 100:	87 01       	movw	r16, r14
 102:	87 01       	movw	r16, r14
 104:	87 01       	movw	r16, r14
 106:	87 01       	movw	r16, r14
 108:	87 01       	movw	r16, r14
 10a:	87 01       	movw	r16, r14
 10c:	87 01       	movw	r16, r14
 10e:	87 01       	movw	r16, r14
 110:	87 01       	movw	r16, r14
 112:	87 01       	movw	r16, r14
 114:	87 01       	movw	r16, r14
 116:	87 01       	movw	r16, r14
 118:	87 01       	movw	r16, r14
 11a:	87 01       	movw	r16, r14
 11c:	87 01       	movw	r16, r14
 11e:	87 01       	movw	r16, r14
 120:	87 01       	movw	r16, r14
 122:	87 01       	movw	r16, r14
 124:	87 01       	movw	r16, r14
 126:	87 01       	movw	r16, r14
 128:	87 01       	movw	r16, r14
 12a:	87 01       	movw	r16, r14
 12c:	87 01       	movw	r16, r14
 12e:	87 01       	movw	r16, r14
 130:	87 01       	movw	r16, r14
 132:	87 01       	movw	r16, r14
 134:	87 01       	movw	r16, r14
 136:	87 01       	movw	r16, r14
 138:	87 01       	movw	r16, r14
 13a:	87 01       	movw	r16, r14
 13c:	87 01       	movw	r16, r14
 13e:	87 01       	movw	r16, r14
 140:	87 01       	movw	r16, r14
 142:	87 01       	movw	r16, r14
 144:	87 01       	movw	r16, r14
 146:	87 01       	movw	r16, r14
 148:	87 01       	movw	r16, r14
 14a:	87 01       	movw	r16, r14
 14c:	87 01       	movw	r16, r14
 14e:	87 01       	movw	r16, r14
 150:	87 01       	movw	r16, r14
 152:	87 01       	movw	r16, r14
 154:	87 01       	movw	r16, r14
 156:	87 01       	movw	r16, r14
 158:	87 01       	movw	r16, r14
 15a:	87 01       	movw	r16, r14
 15c:	87 01       	movw	r16, r14
 15e:	87 01       	movw	r16, r14
 160:	87 01       	movw	r16, r14
 162:	87 01       	movw	r16, r14
 164:	77 01       	movw	r14, r14
 166:	87 01       	movw	r16, r14
 168:	87 01       	movw	r16, r14
 16a:	87 01       	movw	r16, r14
 16c:	79 01       	movw	r14, r18
 16e:	87 01       	movw	r16, r14
 170:	7b 01       	movw	r14, r22
 172:	7d 01       	movw	r14, r26
 174:	87 01       	movw	r16, r14
 176:	87 01       	movw	r16, r14
 178:	87 01       	movw	r16, r14
 17a:	87 01       	movw	r16, r14
 17c:	87 01       	movw	r16, r14
 17e:	87 01       	movw	r16, r14
 180:	87 01       	movw	r16, r14
 182:	87 01       	movw	r16, r14
 184:	87 01       	movw	r16, r14
 186:	87 01       	movw	r16, r14
 188:	87 01       	movw	r16, r14
 18a:	87 01       	movw	r16, r14
 18c:	87 01       	movw	r16, r14
 18e:	87 01       	movw	r16, r14
 190:	87 01       	movw	r16, r14
 192:	87 01       	movw	r16, r14
 194:	87 01       	movw	r16, r14
 196:	87 01       	movw	r16, r14
 198:	87 01       	movw	r16, r14
 19a:	87 01       	movw	r16, r14
 19c:	87 01       	movw	r16, r14
 19e:	87 01       	movw	r16, r14
 1a0:	87 01       	movw	r16, r14
 1a2:	87 01       	movw	r16, r14
 1a4:	6f 01       	movw	r12, r30
 1a6:	87 01       	movw	r16, r14
 1a8:	87 01       	movw	r16, r14
 1aa:	87 01       	movw	r16, r14
 1ac:	71 01       	movw	r14, r2
 1ae:	87 01       	movw	r16, r14
 1b0:	73 01       	movw	r14, r6
 1b2:	75 01       	movw	r14, r10
 1b4:	87 01       	movw	r16, r14
 1b6:	87 01       	movw	r16, r14
 1b8:	87 01       	movw	r16, r14
 1ba:	87 01       	movw	r16, r14
 1bc:	87 01       	movw	r16, r14
 1be:	87 01       	movw	r16, r14
 1c0:	87 01       	movw	r16, r14
 1c2:	87 01       	movw	r16, r14
 1c4:	69 01       	movw	r12, r18
 1c6:	87 01       	movw	r16, r14
 1c8:	87 01       	movw	r16, r14
 1ca:	87 01       	movw	r16, r14
 1cc:	89 01       	movw	r16, r18
 1ce:	87 01       	movw	r16, r14
 1d0:	6b 01       	movw	r12, r22
 1d2:	6d 01       	movw	r12, r26

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	e0 eb       	ldi	r30, 0xB0	; 176
 1ec:	fc e0       	ldi	r31, 0x0C	; 12
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	a2 3c       	cpi	r26, 0xC2	; 194
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	22 e0       	ldi	r18, 0x02	; 2
 200:	a2 ec       	ldi	r26, 0xC2	; 194
 202:	b2 e0       	ldi	r27, 0x02	; 2
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	a6 3e       	cpi	r26, 0xE6	; 230
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	b9 d0       	rcall	.+370    	; 0x382 <main>
 210:	4d c5       	rjmp	.+2714   	; 0xcac <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 214:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
 216:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 218:	10 c0       	rjmp	.+32     	; 0x23a <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
 21a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	e9 ef       	ldi	r30, 0xF9	; 249
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <keypad_ScanKey+0xe>
 226:	00 c0       	rjmp	.+0      	; 0x228 <keypad_ScanKey+0x14>
 228:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
 22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 22e:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
 230:	8f 30       	cpi	r24, 0x0F	; 15
 232:	29 f4       	brne	.+10     	; 0x23e <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
 234:	99 0f       	add	r25, r25
 236:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	24 30       	cpi	r18, 0x04	; 4
 23c:	70 f3       	brcs	.-36     	; 0x21a <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
 23e:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
 240:	89 0f       	add	r24, r25
 242:	08 95       	ret

00000244 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
 244:	80 ef       	ldi	r24, 0xF0	; 240
 246:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 24a:	08 95       	ret

0000024c <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 24c:	8f e0       	ldi	r24, 0x0F	; 15
 24e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
 252:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 256:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
 258:	8f 30       	cpi	r24, 0x0F	; 15
 25a:	c1 f7       	brne	.-16     	; 0x24c <KEYPAD_WaitForKeyRelease>
 25c:	89 ef       	ldi	r24, 0xF9	; 249
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <KEYPAD_WaitForKeyRelease+0x14>
 264:	00 c0       	rjmp	.+0      	; 0x266 <KEYPAD_WaitForKeyRelease+0x1a>
 266:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
 26e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 272:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
 274:	8f 30       	cpi	r24, 0x0F	; 15
 276:	51 f7       	brne	.-44     	; 0x24c <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
 278:	08 95       	ret

0000027a <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
 280:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 284:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
 286:	8f 30       	cpi	r24, 0x0F	; 15
 288:	c1 f3       	breq	.-16     	; 0x27a <KEYPAD_WaitForKeyPress>
 28a:	89 ef       	ldi	r24, 0xF9	; 249
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <KEYPAD_WaitForKeyPress+0x14>
 292:	00 c0       	rjmp	.+0      	; 0x294 <KEYPAD_WaitForKeyPress+0x1a>
 294:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
 29c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 2a0:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
 2a2:	8f 30       	cpi	r24, 0x0F	; 15
 2a4:	51 f3       	breq	.-44     	; 0x27a <KEYPAD_WaitForKeyPress>
}
 2a6:	08 95       	ret

000002a8 <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
 2a8:	d1 df       	rcall	.-94     	; 0x24c <KEYPAD_WaitForKeyRelease>
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <KEYPAD_GetKey+0x6>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
 2b4:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
 2b6:	e1 df       	rcall	.-62     	; 0x27a <KEYPAD_WaitForKeyPress>
 2b8:	ad df       	rcall	.-166    	; 0x214 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	fc 01       	movw	r30, r24
 2be:	e7 57       	subi	r30, 0x77	; 119
 2c0:	f1 09       	sbc	r31, r1
 2c2:	e8 37       	cpi	r30, 0x78	; 120
 2c4:	f1 05       	cpc	r31, r1
 2c6:	18 f5       	brcc	.+70     	; 0x30e <KEYPAD_GetKey+0x66>
 2c8:	88 27       	eor	r24, r24
 2ca:	ee 58       	subi	r30, 0x8E	; 142
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	b7 c1       	rjmp	.+878    	; 0x640 <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
 2d2:	8a e2       	ldi	r24, 0x2A	; 42
 2d4:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
 2d6:	84 e3       	ldi	r24, 0x34	; 52
 2d8:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
 2da:	81 e3       	ldi	r24, 0x31	; 49
 2dc:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
 2e2:	88 e3       	ldi	r24, 0x38	; 56
 2e4:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
 2e6:	85 e3       	ldi	r24, 0x35	; 53
 2e8:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
 2ea:	82 e3       	ldi	r24, 0x32	; 50
 2ec:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
 2ee:	83 e2       	ldi	r24, 0x23	; 35
 2f0:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
 2f2:	89 e3       	ldi	r24, 0x39	; 57
 2f4:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
 2f6:	86 e3       	ldi	r24, 0x36	; 54
 2f8:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
 2fe:	84 e4       	ldi	r24, 0x44	; 68
 300:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
 302:	83 e4       	ldi	r24, 0x43	; 67
 304:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
 306:	82 e4       	ldi	r24, 0x42	; 66
 308:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
 30e:	8a e7       	ldi	r24, 0x7A	; 122
 310:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
 312:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
 314:	08 95       	ret

00000316 <USART_init>:


static void USART_init(uint16_t ubrr) // unsigned int
{
    /* Set baud rate in the USART Baud Rate Registers (UBRR) */
    UBRR0H = (unsigned char) (ubrr >> 8);
 316:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    UBRR0L = (unsigned char) ubrr;
 31a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    
    /* Enable receiver and transmitter on RX0 and TX0 */
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //NOTE: the ATmega328p has 1 UART: 0
 31e:	e1 ec       	ldi	r30, 0xC1	; 193
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	88 61       	ori	r24, 0x18	; 24
 326:	80 83       	st	Z, r24
    
    /* Set frame format: 8 bit data, 2 stop bit */
    UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
 328:	e2 ec       	ldi	r30, 0xC2	; 194
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	8e 60       	ori	r24, 0x0E	; 14
 330:	80 83       	st	Z, r24
 332:	08 95       	ret

00000334 <USART_Transmit>:
    
}
static void USART_Transmit(unsigned char data, FILE *stream)
{
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0)))
 334:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 338:	95 ff       	sbrs	r25, 5
 33a:	fc cf       	rjmp	.-8      	; 0x334 <USART_Transmit>
    {
        ;
    }
    
    /* Put the data into a buffer, then send/transmit the data */
    UDR0 = data;
 33c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 340:	08 95       	ret

00000342 <USART_Receive>:
}
static char USART_Receive(FILE *stream)
{
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0)))
 342:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 346:	85 ff       	sbrs	r24, 5
 348:	fc cf       	rjmp	.-8      	; 0x342 <USART_Receive>
    {
        ;
    }
    
    /* Get the received data from the buffer */
    return UDR0;
 34a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 34e:	08 95       	ret

00000350 <change_password>:


void init_uart(void);

void change_password(char changed_password[], size_t size){
 350:	ac 01       	movw	r20, r24
	// Write data to eeprom
	for (uint16_t address_index = 0; address_index < size; address_index++){
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	11 c0       	rjmp	.+34     	; 0x37a <change_password+0x2a>
		while(EECR & (1 << 1)){/* wait for the previous write operation to end */}
 358:	f9 99       	sbic	0x1f, 1	; 31
 35a:	fe cf       	rjmp	.-4      	; 0x358 <change_password+0x8>
		
		EEAR = address_index;
 35c:	32 bd       	out	0x22, r19	; 34
 35e:	21 bd       	out	0x21, r18	; 33
		EEDR = changed_password[address_index];
 360:	fa 01       	movw	r30, r20
 362:	e2 0f       	add	r30, r18
 364:	f3 1f       	adc	r31, r19
 366:	90 81       	ld	r25, Z
 368:	90 bd       	out	0x20, r25	; 32
		EECR |= (1 << 2); // master programming enable
 36a:	9f b3       	in	r25, 0x1f	; 31
 36c:	94 60       	ori	r25, 0x04	; 4
 36e:	9f bb       	out	0x1f, r25	; 31
		EECR |= (1 << 1); // EEPROM programming enable
 370:	9f b3       	in	r25, 0x1f	; 31
 372:	92 60       	ori	r25, 0x02	; 2
 374:	9f bb       	out	0x1f, r25	; 31

void init_uart(void);

void change_password(char changed_password[], size_t size){
	// Write data to eeprom
	for (uint16_t address_index = 0; address_index < size; address_index++){
 376:	2f 5f       	subi	r18, 0xFF	; 255
 378:	3f 4f       	sbci	r19, 0xFF	; 255
 37a:	26 17       	cp	r18, r22
 37c:	37 07       	cpc	r19, r23
 37e:	60 f3       	brcs	.-40     	; 0x358 <change_password+0x8>
		EEAR = address_index;
		EEDR = changed_password[address_index];
		EECR |= (1 << 2); // master programming enable
		EECR |= (1 << 1); // EEPROM programming enable
	}
}
 380:	08 95       	ret

00000382 <main>:
// Setup the stream functions for UART
FILE uart_output = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_Receive, _FDEV_SETUP_READ);

int main(void)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	a5 97       	sbiw	r28, 0x25	; 37
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	f8 94       	cli
 390:	de bf       	out	0x3e, r29	; 62
 392:	0f be       	out	0x3f, r0	; 63
 394:	cd bf       	out	0x3d, r28	; 61
	init_uart();
 396:	40 d1       	rcall	.+640    	; 0x618 <init_uart>
	KEYPAD_Init();
 398:	55 df       	rcall	.-342    	; 0x244 <KEYPAD_Init>
 39a:	88 e0       	ldi	r24, 0x08	; 8
	//sei();
	
    /* set MISO as output, pin 12 (PB4)*/
    DDRB  = (1 << PB3);
 39c:	84 b9       	out	0x04, r24	; 4
 39e:	80 e4       	ldi	r24, 0x40	; 64
    /* set SPI enable */
    SPCR  = (1 << 6);
 3a0:	8c bd       	out	0x2c, r24	; 44
 3a2:	8a b1       	in	r24, 0x0a	; 10
	
	// Set PD7 as input
	DDRD &= ~(1 << PIR_SENSOR);
 3a4:	8f 77       	andi	r24, 0x7F	; 127
 3a6:	8a b9       	out	0x0a, r24	; 10
 3a8:	87 e6       	ldi	r24, 0x67	; 103
	
    // initialize the UART with 9600 BAUD
    USART_init(MYUBRR);
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	b4 df       	rcall	.-152    	; 0x316 <USART_init>
 3ae:	e0 ee       	ldi	r30, 0xE0	; 224
        
    // redirect the stdin and stdout to UART functions
    stdout = &uart_output;
 3b0:	f2 e0       	ldi	r31, 0x02	; 2
 3b2:	8e e0       	ldi	r24, 0x0E	; 14
 3b4:	92 e0       	ldi	r25, 0x02	; 2
 3b6:	93 83       	std	Z+3, r25	; 0x03
 3b8:	82 83       	std	Z+2, r24	; 0x02
 3ba:	80 e0       	ldi	r24, 0x00	; 0
    stdin = &uart_input;
 3bc:	92 e0       	ldi	r25, 0x02	; 2
 3be:	91 83       	std	Z+1, r25	; 0x01
 3c0:	80 83       	st	Z, r24
 3c2:	85 e0       	ldi	r24, 0x05	; 5
	/* UNO has 1 kB (1023 bytes) of EEPROM memory and MEGA 2560 has 4 kB (4096 B) */
	uint16_t memory_address_max = 32;
	char correct_password[32]; // data read from eeprom
	
	//changing the password can be done here
	char changed_password[] = "6651";
 3c4:	ed eb       	ldi	r30, 0xBD	; 189
 3c6:	f2 e0       	ldi	r31, 0x02	; 2
 3c8:	de 01       	movw	r26, r28
 3ca:	91 96       	adiw	r26, 0x21	; 33
 3cc:	01 90       	ld	r0, Z+
 3ce:	0d 92       	st	X+, r0
 3d0:	8a 95       	dec	r24
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0x4a>
 3d4:	65 e0       	ldi	r22, 0x05	; 5
	change_password(changed_password, sizeof(changed_password));
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	ce 01       	movw	r24, r28
 3da:	81 96       	adiw	r24, 0x21	; 33
 3dc:	b9 df       	rcall	.-142    	; 0x350 <change_password>
 3de:	80 e0       	ldi	r24, 0x00	; 0
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	10 c0       	rjmp	.+32     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3e4:	f9 99       	sbic	0x1f, 1	; 31
		while(EECR & (1 << 1)){/*wait for previous write operation to end*/}
 3e6:	fe cf       	rjmp	.-4      	; 0x3e4 <main+0x62>
 3e8:	92 bd       	out	0x22, r25	; 34
		EEAR = address_index;
 3ea:	81 bd       	out	0x21, r24	; 33
 3ec:	2f b3       	in	r18, 0x1f	; 31
		EECR |=0x01; //enable EEPROM read
 3ee:	21 60       	ori	r18, 0x01	; 1
 3f0:	2f bb       	out	0x1f, r18	; 31
 3f2:	20 b5       	in	r18, 0x20	; 32
		correct_password[address_index] = EEDR;
 3f4:	e1 e0       	ldi	r30, 0x01	; 1
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	ec 0f       	add	r30, r28
 3fa:	fd 1f       	adc	r31, r29
 3fc:	e8 0f       	add	r30, r24
 3fe:	f9 1f       	adc	r31, r25
 400:	20 83       	st	Z, r18
 402:	01 96       	adiw	r24, 0x01	; 1
	//changing the password can be done here
	char changed_password[] = "6651";
	change_password(changed_password, sizeof(changed_password));
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 404:	80 32       	cpi	r24, 0x20	; 32
 406:	91 05       	cpc	r25, r1
 408:	68 f3       	brcs	.-38     	; 0x3e4 <main+0x62>
 40a:	4f 9b       	sbis	0x09, 7	; 9
    /* send message to master and receive message from master */
    while (1) 
    {
		int i = 0;
		
		if (PIND & (1 << PIR_SENSOR)) {
 40c:	12 c0       	rjmp	.+36     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 40e:	81 e0       	ldi	r24, 0x01	; 1
			movementDetected = true;
 410:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <movementDetected>
			printf("DETECTED MOVEMENT, GIVE PASSWORD\n");
 414:	80 e5       	ldi	r24, 0x50	; 80
 416:	92 e0       	ldi	r25, 0x02	; 2
 418:	3e d1       	rcall	.+636    	; 0x696 <puts>
			strcpy(spi_send_data, givePass_code);  // Set the spi_send_data to 222
 41a:	6c e1       	ldi	r22, 0x1C	; 28
 41c:	72 e0       	ldi	r23, 0x02	; 2
 41e:	8b e2       	ldi	r24, 0x2B	; 43
 420:	92 e0       	ldi	r25, 0x02	; 2
 422:	1f d1       	rcall	.+574    	; 0x662 <strcpy>
			printf(spi_send_data);
 424:	8b e2       	ldi	r24, 0x2B	; 43
 426:	92 e0       	ldi	r25, 0x02	; 2
 428:	9f 93       	push	r25
 42a:	8f 93       	push	r24
 42c:	21 d1       	rcall	.+578    	; 0x670 <printf>
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	80 e0       	ldi	r24, 0x00	; 0
	//changing the password can be done here
	char changed_password[] = "6651";
	change_password(changed_password, sizeof(changed_password));
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 434:	12 c0       	rjmp	.+36     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
 436:	08 2e       	mov	r0, r24
			
		}
		
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
        {
            SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 438:	00 0c       	add	r0, r0
 43a:	99 0b       	sbc	r25, r25
 43c:	fc 01       	movw	r30, r24
 43e:	e5 5d       	subi	r30, 0xD5	; 213
 440:	fd 4f       	sbci	r31, 0xFD	; 253
 442:	30 81       	ld	r19, Z
 444:	3e bd       	out	0x2e, r19	; 46
 446:	0d b4       	in	r0, 0x2d	; 45
            while(!(SPSR & (1 << SPIF))){;}
 448:	07 fe       	sbrs	r0, 7
 44a:	fd cf       	rjmp	.-6      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44c:	3e b5       	in	r19, 0x2e	; 46
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 44e:	fc 01       	movw	r30, r24
 450:	e6 53       	subi	r30, 0x36	; 54
 452:	fd 4f       	sbci	r31, 0xFD	; 253
 454:	30 83       	st	Z, r19
 456:	81 e0       	ldi	r24, 0x01	; 1
			strcpy(spi_send_data, givePass_code);  // Set the spi_send_data to 222
			printf(spi_send_data);
			
		}
		
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 458:	82 0f       	add	r24, r18
 45a:	28 2f       	mov	r18, r24
 45c:	85 30       	cpi	r24, 0x05	; 5
 45e:	58 f3       	brcs	.-42     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 460:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <movementDetected>
            while(!(SPSR & (1 << SPIF))){;}
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
        }
		
		
        if(movementDetected == true){
 464:	88 23       	and	r24, r24
 466:	89 f2       	breq	.-94     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 468:	13 c0       	rjmp	.+38     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 46a:	08 2e       	mov	r0, r24
			
			for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
			{
				SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 46c:	00 0c       	add	r0, r0
 46e:	99 0b       	sbc	r25, r25
 470:	fc 01       	movw	r30, r24
 472:	e5 5d       	subi	r30, 0xD5	; 213
 474:	fd 4f       	sbci	r31, 0xFD	; 253
 476:	30 81       	ld	r19, Z
 478:	3e bd       	out	0x2e, r19	; 46
 47a:	0d b4       	in	r0, 0x2d	; 45
				while(!(SPSR & (1 << SPIF))){;}
 47c:	07 fe       	sbrs	r0, 7
 47e:	fd cf       	rjmp	.-6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 480:	3e b5       	in	r19, 0x2e	; 46
				spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 482:	fc 01       	movw	r30, r24
 484:	e6 53       	subi	r30, 0x36	; 54
 486:	fd 4f       	sbci	r31, 0xFD	; 253
 488:	30 83       	st	Z, r19
 48a:	81 e0       	ldi	r24, 0x01	; 1
        }
		
		
        if(movementDetected == true){
			
			for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 48c:	82 0f       	add	r24, r18
 48e:	01 c0       	rjmp	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	28 2f       	mov	r18, r24
 494:	85 30       	cpi	r24, 0x05	; 5
 496:	48 f3       	brcs	.-46     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 498:	e1 2c       	mov	r14, r1
 49a:	f1 2c       	mov	r15, r1
 49c:	45 c0       	rjmp	.+138    	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
				SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
				while(!(SPSR & (1 << SPIF))){;}
				spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
			}
			while(passwordCorrect == false){
				Keypress = KEYPAD_GetKey();
 49e:	04 df       	rcall	.-504    	; 0x2a8 <KEYPAD_GetKey>
 4a0:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <Keypress>
 4a4:	1f 92       	push	r1
				//turns uint_8 to char
				sprintf(str, "%c", Keypress);
 4a6:	8f 93       	push	r24
 4a8:	81 e7       	ldi	r24, 0x71	; 113
 4aa:	92 e0       	ldi	r25, 0x02	; 2
 4ac:	9f 93       	push	r25
 4ae:	8f 93       	push	r24
 4b0:	0e ed       	ldi	r16, 0xDE	; 222
 4b2:	12 e0       	ldi	r17, 0x02	; 2
 4b4:	1f 93       	push	r17
 4b6:	0f 93       	push	r16
 4b8:	1e d1       	rcall	.+572    	; 0x6f6 <sprintf>
 4ba:	f8 01       	movw	r30, r16

				if(str[0] == submit[0]){
 4bc:	80 81       	ld	r24, Z
 4be:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <submit>
 4c2:	0f 90       	pop	r0
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	0f 90       	pop	r0
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	89 17       	cp	r24, r25
 4d0:	81 f1       	breq	.+96     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 4d2:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <backspace>
					break;
				}
				if(str[0] == backspace[0] && i > 0){
 4d6:	82 13       	cpse	r24, r18
 4d8:	0b c0       	rjmp	.+22     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4da:	1e 14       	cp	r1, r14
 4dc:	1f 04       	cpc	r1, r15
 4de:	44 f4       	brge	.+16     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4e0:	f1 e0       	ldi	r31, 0x01	; 1
					i--;
 4e2:	ef 1a       	sub	r14, r31
 4e4:	f1 08       	sbc	r15, r1
 4e6:	f7 01       	movw	r30, r14
					password[i] = '\0';
 4e8:	ec 53       	subi	r30, 0x3C	; 60
 4ea:	fd 4f       	sbci	r31, 0xFD	; 253
 4ec:	10 82       	st	Z, r1
 4ee:	0f c0       	rjmp	.+30     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 4f0:	34 e0       	ldi	r19, 0x04	; 4
				}
				else if(i < 4 && str[0] != backspace[0] && str[0] != submit[0]){
 4f2:	e3 16       	cp	r14, r19
 4f4:	f1 04       	cpc	r15, r1
 4f6:	5c f4       	brge	.+22     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 4f8:	82 17       	cp	r24, r18
 4fa:	49 f0       	breq	.+18     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 4fc:	89 17       	cp	r24, r25
 4fe:	39 f0       	breq	.+14     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 500:	f7 01       	movw	r30, r14
					password[i] = str[0];
 502:	ec 53       	subi	r30, 0x3C	; 60
 504:	fd 4f       	sbci	r31, 0xFD	; 253
 506:	80 83       	st	Z, r24
 508:	8f ef       	ldi	r24, 0xFF	; 255
					i++;
 50a:	e8 1a       	sub	r14, r24
 50c:	f8 0a       	sbc	r15, r24
				}
				printf("\nPaswd: %s\n", password);
 50e:	84 ec       	ldi	r24, 0xC4	; 196
 510:	92 e0       	ldi	r25, 0x02	; 2
 512:	9f 93       	push	r25
 514:	8f 93       	push	r24
 516:	84 e7       	ldi	r24, 0x74	; 116
 518:	92 e0       	ldi	r25, 0x02	; 2
 51a:	9f 93       	push	r25
 51c:	8f 93       	push	r24
 51e:	a8 d0       	rcall	.+336    	; 0x670 <printf>
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end>
			{
				SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
				while(!(SPSR & (1 << SPIF))){;}
				spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
			}
			while(passwordCorrect == false){
 52c:	88 23       	and	r24, r24
 52e:	09 f4       	brne	.+2      	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
 530:	b6 cf       	rjmp	.-148    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
				}
				printf("\nPaswd: %s\n", password);

			}

			password[4] = '\0';
 532:	e4 ec       	ldi	r30, 0xC4	; 196
 534:	f2 e0       	ldi	r31, 0x02	; 2
 536:	14 82       	std	Z+4, r1	; 0x04
			printf("\nPassword entered: %s\n", password);
 538:	ff 93       	push	r31
 53a:	ef 93       	push	r30
 53c:	80 e8       	ldi	r24, 0x80	; 128
 53e:	92 e0       	ldi	r25, 0x02	; 2
 540:	9f 93       	push	r25
 542:	8f 93       	push	r24
 544:	95 d0       	rcall	.+298    	; 0x670 <printf>
			//Wrong pass -> 444
			//Correct pass -> 333
			//Give pass -> 222
			if (strcmp(correct_password, password) != 0) {
 546:	64 ec       	ldi	r22, 0xC4	; 196
 548:	72 e0       	ldi	r23, 0x02	; 2
 54a:	ce 01       	movw	r24, r28
 54c:	01 96       	adiw	r24, 0x01	; 1
 54e:	80 d0       	rcall	.+256    	; 0x650 <strcmp>
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	89 2b       	or	r24, r25
				printf("Incorrect password.\n");
 55a:	51 f1       	breq	.+84     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 55c:	87 e9       	ldi	r24, 0x97	; 151
 55e:	92 e0       	ldi	r25, 0x02	; 2
				strcpy(spi_send_data, inCorrect_code);
 560:	9a d0       	rcall	.+308    	; 0x696 <puts>
 562:	66 e2       	ldi	r22, 0x26	; 38
 564:	72 e0       	ldi	r23, 0x02	; 2
 566:	8b e2       	ldi	r24, 0x2B	; 43
 568:	92 e0       	ldi	r25, 0x02	; 2
 56a:	7b d0       	rcall	.+246    	; 0x662 <strcpy>
				printf(spi_send_data);
 56c:	8b e2       	ldi	r24, 0x2B	; 43
 56e:	92 e0       	ldi	r25, 0x02	; 2
 570:	9f 93       	push	r25
 572:	8f 93       	push	r24
 574:	7d d0       	rcall	.+250    	; 0x670 <printf>
 576:	0f 90       	pop	r0
				
				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 578:	0f 90       	pop	r0
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	12 c0       	rjmp	.+36     	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 57e:	08 2e       	mov	r0, r24
				{
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 580:	00 0c       	add	r0, r0
 582:	99 0b       	sbc	r25, r25
 584:	fc 01       	movw	r30, r24
 586:	e5 5d       	subi	r30, 0xD5	; 213
 588:	fd 4f       	sbci	r31, 0xFD	; 253
 58a:	30 81       	ld	r19, Z
 58c:	3e bd       	out	0x2e, r19	; 46
 58e:	0d b4       	in	r0, 0x2d	; 45
					while(!(SPSR & (1 << SPIF))){;}
 590:	07 fe       	sbrs	r0, 7
 592:	fd cf       	rjmp	.-6      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
 594:	3e b5       	in	r19, 0x2e	; 46
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 596:	fc 01       	movw	r30, r24
 598:	e6 53       	subi	r30, 0x36	; 54
 59a:	fd 4f       	sbci	r31, 0xFD	; 253
 59c:	30 83       	st	Z, r19
			if (strcmp(correct_password, password) != 0) {
				printf("Incorrect password.\n");
				strcpy(spi_send_data, inCorrect_code);
				printf(spi_send_data);
				
				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	82 0f       	add	r24, r18
 5a2:	28 2f       	mov	r18, r24
 5a4:	85 30       	cpi	r24, 0x05	; 5
				{
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
					while(!(SPSR & (1 << SPIF))){;}
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
				}
				passwordCorrect = true;
 5a6:	58 f3       	brcs	.-42     	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__data_end>
			}else {
				printf("Correct password.\n");
 5ae:	2d cf       	rjmp	.-422    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 5b0:	8b ea       	ldi	r24, 0xAB	; 171
 5b2:	92 e0       	ldi	r25, 0x02	; 2
 5b4:	70 d0       	rcall	.+224    	; 0x696 <puts>
				strcpy(spi_send_data, correct_code);
 5b6:	61 e2       	ldi	r22, 0x21	; 33
 5b8:	72 e0       	ldi	r23, 0x02	; 2
 5ba:	8b e2       	ldi	r24, 0x2B	; 43
 5bc:	92 e0       	ldi	r25, 0x02	; 2
 5be:	51 d0       	rcall	.+162    	; 0x662 <strcpy>
 5c0:	80 e0       	ldi	r24, 0x00	; 0

				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 5c2:	12 c0       	rjmp	.+36     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
 5c4:	08 2e       	mov	r0, r24
				{
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 5c6:	00 0c       	add	r0, r0
 5c8:	99 0b       	sbc	r25, r25
 5ca:	fc 01       	movw	r30, r24
 5cc:	e5 5d       	subi	r30, 0xD5	; 213
 5ce:	fd 4f       	sbci	r31, 0xFD	; 253
 5d0:	30 81       	ld	r19, Z
 5d2:	3e bd       	out	0x2e, r19	; 46
 5d4:	0d b4       	in	r0, 0x2d	; 45
					while(!(SPSR & (1 << SPIF))){;}
 5d6:	07 fe       	sbrs	r0, 7
 5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
 5da:	3e b5       	in	r19, 0x2e	; 46
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 5dc:	fc 01       	movw	r30, r24
 5de:	e6 53       	subi	r30, 0x36	; 54
 5e0:	fd 4f       	sbci	r31, 0xFD	; 253
 5e2:	30 83       	st	Z, r19
 5e4:	81 e0       	ldi	r24, 0x01	; 1
				passwordCorrect = true;
			}else {
				printf("Correct password.\n");
				strcpy(spi_send_data, correct_code);

				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 5e6:	82 0f       	add	r24, r18
 5e8:	28 2f       	mov	r18, r24
 5ea:	85 30       	cpi	r24, 0x05	; 5
 5ec:	58 f3       	brcs	.-42     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
 5ee:	81 e0       	ldi	r24, 0x01	; 1
				{
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
					while(!(SPSR & (1 << SPIF))){;}
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
				}
				passwordCorrect = true;
 5f0:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__data_end>
 5f4:	0a cf       	rjmp	.-492    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>

000005f6 <uart_putchar>:
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
/******************************************************************************
******************************************************************************/
int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 5f6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 5fa:	95 ff       	sbrs	r25, 5
 5fc:	fc cf       	rjmp	.-8      	; 0x5f6 <uart_putchar>
	UDR0 = c;
 5fe:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	return 0;
}
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	08 95       	ret

00000608 <uart_getchar>:
/******************************************************************************
******************************************************************************/
int uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
 608:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 60c:	88 23       	and	r24, r24
 60e:	e4 f7       	brge	.-8      	; 0x608 <uart_getchar>
	return UDR0;
 610:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	08 95       	ret

00000618 <init_uart>:
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 618:	88 e1       	ldi	r24, 0x18	; 24
 61a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
 61e:	87 e6       	ldi	r24, 0x67	; 103
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 626:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	stdout = &mystdout;
 62a:	e0 ee       	ldi	r30, 0xE0	; 224
 62c:	f2 e0       	ldi	r31, 0x02	; 2
 62e:	82 e4       	ldi	r24, 0x42	; 66
 630:	92 e0       	ldi	r25, 0x02	; 2
 632:	93 83       	std	Z+3, r25	; 0x03
 634:	82 83       	std	Z+2, r24	; 0x02
	stdin = &mystdin;
 636:	84 e3       	ldi	r24, 0x34	; 52
 638:	92 e0       	ldi	r25, 0x02	; 2
 63a:	91 83       	std	Z+1, r25	; 0x01
 63c:	80 83       	st	Z, r24
 63e:	08 95       	ret

00000640 <__tablejump2__>:
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	88 1f       	adc	r24, r24
 646:	8b bf       	out	0x3b, r24	; 59
 648:	07 90       	elpm	r0, Z+
 64a:	f6 91       	elpm	r31, Z
 64c:	e0 2d       	mov	r30, r0
 64e:	19 94       	eijmp

00000650 <strcmp>:
 650:	fb 01       	movw	r30, r22
 652:	dc 01       	movw	r26, r24
 654:	8d 91       	ld	r24, X+
 656:	01 90       	ld	r0, Z+
 658:	80 19       	sub	r24, r0
 65a:	01 10       	cpse	r0, r1
 65c:	d9 f3       	breq	.-10     	; 0x654 <strcmp+0x4>
 65e:	99 0b       	sbc	r25, r25
 660:	08 95       	ret

00000662 <strcpy>:
 662:	fb 01       	movw	r30, r22
 664:	dc 01       	movw	r26, r24
 666:	01 90       	ld	r0, Z+
 668:	0d 92       	st	X+, r0
 66a:	00 20       	and	r0, r0
 66c:	e1 f7       	brne	.-8      	; 0x666 <strcpy+0x4>
 66e:	08 95       	ret

00000670 <printf>:
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	cd b7       	in	r28, 0x3d	; 61
 676:	de b7       	in	r29, 0x3e	; 62
 678:	ae 01       	movw	r20, r28
 67a:	4a 5f       	subi	r20, 0xFA	; 250
 67c:	5f 4f       	sbci	r21, 0xFF	; 255
 67e:	fa 01       	movw	r30, r20
 680:	61 91       	ld	r22, Z+
 682:	71 91       	ld	r23, Z+
 684:	af 01       	movw	r20, r30
 686:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__iob+0x2>
 68a:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <__iob+0x3>
 68e:	61 d0       	rcall	.+194    	; 0x752 <vfprintf>
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	08 95       	ret

00000696 <puts>:
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <__iob+0x2>
 6a2:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <__iob+0x3>
 6a6:	23 81       	ldd	r18, Z+3	; 0x03
 6a8:	21 ff       	sbrs	r18, 1
 6aa:	1b c0       	rjmp	.+54     	; 0x6e2 <puts+0x4c>
 6ac:	8c 01       	movw	r16, r24
 6ae:	d0 e0       	ldi	r29, 0x00	; 0
 6b0:	c0 e0       	ldi	r28, 0x00	; 0
 6b2:	f8 01       	movw	r30, r16
 6b4:	81 91       	ld	r24, Z+
 6b6:	8f 01       	movw	r16, r30
 6b8:	60 91 e2 02 	lds	r22, 0x02E2	; 0x8002e2 <__iob+0x2>
 6bc:	70 91 e3 02 	lds	r23, 0x02E3	; 0x8002e3 <__iob+0x3>
 6c0:	db 01       	movw	r26, r22
 6c2:	18 96       	adiw	r26, 0x08	; 8
 6c4:	ed 91       	ld	r30, X+
 6c6:	fc 91       	ld	r31, X
 6c8:	19 97       	sbiw	r26, 0x09	; 9
 6ca:	88 23       	and	r24, r24
 6cc:	31 f0       	breq	.+12     	; 0x6da <puts+0x44>
 6ce:	19 95       	eicall
 6d0:	89 2b       	or	r24, r25
 6d2:	79 f3       	breq	.-34     	; 0x6b2 <puts+0x1c>
 6d4:	df ef       	ldi	r29, 0xFF	; 255
 6d6:	cf ef       	ldi	r28, 0xFF	; 255
 6d8:	ec cf       	rjmp	.-40     	; 0x6b2 <puts+0x1c>
 6da:	8a e0       	ldi	r24, 0x0A	; 10
 6dc:	19 95       	eicall
 6de:	89 2b       	or	r24, r25
 6e0:	19 f0       	breq	.+6      	; 0x6e8 <puts+0x52>
 6e2:	8f ef       	ldi	r24, 0xFF	; 255
 6e4:	9f ef       	ldi	r25, 0xFF	; 255
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <puts+0x56>
 6e8:	8d 2f       	mov	r24, r29
 6ea:	9c 2f       	mov	r25, r28
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	08 95       	ret

000006f6 <sprintf>:
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	2e 97       	sbiw	r28, 0x0e	; 14
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	0e 89       	ldd	r16, Y+22	; 0x16
 710:	1f 89       	ldd	r17, Y+23	; 0x17
 712:	86 e0       	ldi	r24, 0x06	; 6
 714:	8c 83       	std	Y+4, r24	; 0x04
 716:	1a 83       	std	Y+2, r17	; 0x02
 718:	09 83       	std	Y+1, r16	; 0x01
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	9f e7       	ldi	r25, 0x7F	; 127
 71e:	9e 83       	std	Y+6, r25	; 0x06
 720:	8d 83       	std	Y+5, r24	; 0x05
 722:	ae 01       	movw	r20, r28
 724:	46 5e       	subi	r20, 0xE6	; 230
 726:	5f 4f       	sbci	r21, 0xFF	; 255
 728:	68 8d       	ldd	r22, Y+24	; 0x18
 72a:	79 8d       	ldd	r23, Y+25	; 0x19
 72c:	ce 01       	movw	r24, r28
 72e:	01 96       	adiw	r24, 0x01	; 1
 730:	10 d0       	rcall	.+32     	; 0x752 <vfprintf>
 732:	ef 81       	ldd	r30, Y+7	; 0x07
 734:	f8 85       	ldd	r31, Y+8	; 0x08
 736:	e0 0f       	add	r30, r16
 738:	f1 1f       	adc	r31, r17
 73a:	10 82       	st	Z, r1
 73c:	2e 96       	adiw	r28, 0x0e	; 14
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	f8 94       	cli
 742:	de bf       	out	0x3e, r29	; 62
 744:	0f be       	out	0x3f, r0	; 63
 746:	cd bf       	out	0x3d, r28	; 61
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	1f 91       	pop	r17
 74e:	0f 91       	pop	r16
 750:	08 95       	ret

00000752 <vfprintf>:
 752:	2f 92       	push	r2
 754:	3f 92       	push	r3
 756:	4f 92       	push	r4
 758:	5f 92       	push	r5
 75a:	6f 92       	push	r6
 75c:	7f 92       	push	r7
 75e:	8f 92       	push	r8
 760:	9f 92       	push	r9
 762:	af 92       	push	r10
 764:	bf 92       	push	r11
 766:	cf 92       	push	r12
 768:	df 92       	push	r13
 76a:	ef 92       	push	r14
 76c:	ff 92       	push	r15
 76e:	0f 93       	push	r16
 770:	1f 93       	push	r17
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
 77a:	2b 97       	sbiw	r28, 0x0b	; 11
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	f8 94       	cli
 780:	de bf       	out	0x3e, r29	; 62
 782:	0f be       	out	0x3f, r0	; 63
 784:	cd bf       	out	0x3d, r28	; 61
 786:	6c 01       	movw	r12, r24
 788:	7b 01       	movw	r14, r22
 78a:	8a 01       	movw	r16, r20
 78c:	fc 01       	movw	r30, r24
 78e:	17 82       	std	Z+7, r1	; 0x07
 790:	16 82       	std	Z+6, r1	; 0x06
 792:	83 81       	ldd	r24, Z+3	; 0x03
 794:	81 ff       	sbrs	r24, 1
 796:	bf c1       	rjmp	.+894    	; 0xb16 <vfprintf+0x3c4>
 798:	ce 01       	movw	r24, r28
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	3c 01       	movw	r6, r24
 79e:	f6 01       	movw	r30, r12
 7a0:	93 81       	ldd	r25, Z+3	; 0x03
 7a2:	f7 01       	movw	r30, r14
 7a4:	93 fd       	sbrc	r25, 3
 7a6:	85 91       	lpm	r24, Z+
 7a8:	93 ff       	sbrs	r25, 3
 7aa:	81 91       	ld	r24, Z+
 7ac:	7f 01       	movw	r14, r30
 7ae:	88 23       	and	r24, r24
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <vfprintf+0x62>
 7b2:	ad c1       	rjmp	.+858    	; 0xb0e <vfprintf+0x3bc>
 7b4:	85 32       	cpi	r24, 0x25	; 37
 7b6:	39 f4       	brne	.+14     	; 0x7c6 <vfprintf+0x74>
 7b8:	93 fd       	sbrc	r25, 3
 7ba:	85 91       	lpm	r24, Z+
 7bc:	93 ff       	sbrs	r25, 3
 7be:	81 91       	ld	r24, Z+
 7c0:	7f 01       	movw	r14, r30
 7c2:	85 32       	cpi	r24, 0x25	; 37
 7c4:	21 f4       	brne	.+8      	; 0x7ce <vfprintf+0x7c>
 7c6:	b6 01       	movw	r22, r12
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	d6 d1       	rcall	.+940    	; 0xb78 <fputc>
 7cc:	e8 cf       	rjmp	.-48     	; 0x79e <vfprintf+0x4c>
 7ce:	91 2c       	mov	r9, r1
 7d0:	21 2c       	mov	r2, r1
 7d2:	31 2c       	mov	r3, r1
 7d4:	ff e1       	ldi	r31, 0x1F	; 31
 7d6:	f3 15       	cp	r31, r3
 7d8:	d8 f0       	brcs	.+54     	; 0x810 <vfprintf+0xbe>
 7da:	8b 32       	cpi	r24, 0x2B	; 43
 7dc:	79 f0       	breq	.+30     	; 0x7fc <vfprintf+0xaa>
 7de:	38 f4       	brcc	.+14     	; 0x7ee <vfprintf+0x9c>
 7e0:	80 32       	cpi	r24, 0x20	; 32
 7e2:	79 f0       	breq	.+30     	; 0x802 <vfprintf+0xb0>
 7e4:	83 32       	cpi	r24, 0x23	; 35
 7e6:	a1 f4       	brne	.+40     	; 0x810 <vfprintf+0xbe>
 7e8:	23 2d       	mov	r18, r3
 7ea:	20 61       	ori	r18, 0x10	; 16
 7ec:	1d c0       	rjmp	.+58     	; 0x828 <vfprintf+0xd6>
 7ee:	8d 32       	cpi	r24, 0x2D	; 45
 7f0:	61 f0       	breq	.+24     	; 0x80a <vfprintf+0xb8>
 7f2:	80 33       	cpi	r24, 0x30	; 48
 7f4:	69 f4       	brne	.+26     	; 0x810 <vfprintf+0xbe>
 7f6:	23 2d       	mov	r18, r3
 7f8:	21 60       	ori	r18, 0x01	; 1
 7fa:	16 c0       	rjmp	.+44     	; 0x828 <vfprintf+0xd6>
 7fc:	83 2d       	mov	r24, r3
 7fe:	82 60       	ori	r24, 0x02	; 2
 800:	38 2e       	mov	r3, r24
 802:	e3 2d       	mov	r30, r3
 804:	e4 60       	ori	r30, 0x04	; 4
 806:	3e 2e       	mov	r3, r30
 808:	2a c0       	rjmp	.+84     	; 0x85e <vfprintf+0x10c>
 80a:	f3 2d       	mov	r31, r3
 80c:	f8 60       	ori	r31, 0x08	; 8
 80e:	1d c0       	rjmp	.+58     	; 0x84a <vfprintf+0xf8>
 810:	37 fc       	sbrc	r3, 7
 812:	2d c0       	rjmp	.+90     	; 0x86e <vfprintf+0x11c>
 814:	20 ed       	ldi	r18, 0xD0	; 208
 816:	28 0f       	add	r18, r24
 818:	2a 30       	cpi	r18, 0x0A	; 10
 81a:	40 f0       	brcs	.+16     	; 0x82c <vfprintf+0xda>
 81c:	8e 32       	cpi	r24, 0x2E	; 46
 81e:	b9 f4       	brne	.+46     	; 0x84e <vfprintf+0xfc>
 820:	36 fc       	sbrc	r3, 6
 822:	75 c1       	rjmp	.+746    	; 0xb0e <vfprintf+0x3bc>
 824:	23 2d       	mov	r18, r3
 826:	20 64       	ori	r18, 0x40	; 64
 828:	32 2e       	mov	r3, r18
 82a:	19 c0       	rjmp	.+50     	; 0x85e <vfprintf+0x10c>
 82c:	36 fe       	sbrs	r3, 6
 82e:	06 c0       	rjmp	.+12     	; 0x83c <vfprintf+0xea>
 830:	8a e0       	ldi	r24, 0x0A	; 10
 832:	98 9e       	mul	r9, r24
 834:	20 0d       	add	r18, r0
 836:	11 24       	eor	r1, r1
 838:	92 2e       	mov	r9, r18
 83a:	11 c0       	rjmp	.+34     	; 0x85e <vfprintf+0x10c>
 83c:	ea e0       	ldi	r30, 0x0A	; 10
 83e:	2e 9e       	mul	r2, r30
 840:	20 0d       	add	r18, r0
 842:	11 24       	eor	r1, r1
 844:	22 2e       	mov	r2, r18
 846:	f3 2d       	mov	r31, r3
 848:	f0 62       	ori	r31, 0x20	; 32
 84a:	3f 2e       	mov	r3, r31
 84c:	08 c0       	rjmp	.+16     	; 0x85e <vfprintf+0x10c>
 84e:	8c 36       	cpi	r24, 0x6C	; 108
 850:	21 f4       	brne	.+8      	; 0x85a <vfprintf+0x108>
 852:	83 2d       	mov	r24, r3
 854:	80 68       	ori	r24, 0x80	; 128
 856:	38 2e       	mov	r3, r24
 858:	02 c0       	rjmp	.+4      	; 0x85e <vfprintf+0x10c>
 85a:	88 36       	cpi	r24, 0x68	; 104
 85c:	41 f4       	brne	.+16     	; 0x86e <vfprintf+0x11c>
 85e:	f7 01       	movw	r30, r14
 860:	93 fd       	sbrc	r25, 3
 862:	85 91       	lpm	r24, Z+
 864:	93 ff       	sbrs	r25, 3
 866:	81 91       	ld	r24, Z+
 868:	7f 01       	movw	r14, r30
 86a:	81 11       	cpse	r24, r1
 86c:	b3 cf       	rjmp	.-154    	; 0x7d4 <vfprintf+0x82>
 86e:	98 2f       	mov	r25, r24
 870:	9f 7d       	andi	r25, 0xDF	; 223
 872:	95 54       	subi	r25, 0x45	; 69
 874:	93 30       	cpi	r25, 0x03	; 3
 876:	28 f4       	brcc	.+10     	; 0x882 <vfprintf+0x130>
 878:	0c 5f       	subi	r16, 0xFC	; 252
 87a:	1f 4f       	sbci	r17, 0xFF	; 255
 87c:	9f e3       	ldi	r25, 0x3F	; 63
 87e:	99 83       	std	Y+1, r25	; 0x01
 880:	0d c0       	rjmp	.+26     	; 0x89c <vfprintf+0x14a>
 882:	83 36       	cpi	r24, 0x63	; 99
 884:	31 f0       	breq	.+12     	; 0x892 <vfprintf+0x140>
 886:	83 37       	cpi	r24, 0x73	; 115
 888:	71 f0       	breq	.+28     	; 0x8a6 <vfprintf+0x154>
 88a:	83 35       	cpi	r24, 0x53	; 83
 88c:	09 f0       	breq	.+2      	; 0x890 <vfprintf+0x13e>
 88e:	55 c0       	rjmp	.+170    	; 0x93a <vfprintf+0x1e8>
 890:	20 c0       	rjmp	.+64     	; 0x8d2 <vfprintf+0x180>
 892:	f8 01       	movw	r30, r16
 894:	80 81       	ld	r24, Z
 896:	89 83       	std	Y+1, r24	; 0x01
 898:	0e 5f       	subi	r16, 0xFE	; 254
 89a:	1f 4f       	sbci	r17, 0xFF	; 255
 89c:	88 24       	eor	r8, r8
 89e:	83 94       	inc	r8
 8a0:	91 2c       	mov	r9, r1
 8a2:	53 01       	movw	r10, r6
 8a4:	12 c0       	rjmp	.+36     	; 0x8ca <vfprintf+0x178>
 8a6:	28 01       	movw	r4, r16
 8a8:	f2 e0       	ldi	r31, 0x02	; 2
 8aa:	4f 0e       	add	r4, r31
 8ac:	51 1c       	adc	r5, r1
 8ae:	f8 01       	movw	r30, r16
 8b0:	a0 80       	ld	r10, Z
 8b2:	b1 80       	ldd	r11, Z+1	; 0x01
 8b4:	36 fe       	sbrs	r3, 6
 8b6:	03 c0       	rjmp	.+6      	; 0x8be <vfprintf+0x16c>
 8b8:	69 2d       	mov	r22, r9
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <vfprintf+0x170>
 8be:	6f ef       	ldi	r22, 0xFF	; 255
 8c0:	7f ef       	ldi	r23, 0xFF	; 255
 8c2:	c5 01       	movw	r24, r10
 8c4:	4e d1       	rcall	.+668    	; 0xb62 <strnlen>
 8c6:	4c 01       	movw	r8, r24
 8c8:	82 01       	movw	r16, r4
 8ca:	f3 2d       	mov	r31, r3
 8cc:	ff 77       	andi	r31, 0x7F	; 127
 8ce:	3f 2e       	mov	r3, r31
 8d0:	15 c0       	rjmp	.+42     	; 0x8fc <vfprintf+0x1aa>
 8d2:	28 01       	movw	r4, r16
 8d4:	22 e0       	ldi	r18, 0x02	; 2
 8d6:	42 0e       	add	r4, r18
 8d8:	51 1c       	adc	r5, r1
 8da:	f8 01       	movw	r30, r16
 8dc:	a0 80       	ld	r10, Z
 8de:	b1 80       	ldd	r11, Z+1	; 0x01
 8e0:	36 fe       	sbrs	r3, 6
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <vfprintf+0x198>
 8e4:	69 2d       	mov	r22, r9
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x19c>
 8ea:	6f ef       	ldi	r22, 0xFF	; 255
 8ec:	7f ef       	ldi	r23, 0xFF	; 255
 8ee:	c5 01       	movw	r24, r10
 8f0:	2d d1       	rcall	.+602    	; 0xb4c <strnlen_P>
 8f2:	4c 01       	movw	r8, r24
 8f4:	f3 2d       	mov	r31, r3
 8f6:	f0 68       	ori	r31, 0x80	; 128
 8f8:	3f 2e       	mov	r3, r31
 8fa:	82 01       	movw	r16, r4
 8fc:	33 fc       	sbrc	r3, 3
 8fe:	19 c0       	rjmp	.+50     	; 0x932 <vfprintf+0x1e0>
 900:	82 2d       	mov	r24, r2
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	88 16       	cp	r8, r24
 906:	99 06       	cpc	r9, r25
 908:	a0 f4       	brcc	.+40     	; 0x932 <vfprintf+0x1e0>
 90a:	b6 01       	movw	r22, r12
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	33 d1       	rcall	.+614    	; 0xb78 <fputc>
 912:	2a 94       	dec	r2
 914:	f5 cf       	rjmp	.-22     	; 0x900 <vfprintf+0x1ae>
 916:	f5 01       	movw	r30, r10
 918:	37 fc       	sbrc	r3, 7
 91a:	85 91       	lpm	r24, Z+
 91c:	37 fe       	sbrs	r3, 7
 91e:	81 91       	ld	r24, Z+
 920:	5f 01       	movw	r10, r30
 922:	b6 01       	movw	r22, r12
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	28 d1       	rcall	.+592    	; 0xb78 <fputc>
 928:	21 10       	cpse	r2, r1
 92a:	2a 94       	dec	r2
 92c:	21 e0       	ldi	r18, 0x01	; 1
 92e:	82 1a       	sub	r8, r18
 930:	91 08       	sbc	r9, r1
 932:	81 14       	cp	r8, r1
 934:	91 04       	cpc	r9, r1
 936:	79 f7       	brne	.-34     	; 0x916 <vfprintf+0x1c4>
 938:	e1 c0       	rjmp	.+450    	; 0xafc <vfprintf+0x3aa>
 93a:	84 36       	cpi	r24, 0x64	; 100
 93c:	11 f0       	breq	.+4      	; 0x942 <vfprintf+0x1f0>
 93e:	89 36       	cpi	r24, 0x69	; 105
 940:	39 f5       	brne	.+78     	; 0x990 <vfprintf+0x23e>
 942:	f8 01       	movw	r30, r16
 944:	37 fe       	sbrs	r3, 7
 946:	07 c0       	rjmp	.+14     	; 0x956 <vfprintf+0x204>
 948:	60 81       	ld	r22, Z
 94a:	71 81       	ldd	r23, Z+1	; 0x01
 94c:	82 81       	ldd	r24, Z+2	; 0x02
 94e:	93 81       	ldd	r25, Z+3	; 0x03
 950:	0c 5f       	subi	r16, 0xFC	; 252
 952:	1f 4f       	sbci	r17, 0xFF	; 255
 954:	08 c0       	rjmp	.+16     	; 0x966 <vfprintf+0x214>
 956:	60 81       	ld	r22, Z
 958:	71 81       	ldd	r23, Z+1	; 0x01
 95a:	07 2e       	mov	r0, r23
 95c:	00 0c       	add	r0, r0
 95e:	88 0b       	sbc	r24, r24
 960:	99 0b       	sbc	r25, r25
 962:	0e 5f       	subi	r16, 0xFE	; 254
 964:	1f 4f       	sbci	r17, 0xFF	; 255
 966:	f3 2d       	mov	r31, r3
 968:	ff 76       	andi	r31, 0x6F	; 111
 96a:	3f 2e       	mov	r3, r31
 96c:	97 ff       	sbrs	r25, 7
 96e:	09 c0       	rjmp	.+18     	; 0x982 <vfprintf+0x230>
 970:	90 95       	com	r25
 972:	80 95       	com	r24
 974:	70 95       	com	r23
 976:	61 95       	neg	r22
 978:	7f 4f       	sbci	r23, 0xFF	; 255
 97a:	8f 4f       	sbci	r24, 0xFF	; 255
 97c:	9f 4f       	sbci	r25, 0xFF	; 255
 97e:	f0 68       	ori	r31, 0x80	; 128
 980:	3f 2e       	mov	r3, r31
 982:	2a e0       	ldi	r18, 0x0A	; 10
 984:	30 e0       	ldi	r19, 0x00	; 0
 986:	a3 01       	movw	r20, r6
 988:	33 d1       	rcall	.+614    	; 0xbf0 <__ultoa_invert>
 98a:	88 2e       	mov	r8, r24
 98c:	86 18       	sub	r8, r6
 98e:	44 c0       	rjmp	.+136    	; 0xa18 <vfprintf+0x2c6>
 990:	85 37       	cpi	r24, 0x75	; 117
 992:	31 f4       	brne	.+12     	; 0x9a0 <vfprintf+0x24e>
 994:	23 2d       	mov	r18, r3
 996:	2f 7e       	andi	r18, 0xEF	; 239
 998:	b2 2e       	mov	r11, r18
 99a:	2a e0       	ldi	r18, 0x0A	; 10
 99c:	30 e0       	ldi	r19, 0x00	; 0
 99e:	25 c0       	rjmp	.+74     	; 0x9ea <vfprintf+0x298>
 9a0:	93 2d       	mov	r25, r3
 9a2:	99 7f       	andi	r25, 0xF9	; 249
 9a4:	b9 2e       	mov	r11, r25
 9a6:	8f 36       	cpi	r24, 0x6F	; 111
 9a8:	c1 f0       	breq	.+48     	; 0x9da <vfprintf+0x288>
 9aa:	18 f4       	brcc	.+6      	; 0x9b2 <vfprintf+0x260>
 9ac:	88 35       	cpi	r24, 0x58	; 88
 9ae:	79 f0       	breq	.+30     	; 0x9ce <vfprintf+0x27c>
 9b0:	ae c0       	rjmp	.+348    	; 0xb0e <vfprintf+0x3bc>
 9b2:	80 37       	cpi	r24, 0x70	; 112
 9b4:	19 f0       	breq	.+6      	; 0x9bc <vfprintf+0x26a>
 9b6:	88 37       	cpi	r24, 0x78	; 120
 9b8:	21 f0       	breq	.+8      	; 0x9c2 <vfprintf+0x270>
 9ba:	a9 c0       	rjmp	.+338    	; 0xb0e <vfprintf+0x3bc>
 9bc:	e9 2f       	mov	r30, r25
 9be:	e0 61       	ori	r30, 0x10	; 16
 9c0:	be 2e       	mov	r11, r30
 9c2:	b4 fe       	sbrs	r11, 4
 9c4:	0d c0       	rjmp	.+26     	; 0x9e0 <vfprintf+0x28e>
 9c6:	fb 2d       	mov	r31, r11
 9c8:	f4 60       	ori	r31, 0x04	; 4
 9ca:	bf 2e       	mov	r11, r31
 9cc:	09 c0       	rjmp	.+18     	; 0x9e0 <vfprintf+0x28e>
 9ce:	34 fe       	sbrs	r3, 4
 9d0:	0a c0       	rjmp	.+20     	; 0x9e6 <vfprintf+0x294>
 9d2:	29 2f       	mov	r18, r25
 9d4:	26 60       	ori	r18, 0x06	; 6
 9d6:	b2 2e       	mov	r11, r18
 9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <vfprintf+0x294>
 9da:	28 e0       	ldi	r18, 0x08	; 8
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	05 c0       	rjmp	.+10     	; 0x9ea <vfprintf+0x298>
 9e0:	20 e1       	ldi	r18, 0x10	; 16
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <vfprintf+0x298>
 9e6:	20 e1       	ldi	r18, 0x10	; 16
 9e8:	32 e0       	ldi	r19, 0x02	; 2
 9ea:	f8 01       	movw	r30, r16
 9ec:	b7 fe       	sbrs	r11, 7
 9ee:	07 c0       	rjmp	.+14     	; 0x9fe <vfprintf+0x2ac>
 9f0:	60 81       	ld	r22, Z
 9f2:	71 81       	ldd	r23, Z+1	; 0x01
 9f4:	82 81       	ldd	r24, Z+2	; 0x02
 9f6:	93 81       	ldd	r25, Z+3	; 0x03
 9f8:	0c 5f       	subi	r16, 0xFC	; 252
 9fa:	1f 4f       	sbci	r17, 0xFF	; 255
 9fc:	06 c0       	rjmp	.+12     	; 0xa0a <vfprintf+0x2b8>
 9fe:	60 81       	ld	r22, Z
 a00:	71 81       	ldd	r23, Z+1	; 0x01
 a02:	80 e0       	ldi	r24, 0x00	; 0
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 5f       	subi	r16, 0xFE	; 254
 a08:	1f 4f       	sbci	r17, 0xFF	; 255
 a0a:	a3 01       	movw	r20, r6
 a0c:	f1 d0       	rcall	.+482    	; 0xbf0 <__ultoa_invert>
 a0e:	88 2e       	mov	r8, r24
 a10:	86 18       	sub	r8, r6
 a12:	fb 2d       	mov	r31, r11
 a14:	ff 77       	andi	r31, 0x7F	; 127
 a16:	3f 2e       	mov	r3, r31
 a18:	36 fe       	sbrs	r3, 6
 a1a:	0d c0       	rjmp	.+26     	; 0xa36 <vfprintf+0x2e4>
 a1c:	23 2d       	mov	r18, r3
 a1e:	2e 7f       	andi	r18, 0xFE	; 254
 a20:	a2 2e       	mov	r10, r18
 a22:	89 14       	cp	r8, r9
 a24:	58 f4       	brcc	.+22     	; 0xa3c <vfprintf+0x2ea>
 a26:	34 fe       	sbrs	r3, 4
 a28:	0b c0       	rjmp	.+22     	; 0xa40 <vfprintf+0x2ee>
 a2a:	32 fc       	sbrc	r3, 2
 a2c:	09 c0       	rjmp	.+18     	; 0xa40 <vfprintf+0x2ee>
 a2e:	83 2d       	mov	r24, r3
 a30:	8e 7e       	andi	r24, 0xEE	; 238
 a32:	a8 2e       	mov	r10, r24
 a34:	05 c0       	rjmp	.+10     	; 0xa40 <vfprintf+0x2ee>
 a36:	b8 2c       	mov	r11, r8
 a38:	a3 2c       	mov	r10, r3
 a3a:	03 c0       	rjmp	.+6      	; 0xa42 <vfprintf+0x2f0>
 a3c:	b8 2c       	mov	r11, r8
 a3e:	01 c0       	rjmp	.+2      	; 0xa42 <vfprintf+0x2f0>
 a40:	b9 2c       	mov	r11, r9
 a42:	a4 fe       	sbrs	r10, 4
 a44:	0f c0       	rjmp	.+30     	; 0xa64 <vfprintf+0x312>
 a46:	fe 01       	movw	r30, r28
 a48:	e8 0d       	add	r30, r8
 a4a:	f1 1d       	adc	r31, r1
 a4c:	80 81       	ld	r24, Z
 a4e:	80 33       	cpi	r24, 0x30	; 48
 a50:	21 f4       	brne	.+8      	; 0xa5a <vfprintf+0x308>
 a52:	9a 2d       	mov	r25, r10
 a54:	99 7e       	andi	r25, 0xE9	; 233
 a56:	a9 2e       	mov	r10, r25
 a58:	09 c0       	rjmp	.+18     	; 0xa6c <vfprintf+0x31a>
 a5a:	a2 fe       	sbrs	r10, 2
 a5c:	06 c0       	rjmp	.+12     	; 0xa6a <vfprintf+0x318>
 a5e:	b3 94       	inc	r11
 a60:	b3 94       	inc	r11
 a62:	04 c0       	rjmp	.+8      	; 0xa6c <vfprintf+0x31a>
 a64:	8a 2d       	mov	r24, r10
 a66:	86 78       	andi	r24, 0x86	; 134
 a68:	09 f0       	breq	.+2      	; 0xa6c <vfprintf+0x31a>
 a6a:	b3 94       	inc	r11
 a6c:	a3 fc       	sbrc	r10, 3
 a6e:	10 c0       	rjmp	.+32     	; 0xa90 <vfprintf+0x33e>
 a70:	a0 fe       	sbrs	r10, 0
 a72:	06 c0       	rjmp	.+12     	; 0xa80 <vfprintf+0x32e>
 a74:	b2 14       	cp	r11, r2
 a76:	80 f4       	brcc	.+32     	; 0xa98 <vfprintf+0x346>
 a78:	28 0c       	add	r2, r8
 a7a:	92 2c       	mov	r9, r2
 a7c:	9b 18       	sub	r9, r11
 a7e:	0d c0       	rjmp	.+26     	; 0xa9a <vfprintf+0x348>
 a80:	b2 14       	cp	r11, r2
 a82:	58 f4       	brcc	.+22     	; 0xa9a <vfprintf+0x348>
 a84:	b6 01       	movw	r22, r12
 a86:	80 e2       	ldi	r24, 0x20	; 32
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	76 d0       	rcall	.+236    	; 0xb78 <fputc>
 a8c:	b3 94       	inc	r11
 a8e:	f8 cf       	rjmp	.-16     	; 0xa80 <vfprintf+0x32e>
 a90:	b2 14       	cp	r11, r2
 a92:	18 f4       	brcc	.+6      	; 0xa9a <vfprintf+0x348>
 a94:	2b 18       	sub	r2, r11
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <vfprintf+0x34a>
 a98:	98 2c       	mov	r9, r8
 a9a:	21 2c       	mov	r2, r1
 a9c:	a4 fe       	sbrs	r10, 4
 a9e:	0f c0       	rjmp	.+30     	; 0xabe <vfprintf+0x36c>
 aa0:	b6 01       	movw	r22, r12
 aa2:	80 e3       	ldi	r24, 0x30	; 48
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	68 d0       	rcall	.+208    	; 0xb78 <fputc>
 aa8:	a2 fe       	sbrs	r10, 2
 aaa:	16 c0       	rjmp	.+44     	; 0xad8 <vfprintf+0x386>
 aac:	a1 fc       	sbrc	r10, 1
 aae:	03 c0       	rjmp	.+6      	; 0xab6 <vfprintf+0x364>
 ab0:	88 e7       	ldi	r24, 0x78	; 120
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0x368>
 ab6:	88 e5       	ldi	r24, 0x58	; 88
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	b6 01       	movw	r22, r12
 abc:	0c c0       	rjmp	.+24     	; 0xad6 <vfprintf+0x384>
 abe:	8a 2d       	mov	r24, r10
 ac0:	86 78       	andi	r24, 0x86	; 134
 ac2:	51 f0       	breq	.+20     	; 0xad8 <vfprintf+0x386>
 ac4:	a1 fe       	sbrs	r10, 1
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <vfprintf+0x37a>
 ac8:	8b e2       	ldi	r24, 0x2B	; 43
 aca:	01 c0       	rjmp	.+2      	; 0xace <vfprintf+0x37c>
 acc:	80 e2       	ldi	r24, 0x20	; 32
 ace:	a7 fc       	sbrc	r10, 7
 ad0:	8d e2       	ldi	r24, 0x2D	; 45
 ad2:	b6 01       	movw	r22, r12
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	50 d0       	rcall	.+160    	; 0xb78 <fputc>
 ad8:	89 14       	cp	r8, r9
 ada:	30 f4       	brcc	.+12     	; 0xae8 <vfprintf+0x396>
 adc:	b6 01       	movw	r22, r12
 ade:	80 e3       	ldi	r24, 0x30	; 48
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	4a d0       	rcall	.+148    	; 0xb78 <fputc>
 ae4:	9a 94       	dec	r9
 ae6:	f8 cf       	rjmp	.-16     	; 0xad8 <vfprintf+0x386>
 ae8:	8a 94       	dec	r8
 aea:	f3 01       	movw	r30, r6
 aec:	e8 0d       	add	r30, r8
 aee:	f1 1d       	adc	r31, r1
 af0:	80 81       	ld	r24, Z
 af2:	b6 01       	movw	r22, r12
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	40 d0       	rcall	.+128    	; 0xb78 <fputc>
 af8:	81 10       	cpse	r8, r1
 afa:	f6 cf       	rjmp	.-20     	; 0xae8 <vfprintf+0x396>
 afc:	22 20       	and	r2, r2
 afe:	09 f4       	brne	.+2      	; 0xb02 <vfprintf+0x3b0>
 b00:	4e ce       	rjmp	.-868    	; 0x79e <vfprintf+0x4c>
 b02:	b6 01       	movw	r22, r12
 b04:	80 e2       	ldi	r24, 0x20	; 32
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	37 d0       	rcall	.+110    	; 0xb78 <fputc>
 b0a:	2a 94       	dec	r2
 b0c:	f7 cf       	rjmp	.-18     	; 0xafc <vfprintf+0x3aa>
 b0e:	f6 01       	movw	r30, r12
 b10:	86 81       	ldd	r24, Z+6	; 0x06
 b12:	97 81       	ldd	r25, Z+7	; 0x07
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <vfprintf+0x3c8>
 b16:	8f ef       	ldi	r24, 0xFF	; 255
 b18:	9f ef       	ldi	r25, 0xFF	; 255
 b1a:	2b 96       	adiw	r28, 0x0b	; 11
 b1c:	0f b6       	in	r0, 0x3f	; 63
 b1e:	f8 94       	cli
 b20:	de bf       	out	0x3e, r29	; 62
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	cd bf       	out	0x3d, r28	; 61
 b26:	df 91       	pop	r29
 b28:	cf 91       	pop	r28
 b2a:	1f 91       	pop	r17
 b2c:	0f 91       	pop	r16
 b2e:	ff 90       	pop	r15
 b30:	ef 90       	pop	r14
 b32:	df 90       	pop	r13
 b34:	cf 90       	pop	r12
 b36:	bf 90       	pop	r11
 b38:	af 90       	pop	r10
 b3a:	9f 90       	pop	r9
 b3c:	8f 90       	pop	r8
 b3e:	7f 90       	pop	r7
 b40:	6f 90       	pop	r6
 b42:	5f 90       	pop	r5
 b44:	4f 90       	pop	r4
 b46:	3f 90       	pop	r3
 b48:	2f 90       	pop	r2
 b4a:	08 95       	ret

00000b4c <strnlen_P>:
 b4c:	fc 01       	movw	r30, r24
 b4e:	05 90       	lpm	r0, Z+
 b50:	61 50       	subi	r22, 0x01	; 1
 b52:	70 40       	sbci	r23, 0x00	; 0
 b54:	01 10       	cpse	r0, r1
 b56:	d8 f7       	brcc	.-10     	; 0xb4e <strnlen_P+0x2>
 b58:	80 95       	com	r24
 b5a:	90 95       	com	r25
 b5c:	8e 0f       	add	r24, r30
 b5e:	9f 1f       	adc	r25, r31
 b60:	08 95       	ret

00000b62 <strnlen>:
 b62:	fc 01       	movw	r30, r24
 b64:	61 50       	subi	r22, 0x01	; 1
 b66:	70 40       	sbci	r23, 0x00	; 0
 b68:	01 90       	ld	r0, Z+
 b6a:	01 10       	cpse	r0, r1
 b6c:	d8 f7       	brcc	.-10     	; 0xb64 <strnlen+0x2>
 b6e:	80 95       	com	r24
 b70:	90 95       	com	r25
 b72:	8e 0f       	add	r24, r30
 b74:	9f 1f       	adc	r25, r31
 b76:	08 95       	ret

00000b78 <fputc>:
 b78:	0f 93       	push	r16
 b7a:	1f 93       	push	r17
 b7c:	cf 93       	push	r28
 b7e:	df 93       	push	r29
 b80:	fb 01       	movw	r30, r22
 b82:	23 81       	ldd	r18, Z+3	; 0x03
 b84:	21 fd       	sbrc	r18, 1
 b86:	03 c0       	rjmp	.+6      	; 0xb8e <fputc+0x16>
 b88:	8f ef       	ldi	r24, 0xFF	; 255
 b8a:	9f ef       	ldi	r25, 0xFF	; 255
 b8c:	2c c0       	rjmp	.+88     	; 0xbe6 <fputc+0x6e>
 b8e:	22 ff       	sbrs	r18, 2
 b90:	16 c0       	rjmp	.+44     	; 0xbbe <fputc+0x46>
 b92:	46 81       	ldd	r20, Z+6	; 0x06
 b94:	57 81       	ldd	r21, Z+7	; 0x07
 b96:	24 81       	ldd	r18, Z+4	; 0x04
 b98:	35 81       	ldd	r19, Z+5	; 0x05
 b9a:	42 17       	cp	r20, r18
 b9c:	53 07       	cpc	r21, r19
 b9e:	44 f4       	brge	.+16     	; 0xbb0 <fputc+0x38>
 ba0:	a0 81       	ld	r26, Z
 ba2:	b1 81       	ldd	r27, Z+1	; 0x01
 ba4:	9d 01       	movw	r18, r26
 ba6:	2f 5f       	subi	r18, 0xFF	; 255
 ba8:	3f 4f       	sbci	r19, 0xFF	; 255
 baa:	31 83       	std	Z+1, r19	; 0x01
 bac:	20 83       	st	Z, r18
 bae:	8c 93       	st	X, r24
 bb0:	26 81       	ldd	r18, Z+6	; 0x06
 bb2:	37 81       	ldd	r19, Z+7	; 0x07
 bb4:	2f 5f       	subi	r18, 0xFF	; 255
 bb6:	3f 4f       	sbci	r19, 0xFF	; 255
 bb8:	37 83       	std	Z+7, r19	; 0x07
 bba:	26 83       	std	Z+6, r18	; 0x06
 bbc:	14 c0       	rjmp	.+40     	; 0xbe6 <fputc+0x6e>
 bbe:	8b 01       	movw	r16, r22
 bc0:	ec 01       	movw	r28, r24
 bc2:	fb 01       	movw	r30, r22
 bc4:	00 84       	ldd	r0, Z+8	; 0x08
 bc6:	f1 85       	ldd	r31, Z+9	; 0x09
 bc8:	e0 2d       	mov	r30, r0
 bca:	19 95       	eicall
 bcc:	89 2b       	or	r24, r25
 bce:	e1 f6       	brne	.-72     	; 0xb88 <fputc+0x10>
 bd0:	d8 01       	movw	r26, r16
 bd2:	16 96       	adiw	r26, 0x06	; 6
 bd4:	8d 91       	ld	r24, X+
 bd6:	9c 91       	ld	r25, X
 bd8:	17 97       	sbiw	r26, 0x07	; 7
 bda:	01 96       	adiw	r24, 0x01	; 1
 bdc:	17 96       	adiw	r26, 0x07	; 7
 bde:	9c 93       	st	X, r25
 be0:	8e 93       	st	-X, r24
 be2:	16 97       	sbiw	r26, 0x06	; 6
 be4:	ce 01       	movw	r24, r28
 be6:	df 91       	pop	r29
 be8:	cf 91       	pop	r28
 bea:	1f 91       	pop	r17
 bec:	0f 91       	pop	r16
 bee:	08 95       	ret

00000bf0 <__ultoa_invert>:
 bf0:	fa 01       	movw	r30, r20
 bf2:	aa 27       	eor	r26, r26
 bf4:	28 30       	cpi	r18, 0x08	; 8
 bf6:	51 f1       	breq	.+84     	; 0xc4c <__ultoa_invert+0x5c>
 bf8:	20 31       	cpi	r18, 0x10	; 16
 bfa:	81 f1       	breq	.+96     	; 0xc5c <__ultoa_invert+0x6c>
 bfc:	e8 94       	clt
 bfe:	6f 93       	push	r22
 c00:	6e 7f       	andi	r22, 0xFE	; 254
 c02:	6e 5f       	subi	r22, 0xFE	; 254
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	8f 4f       	sbci	r24, 0xFF	; 255
 c08:	9f 4f       	sbci	r25, 0xFF	; 255
 c0a:	af 4f       	sbci	r26, 0xFF	; 255
 c0c:	b1 e0       	ldi	r27, 0x01	; 1
 c0e:	3e d0       	rcall	.+124    	; 0xc8c <__ultoa_invert+0x9c>
 c10:	b4 e0       	ldi	r27, 0x04	; 4
 c12:	3c d0       	rcall	.+120    	; 0xc8c <__ultoa_invert+0x9c>
 c14:	67 0f       	add	r22, r23
 c16:	78 1f       	adc	r23, r24
 c18:	89 1f       	adc	r24, r25
 c1a:	9a 1f       	adc	r25, r26
 c1c:	a1 1d       	adc	r26, r1
 c1e:	68 0f       	add	r22, r24
 c20:	79 1f       	adc	r23, r25
 c22:	8a 1f       	adc	r24, r26
 c24:	91 1d       	adc	r25, r1
 c26:	a1 1d       	adc	r26, r1
 c28:	6a 0f       	add	r22, r26
 c2a:	71 1d       	adc	r23, r1
 c2c:	81 1d       	adc	r24, r1
 c2e:	91 1d       	adc	r25, r1
 c30:	a1 1d       	adc	r26, r1
 c32:	20 d0       	rcall	.+64     	; 0xc74 <__ultoa_invert+0x84>
 c34:	09 f4       	brne	.+2      	; 0xc38 <__ultoa_invert+0x48>
 c36:	68 94       	set
 c38:	3f 91       	pop	r19
 c3a:	2a e0       	ldi	r18, 0x0A	; 10
 c3c:	26 9f       	mul	r18, r22
 c3e:	11 24       	eor	r1, r1
 c40:	30 19       	sub	r19, r0
 c42:	30 5d       	subi	r19, 0xD0	; 208
 c44:	31 93       	st	Z+, r19
 c46:	de f6       	brtc	.-74     	; 0xbfe <__ultoa_invert+0xe>
 c48:	cf 01       	movw	r24, r30
 c4a:	08 95       	ret
 c4c:	46 2f       	mov	r20, r22
 c4e:	47 70       	andi	r20, 0x07	; 7
 c50:	40 5d       	subi	r20, 0xD0	; 208
 c52:	41 93       	st	Z+, r20
 c54:	b3 e0       	ldi	r27, 0x03	; 3
 c56:	0f d0       	rcall	.+30     	; 0xc76 <__ultoa_invert+0x86>
 c58:	c9 f7       	brne	.-14     	; 0xc4c <__ultoa_invert+0x5c>
 c5a:	f6 cf       	rjmp	.-20     	; 0xc48 <__ultoa_invert+0x58>
 c5c:	46 2f       	mov	r20, r22
 c5e:	4f 70       	andi	r20, 0x0F	; 15
 c60:	40 5d       	subi	r20, 0xD0	; 208
 c62:	4a 33       	cpi	r20, 0x3A	; 58
 c64:	18 f0       	brcs	.+6      	; 0xc6c <__ultoa_invert+0x7c>
 c66:	49 5d       	subi	r20, 0xD9	; 217
 c68:	31 fd       	sbrc	r19, 1
 c6a:	40 52       	subi	r20, 0x20	; 32
 c6c:	41 93       	st	Z+, r20
 c6e:	02 d0       	rcall	.+4      	; 0xc74 <__ultoa_invert+0x84>
 c70:	a9 f7       	brne	.-22     	; 0xc5c <__ultoa_invert+0x6c>
 c72:	ea cf       	rjmp	.-44     	; 0xc48 <__ultoa_invert+0x58>
 c74:	b4 e0       	ldi	r27, 0x04	; 4
 c76:	a6 95       	lsr	r26
 c78:	97 95       	ror	r25
 c7a:	87 95       	ror	r24
 c7c:	77 95       	ror	r23
 c7e:	67 95       	ror	r22
 c80:	ba 95       	dec	r27
 c82:	c9 f7       	brne	.-14     	; 0xc76 <__ultoa_invert+0x86>
 c84:	00 97       	sbiw	r24, 0x00	; 0
 c86:	61 05       	cpc	r22, r1
 c88:	71 05       	cpc	r23, r1
 c8a:	08 95       	ret
 c8c:	9b 01       	movw	r18, r22
 c8e:	ac 01       	movw	r20, r24
 c90:	0a 2e       	mov	r0, r26
 c92:	06 94       	lsr	r0
 c94:	57 95       	ror	r21
 c96:	47 95       	ror	r20
 c98:	37 95       	ror	r19
 c9a:	27 95       	ror	r18
 c9c:	ba 95       	dec	r27
 c9e:	c9 f7       	brne	.-14     	; 0xc92 <__ultoa_invert+0xa2>
 ca0:	62 0f       	add	r22, r18
 ca2:	73 1f       	adc	r23, r19
 ca4:	84 1f       	adc	r24, r20
 ca6:	95 1f       	adc	r25, r21
 ca8:	a0 1d       	adc	r26, r0
 caa:	08 95       	ret

00000cac <_exit>:
 cac:	f8 94       	cli

00000cae <__stop_program>:
 cae:	ff cf       	rjmp	.-2      	; 0xcae <__stop_program>

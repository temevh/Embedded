
SPISlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800200  00000cda  00000d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  008002c2  008002c2  00000e30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000171a  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe5  00000000  00000000  0000269e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a23  00000000  00000000  00003683  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  000040a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082b  00000000  00000000  000041e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004dd  00000000  00000000  00004a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004eec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	be c1       	rjmp	.+892    	; 0x382 <__vector_1>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	d8 c0       	rjmp	.+432    	; 0x212 <__bad_interrupt>
  62:	00 00       	nop
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	7f 01       	movw	r14, r30
  e6:	87 01       	movw	r16, r14
  e8:	87 01       	movw	r16, r14
  ea:	87 01       	movw	r16, r14
  ec:	81 01       	movw	r16, r2
  ee:	87 01       	movw	r16, r14
  f0:	83 01       	movw	r16, r6
  f2:	85 01       	movw	r16, r10
  f4:	87 01       	movw	r16, r14
  f6:	87 01       	movw	r16, r14
  f8:	87 01       	movw	r16, r14
  fa:	87 01       	movw	r16, r14
  fc:	87 01       	movw	r16, r14
  fe:	87 01       	movw	r16, r14
 100:	87 01       	movw	r16, r14
 102:	87 01       	movw	r16, r14
 104:	87 01       	movw	r16, r14
 106:	87 01       	movw	r16, r14
 108:	87 01       	movw	r16, r14
 10a:	87 01       	movw	r16, r14
 10c:	87 01       	movw	r16, r14
 10e:	87 01       	movw	r16, r14
 110:	87 01       	movw	r16, r14
 112:	87 01       	movw	r16, r14
 114:	87 01       	movw	r16, r14
 116:	87 01       	movw	r16, r14
 118:	87 01       	movw	r16, r14
 11a:	87 01       	movw	r16, r14
 11c:	87 01       	movw	r16, r14
 11e:	87 01       	movw	r16, r14
 120:	87 01       	movw	r16, r14
 122:	87 01       	movw	r16, r14
 124:	87 01       	movw	r16, r14
 126:	87 01       	movw	r16, r14
 128:	87 01       	movw	r16, r14
 12a:	87 01       	movw	r16, r14
 12c:	87 01       	movw	r16, r14
 12e:	87 01       	movw	r16, r14
 130:	87 01       	movw	r16, r14
 132:	87 01       	movw	r16, r14
 134:	87 01       	movw	r16, r14
 136:	87 01       	movw	r16, r14
 138:	87 01       	movw	r16, r14
 13a:	87 01       	movw	r16, r14
 13c:	87 01       	movw	r16, r14
 13e:	87 01       	movw	r16, r14
 140:	87 01       	movw	r16, r14
 142:	87 01       	movw	r16, r14
 144:	87 01       	movw	r16, r14
 146:	87 01       	movw	r16, r14
 148:	87 01       	movw	r16, r14
 14a:	87 01       	movw	r16, r14
 14c:	87 01       	movw	r16, r14
 14e:	87 01       	movw	r16, r14
 150:	87 01       	movw	r16, r14
 152:	87 01       	movw	r16, r14
 154:	87 01       	movw	r16, r14
 156:	87 01       	movw	r16, r14
 158:	87 01       	movw	r16, r14
 15a:	87 01       	movw	r16, r14
 15c:	87 01       	movw	r16, r14
 15e:	87 01       	movw	r16, r14
 160:	87 01       	movw	r16, r14
 162:	87 01       	movw	r16, r14
 164:	77 01       	movw	r14, r14
 166:	87 01       	movw	r16, r14
 168:	87 01       	movw	r16, r14
 16a:	87 01       	movw	r16, r14
 16c:	79 01       	movw	r14, r18
 16e:	87 01       	movw	r16, r14
 170:	7b 01       	movw	r14, r22
 172:	7d 01       	movw	r14, r26
 174:	87 01       	movw	r16, r14
 176:	87 01       	movw	r16, r14
 178:	87 01       	movw	r16, r14
 17a:	87 01       	movw	r16, r14
 17c:	87 01       	movw	r16, r14
 17e:	87 01       	movw	r16, r14
 180:	87 01       	movw	r16, r14
 182:	87 01       	movw	r16, r14
 184:	87 01       	movw	r16, r14
 186:	87 01       	movw	r16, r14
 188:	87 01       	movw	r16, r14
 18a:	87 01       	movw	r16, r14
 18c:	87 01       	movw	r16, r14
 18e:	87 01       	movw	r16, r14
 190:	87 01       	movw	r16, r14
 192:	87 01       	movw	r16, r14
 194:	87 01       	movw	r16, r14
 196:	87 01       	movw	r16, r14
 198:	87 01       	movw	r16, r14
 19a:	87 01       	movw	r16, r14
 19c:	87 01       	movw	r16, r14
 19e:	87 01       	movw	r16, r14
 1a0:	87 01       	movw	r16, r14
 1a2:	87 01       	movw	r16, r14
 1a4:	6f 01       	movw	r12, r30
 1a6:	87 01       	movw	r16, r14
 1a8:	87 01       	movw	r16, r14
 1aa:	87 01       	movw	r16, r14
 1ac:	71 01       	movw	r14, r2
 1ae:	87 01       	movw	r16, r14
 1b0:	73 01       	movw	r14, r6
 1b2:	75 01       	movw	r14, r10
 1b4:	87 01       	movw	r16, r14
 1b6:	87 01       	movw	r16, r14
 1b8:	87 01       	movw	r16, r14
 1ba:	87 01       	movw	r16, r14
 1bc:	87 01       	movw	r16, r14
 1be:	87 01       	movw	r16, r14
 1c0:	87 01       	movw	r16, r14
 1c2:	87 01       	movw	r16, r14
 1c4:	69 01       	movw	r12, r18
 1c6:	87 01       	movw	r16, r14
 1c8:	87 01       	movw	r16, r14
 1ca:	87 01       	movw	r16, r14
 1cc:	89 01       	movw	r16, r18
 1ce:	87 01       	movw	r16, r14
 1d0:	6b 01       	movw	r12, r22
 1d2:	6d 01       	movw	r12, r26

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	ea ed       	ldi	r30, 0xDA	; 218
 1ec:	fc e0       	ldi	r31, 0x0C	; 12
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	a2 3c       	cpi	r26, 0xC2	; 194
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	22 e0       	ldi	r18, 0x02	; 2
 200:	a2 ec       	ldi	r26, 0xC2	; 194
 202:	b2 e0       	ldi	r27, 0x02	; 2
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	a6 3e       	cpi	r26, 0xE6	; 230
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	c8 d0       	rcall	.+400    	; 0x3a0 <main>
 210:	62 c5       	rjmp	.+2756   	; 0xcd6 <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <keypad_ScanKey>:
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 214:	20 e0       	ldi	r18, 0x00	; 0
        4.Return the ScanCode(Combination of ROW & COL) for decoding the key.
 ***************************************************************************************************/
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;
 216:	9f ee       	ldi	r25, 0xEF	; 239

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 218:	10 c0       	rjmp	.+32     	; 0x23a <keypad_ScanKey+0x26>
	{
		M_ROW=var_keyScanCode_u8;        // Select 1-Row at a time for Scanning the Key
 21a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	e9 ef       	ldi	r30, 0xF9	; 249
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	31 97       	sbiw	r30, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <keypad_ScanKey+0xe>
 226:	00 c0       	rjmp	.+0      	; 0x228 <keypad_ScanKey+0x14>
 228:	00 00       	nop
		DELAY_ms(1);
		var_keyPress_u8=M_COL & 0x0F;    // Read the Column, for key press
 22a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 22e:	8f 70       	andi	r24, 0x0F	; 15

		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
 230:	8f 30       	cpi	r24, 0x0F	; 15
 232:	29 f4       	brne	.+10     	; 0x23e <keypad_ScanKey+0x2a>
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
 234:	99 0f       	add	r25, r25
 236:	9f 5f       	subi	r25, 0xFF	; 255
static uint8_t keypad_ScanKey()
{

	uint8_t var_keyScanCode_u8 = 0xEF,i, var_keyPress_u8;

	for(i=0;i<0x04;i++)                // Scan All the 4-Rows for key press
 238:	2f 5f       	subi	r18, 0xFF	; 255
 23a:	24 30       	cpi	r18, 0x04	; 4
 23c:	70 f3       	brcs	.-36     	; 0x21a <keypad_ScanKey+0x6>
		if(var_keyPress_u8!=0x0F)        // If the KEY press is detected for the selected
			break;                     // ROW then stop Scanning,

		var_keyScanCode_u8=((var_keyScanCode_u8<<1)+0x01); // Rotate the ScanKey to SCAN the remaining Rows
	}
	var_keyPress_u8 = var_keyPress_u8 + (var_keyScanCode_u8 & 0xf0); // Return the row and COL status to decode the key
 23e:	90 7f       	andi	r25, 0xF0	; 240
	return(var_keyPress_u8);
}
 240:	89 0f       	add	r24, r25
 242:	08 95       	ret

00000244 <KEYPAD_Init>:
        1.ROW lines are configured as Output.
        2.Column Lines are configured as Input.
 ***************************************************************************************************/
void KEYPAD_Init()
{
	M_RowColDirection= C_RowOutputColInput_U8; // Configure Row lines as O/P and Column lines as I/P
 244:	80 ef       	ldi	r24, 0xF0	; 240
 246:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>
 24a:	08 95       	ret

0000024c <KEYPAD_WaitForKeyRelease>:
	uint8_t key;
	do
	{
		do
		{
			M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 24c:	8f e0       	ldi	r24, 0x0F	; 15
 24e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			key=M_COL & 0x0F;     // Read the Columns, to check the key press
 252:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 256:	8f 70       	andi	r24, 0x0F	; 15
		}while(key!=0x0F);
 258:	8f 30       	cpi	r24, 0x0F	; 15
 25a:	c1 f7       	brne	.-16     	; 0x24c <KEYPAD_WaitForKeyRelease>
 25c:	89 ef       	ldi	r24, 0xF9	; 249
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <KEYPAD_WaitForKeyRelease+0x14>
 264:	00 c0       	rjmp	.+0      	; 0x266 <KEYPAD_WaitForKeyRelease+0x1a>
 266:	00 00       	nop

		DELAY_ms(1);

		M_ROW=0x0F;           // Pull the ROW lines to low and Column lines high.
 268:	8f e0       	ldi	r24, 0x0F	; 15
 26a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		key=M_COL & 0x0F;     // Read the Columns, to check the key press
 26e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 272:	8f 70       	andi	r24, 0x0F	; 15
	}while(key!=0x0F);   // Wait till the Key is released,
 274:	8f 30       	cpi	r24, 0x0F	; 15
 276:	51 f7       	brne	.-44     	; 0x24c <KEYPAD_WaitForKeyRelease>
	                     // If no Key is pressed, Column lines will be High(0x0F)
}
 278:	08 95       	ret

0000027a <KEYPAD_WaitForKeyPress>:
	uint8_t var_keyPress_u8;
	do
	{
		do
		{
			M_ROW=0x0F;		  // Pull the ROW lines to low and Column lines high.
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
			var_keyPress_u8=M_COL & 0x0F;	  // Read the Columns, to check the key press
 280:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 284:	8f 70       	andi	r24, 0x0F	; 15
		}while(var_keyPress_u8==0x0F); // Wait till the Key is pressed,
 286:	8f 30       	cpi	r24, 0x0F	; 15
 288:	c1 f3       	breq	.-16     	; 0x27a <KEYPAD_WaitForKeyPress>
 28a:	89 ef       	ldi	r24, 0xF9	; 249
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <KEYPAD_WaitForKeyPress+0x14>
 292:	00 c0       	rjmp	.+0      	; 0x294 <KEYPAD_WaitForKeyPress+0x1a>
 294:	00 00       	nop
		// if a Key is pressed the corresponding Column line go low

		DELAY_ms(1);		  // Wait for some time(debounce Time);

		M_ROW=0x0F;		  // After debounce time, perform the above operation
 296:	8f e0       	ldi	r24, 0x0F	; 15
 298:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7c0108>
		var_keyPress_u8=M_COL & 0x0F;	  // to ensure the Key press.
 29c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7c0106>
 2a0:	8f 70       	andi	r24, 0x0F	; 15

	}while(var_keyPress_u8==0x0F);
 2a2:	8f 30       	cpi	r24, 0x0F	; 15
 2a4:	51 f3       	breq	.-44     	; 0x27a <KEYPAD_WaitForKeyPress>
}
 2a6:	08 95       	ret

000002a8 <KEYPAD_GetKey>:
 ***************************************************************************************************/
uint8_t KEYPAD_GetKey()
{
	uint8_t var_keyPress_u8;

	KEYPAD_WaitForKeyRelease();    // Wait for the previous key release
 2a8:	d1 df       	rcall	.-94     	; 0x24c <KEYPAD_WaitForKeyRelease>
 2aa:	89 ef       	ldi	r24, 0xF9	; 249
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <KEYPAD_GetKey+0x6>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <KEYPAD_GetKey+0xc>
	DELAY_ms(1);

	KEYPAD_WaitForKeyPress();      // Wait for the new key press
 2b4:	00 00       	nop
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.
 2b6:	e1 df       	rcall	.-62     	; 0x27a <KEYPAD_WaitForKeyPress>
 2b8:	ad df       	rcall	.-166    	; 0x214 <keypad_ScanKey>

	switch(var_keyPress_u8)                       // Decode the key
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	fc 01       	movw	r30, r24
 2be:	e7 57       	subi	r30, 0x77	; 119
 2c0:	f1 09       	sbc	r31, r1
 2c2:	e8 37       	cpi	r30, 0x78	; 120
 2c4:	f1 05       	cpc	r31, r1
 2c6:	18 f5       	brcc	.+70     	; 0x30e <KEYPAD_GetKey+0x66>
 2c8:	88 27       	eor	r24, r24
 2ca:	ee 58       	subi	r30, 0x8E	; 142
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	8f 4f       	sbci	r24, 0xFF	; 255
 2d0:	cc c1       	rjmp	.+920    	; 0x66a <__tablejump2__>
	{
	case 0xe7: var_keyPress_u8='*'; break; 
 2d2:	8a e2       	ldi	r24, 0x2A	; 42
 2d4:	08 95       	ret
	case 0xeb: var_keyPress_u8='7'; break; 
	case 0xed: var_keyPress_u8='4'; break; 
 2d6:	84 e3       	ldi	r24, 0x34	; 52
 2d8:	08 95       	ret
	case 0xee: var_keyPress_u8='1'; break; 
 2da:	81 e3       	ldi	r24, 0x31	; 49
 2dc:	08 95       	ret
	case 0xd7: var_keyPress_u8='0'; break; 
 2de:	80 e3       	ldi	r24, 0x30	; 48
 2e0:	08 95       	ret
	case 0xdb: var_keyPress_u8='8'; break; 
 2e2:	88 e3       	ldi	r24, 0x38	; 56
 2e4:	08 95       	ret
	case 0xdd: var_keyPress_u8='5'; break; 
 2e6:	85 e3       	ldi	r24, 0x35	; 53
 2e8:	08 95       	ret
	case 0xde: var_keyPress_u8='2'; break; 
 2ea:	82 e3       	ldi	r24, 0x32	; 50
 2ec:	08 95       	ret
	case 0xb7: var_keyPress_u8='#'; break; 
 2ee:	83 e2       	ldi	r24, 0x23	; 35
 2f0:	08 95       	ret
	case 0xbb: var_keyPress_u8='9'; break; 
 2f2:	89 e3       	ldi	r24, 0x39	; 57
 2f4:	08 95       	ret
	case 0xbd: var_keyPress_u8='6'; break; 
 2f6:	86 e3       	ldi	r24, 0x36	; 54
 2f8:	08 95       	ret
	case 0xbe: var_keyPress_u8='3'; break; 
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	08 95       	ret
	case 0x77: var_keyPress_u8='D'; break;  
 2fe:	84 e4       	ldi	r24, 0x44	; 68
 300:	08 95       	ret
	case 0x7b: var_keyPress_u8='C'; break;  
 302:	83 e4       	ldi	r24, 0x43	; 67
 304:	08 95       	ret
	case 0x7d: var_keyPress_u8='B'; break;  
 306:	82 e4       	ldi	r24, 0x42	; 66
 308:	08 95       	ret
	case 0x7e: var_keyPress_u8='A'; break;  
 30a:	81 e4       	ldi	r24, 0x41	; 65
 30c:	08 95       	ret
	default  : var_keyPress_u8='z'; break;
 30e:	8a e7       	ldi	r24, 0x7A	; 122
 310:	08 95       	ret
	var_keyPress_u8 = keypad_ScanKey();        // Scan for the key pressed.

	switch(var_keyPress_u8)                       // Decode the key
	{
	case 0xe7: var_keyPress_u8='*'; break; 
	case 0xeb: var_keyPress_u8='7'; break; 
 312:	87 e3       	ldi	r24, 0x37	; 55
	case 0x7d: var_keyPress_u8='B'; break;  
	case 0x7e: var_keyPress_u8='A'; break;  
	default  : var_keyPress_u8='z'; break;
	}
	return(var_keyPress_u8);                      // Return the key
}
 314:	08 95       	ret

00000316 <USART_init>:


static void USART_init(uint16_t ubrr) // unsigned int
{
    /* Set baud rate in the USART Baud Rate Registers (UBRR) */
    UBRR0H = (unsigned char) (ubrr >> 8);
 316:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    UBRR0L = (unsigned char) ubrr;
 31a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    
    /* Enable receiver and transmitter on RX0 and TX0 */
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //NOTE: the ATmega328p has 1 UART: 0
 31e:	e1 ec       	ldi	r30, 0xC1	; 193
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	88 61       	ori	r24, 0x18	; 24
 326:	80 83       	st	Z, r24
    
    /* Set frame format: 8 bit data, 2 stop bit */
    UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
 328:	e2 ec       	ldi	r30, 0xC2	; 194
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	8e 60       	ori	r24, 0x0E	; 14
 330:	80 83       	st	Z, r24
 332:	08 95       	ret

00000334 <USART_Transmit>:
    
}
static void USART_Transmit(unsigned char data, FILE *stream)
{
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0)))
 334:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 338:	95 ff       	sbrs	r25, 5
 33a:	fc cf       	rjmp	.-8      	; 0x334 <USART_Transmit>
    {
        ;
    }
    
    /* Put the data into a buffer, then send/transmit the data */
    UDR0 = data;
 33c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 340:	08 95       	ret

00000342 <USART_Receive>:
}
static char USART_Receive(FILE *stream)
{
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0)))
 342:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 346:	85 ff       	sbrs	r24, 5
 348:	fc cf       	rjmp	.-8      	; 0x342 <USART_Receive>
    {
        ;
    }
    
    /* Get the received data from the buffer */
    return UDR0;
 34a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 34e:	08 95       	ret

00000350 <change_password>:


void init_uart(void);

void change_password(char changed_password[], size_t size){
 350:	ac 01       	movw	r20, r24
	// Write data to eeprom
	for (uint16_t address_index = 0; address_index < size; address_index++){
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	11 c0       	rjmp	.+34     	; 0x37a <change_password+0x2a>
		while(EECR & (1 << 1)){/* wait for the previous write operation to end */}
 358:	f9 99       	sbic	0x1f, 1	; 31
 35a:	fe cf       	rjmp	.-4      	; 0x358 <change_password+0x8>
		
		EEAR = address_index;
 35c:	32 bd       	out	0x22, r19	; 34
 35e:	21 bd       	out	0x21, r18	; 33
		EEDR = changed_password[address_index];
 360:	fa 01       	movw	r30, r20
 362:	e2 0f       	add	r30, r18
 364:	f3 1f       	adc	r31, r19
 366:	90 81       	ld	r25, Z
 368:	90 bd       	out	0x20, r25	; 32
		EECR |= (1 << 2); // master programming enable
 36a:	9f b3       	in	r25, 0x1f	; 31
 36c:	94 60       	ori	r25, 0x04	; 4
 36e:	9f bb       	out	0x1f, r25	; 31
		EECR |= (1 << 1); // EEPROM programming enable
 370:	9f b3       	in	r25, 0x1f	; 31
 372:	92 60       	ori	r25, 0x02	; 2
 374:	9f bb       	out	0x1f, r25	; 31

void init_uart(void);

void change_password(char changed_password[], size_t size){
	// Write data to eeprom
	for (uint16_t address_index = 0; address_index < size; address_index++){
 376:	2f 5f       	subi	r18, 0xFF	; 255
 378:	3f 4f       	sbci	r19, 0xFF	; 255
 37a:	26 17       	cp	r18, r22
 37c:	37 07       	cpc	r19, r23
 37e:	60 f3       	brcs	.-40     	; 0x358 <change_password+0x8>
		EEAR = address_index;
		EEDR = changed_password[address_index];
		EECR |= (1 << 2); // master programming enable
		EECR |= (1 << 1); // EEPROM programming enable
	}
}
 380:	08 95       	ret

00000382 <__vector_1>:

//Interrupt for the PIR sensor
ISR(INT0_vect)
{
 382:	1f 92       	push	r1
 384:	0f 92       	push	r0
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	0f 92       	push	r0
 38a:	11 24       	eor	r1, r1
 38c:	8f 93       	push	r24
	// Movement detected
	movementDetected = true;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <movementDetected>
}
 394:	8f 91       	pop	r24
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <main>:
// Setup the stream functions for UART
FILE uart_output = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_Receive, _FDEV_SETUP_READ);

int main(void)
{
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	a5 97       	sbiw	r28, 0x25	; 37
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
	init_uart();
 3b4:	46 d1       	rcall	.+652    	; 0x642 <init_uart>
	KEYPAD_Init();
 3b6:	46 df       	rcall	.-372    	; 0x244 <KEYPAD_Init>
 3b8:	78 94       	sei
	sei();
 3ba:	88 e0       	ldi	r24, 0x08	; 8
	
    /* set MISO as output, pin 12 (PB4)*/
    DDRB  = (1 << PB3);
 3bc:	84 b9       	out	0x04, r24	; 4
 3be:	80 e4       	ldi	r24, 0x40	; 64
    /* set SPI enable */
    SPCR  = (1 << 6);
 3c0:	8c bd       	out	0x2c, r24	; 44
 3c2:	e9 e6       	ldi	r30, 0x69	; 105
	
	EICRA |= (1 << ISC01) | (1 << ISC00); // Trigger INT0 on rising edge
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	83 60       	ori	r24, 0x03	; 3
 3ca:	80 83       	st	Z, r24
 3cc:	8d b3       	in	r24, 0x1d	; 29
	EIMSK |= (1 << INT0); // Enable INT0
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	8d bb       	out	0x1d, r24	; 29
 3d2:	8a b1       	in	r24, 0x0a	; 10
	
	// Set PD7 as input (motion sensor)
	DDRD &= ~(1 << PIR_SENSOR);
 3d4:	8f 77       	andi	r24, 0x7F	; 127
 3d6:	8a b9       	out	0x0a, r24	; 10
 3d8:	87 e6       	ldi	r24, 0x67	; 103
	
    // initialize the UART with 9600 BAUD
    USART_init(MYUBRR);
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	9c df       	rcall	.-200    	; 0x316 <USART_init>
 3de:	e0 ee       	ldi	r30, 0xE0	; 224
        
    // redirect the stdin and stdout to UART functions
    stdout = &uart_output;
 3e0:	f2 e0       	ldi	r31, 0x02	; 2
 3e2:	8e e0       	ldi	r24, 0x0E	; 14
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	93 83       	std	Z+3, r25	; 0x03
 3e8:	82 83       	std	Z+2, r24	; 0x02
 3ea:	80 e0       	ldi	r24, 0x00	; 0
    stdin = &uart_input;
 3ec:	92 e0       	ldi	r25, 0x02	; 2
 3ee:	91 83       	std	Z+1, r25	; 0x01
 3f0:	80 83       	st	Z, r24
 3f2:	85 e0       	ldi	r24, 0x05	; 5
	/* UNO has 1 kB (1023 bytes) of EEPROM memory and MEGA 2560 has 4 kB (4096 B) */
	uint16_t memory_address_max = 32;
	char correct_password[32]; // data read from eeprom
	
	//changing the password can be done here
	char changed_password[] = "6651";
 3f4:	ed eb       	ldi	r30, 0xBD	; 189
 3f6:	f2 e0       	ldi	r31, 0x02	; 2
 3f8:	de 01       	movw	r26, r28
 3fa:	91 96       	adiw	r26, 0x21	; 33
 3fc:	01 90       	ld	r0, Z+
 3fe:	0d 92       	st	X+, r0
 400:	8a 95       	dec	r24
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x5c>
 404:	65 e0       	ldi	r22, 0x05	; 5
	change_password(changed_password, sizeof(changed_password));
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	ce 01       	movw	r24, r28
 40a:	81 96       	adiw	r24, 0x21	; 33
 40c:	a1 df       	rcall	.-190    	; 0x350 <change_password>
 40e:	80 e0       	ldi	r24, 0x00	; 0
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	10 c0       	rjmp	.+32     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 414:	f9 99       	sbic	0x1f, 1	; 31
		while(EECR & (1 << 1)){/*wait for previous write operation to end*/}
 416:	fe cf       	rjmp	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 418:	92 bd       	out	0x22, r25	; 34
		EEAR = address_index;
 41a:	81 bd       	out	0x21, r24	; 33
 41c:	2f b3       	in	r18, 0x1f	; 31
		EECR |=0x01; //enable EEPROM read
 41e:	21 60       	ori	r18, 0x01	; 1
 420:	2f bb       	out	0x1f, r18	; 31
 422:	20 b5       	in	r18, 0x20	; 32
		correct_password[address_index] = EEDR;
 424:	e1 e0       	ldi	r30, 0x01	; 1
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	ec 0f       	add	r30, r28
 42a:	fd 1f       	adc	r31, r29
 42c:	e8 0f       	add	r30, r24
 42e:	f9 1f       	adc	r31, r25
 430:	20 83       	st	Z, r18
 432:	01 96       	adiw	r24, 0x01	; 1
	//changing the password can be done here
	char changed_password[] = "6651";
	change_password(changed_password, sizeof(changed_password));
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 434:	80 32       	cpi	r24, 0x20	; 32
 436:	91 05       	cpc	r25, r1
 438:	68 f3       	brcs	.-38     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 43a:	4f 9b       	sbis	0x09, 7	; 9
		//Correct password -> 333
		//Give password -> 222
		int i = 0;
		
		//Check if movement is detected by the sensor
		if (PIND & (1 << PIR_SENSOR)) {
 43c:	12 c0       	rjmp	.+36     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 43e:	81 e0       	ldi	r24, 0x01	; 1
			movementDetected = true;
 440:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <movementDetected>
			printf("DETECTED MOVEMENT, GIVE PASSWORD\n");
 444:	80 e5       	ldi	r24, 0x50	; 80
 446:	92 e0       	ldi	r25, 0x02	; 2
 448:	3b d1       	rcall	.+630    	; 0x6c0 <puts>
			strcpy(spi_send_data, givePass_code);  // Set the spi_send_data to code 222
 44a:	6c e1       	ldi	r22, 0x1C	; 28
 44c:	72 e0       	ldi	r23, 0x02	; 2
 44e:	8b e2       	ldi	r24, 0x2B	; 43
 450:	92 e0       	ldi	r25, 0x02	; 2
 452:	1c d1       	rcall	.+568    	; 0x68c <strcpy>
			printf(spi_send_data);
 454:	8b e2       	ldi	r24, 0x2B	; 43
 456:	92 e0       	ldi	r25, 0x02	; 2
 458:	9f 93       	push	r25
 45a:	8f 93       	push	r24
 45c:	1e d1       	rcall	.+572    	; 0x69a <printf>
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	80 e0       	ldi	r24, 0x00	; 0
	//changing the password can be done here
	char changed_password[] = "6651";
	change_password(changed_password, sizeof(changed_password));
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 464:	12 c0       	rjmp	.+36     	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 466:	08 2e       	mov	r0, r24
			
		}
		
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
        {
            SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 468:	00 0c       	add	r0, r0
 46a:	99 0b       	sbc	r25, r25
 46c:	fc 01       	movw	r30, r24
 46e:	e5 5d       	subi	r30, 0xD5	; 213
 470:	fd 4f       	sbci	r31, 0xFD	; 253
 472:	30 81       	ld	r19, Z
 474:	3e bd       	out	0x2e, r19	; 46
 476:	0d b4       	in	r0, 0x2d	; 45
            while(!(SPSR & (1 << SPIF))){;}
 478:	07 fe       	sbrs	r0, 7
 47a:	fd cf       	rjmp	.-6      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 47c:	3e b5       	in	r19, 0x2e	; 46
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 47e:	fc 01       	movw	r30, r24
 480:	e6 53       	subi	r30, 0x36	; 54
 482:	fd 4f       	sbci	r31, 0xFD	; 253
 484:	30 83       	st	Z, r19
 486:	81 e0       	ldi	r24, 0x01	; 1
			strcpy(spi_send_data, givePass_code);  // Set the spi_send_data to code 222
			printf(spi_send_data);
			
		}
		
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 488:	82 0f       	add	r24, r18
 48a:	28 2f       	mov	r18, r24
 48c:	85 30       	cpi	r24, 0x05	; 5
 48e:	58 f3       	brcs	.-42     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 490:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <movementDetected>
            while(!(SPSR & (1 << SPIF))){;}
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
        }
		
		
        if(movementDetected == true){
 494:	88 23       	and	r24, r24
 496:	89 f2       	breq	.-94     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 498:	13 c0       	rjmp	.+38     	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 49a:	08 2e       	mov	r0, r24
			
			for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
			{
				SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 49c:	00 0c       	add	r0, r0
 49e:	99 0b       	sbc	r25, r25
 4a0:	fc 01       	movw	r30, r24
 4a2:	e5 5d       	subi	r30, 0xD5	; 213
 4a4:	fd 4f       	sbci	r31, 0xFD	; 253
 4a6:	30 81       	ld	r19, Z
 4a8:	3e bd       	out	0x2e, r19	; 46
 4aa:	0d b4       	in	r0, 0x2d	; 45
				while(!(SPSR & (1 << SPIF))){;}
 4ac:	07 fe       	sbrs	r0, 7
 4ae:	fd cf       	rjmp	.-6      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4b0:	3e b5       	in	r19, 0x2e	; 46
				spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 4b2:	fc 01       	movw	r30, r24
 4b4:	e6 53       	subi	r30, 0x36	; 54
 4b6:	fd 4f       	sbci	r31, 0xFD	; 253
 4b8:	30 83       	st	Z, r19
 4ba:	81 e0       	ldi	r24, 0x01	; 1
        }
		
		
        if(movementDetected == true){
			
			for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 4bc:	82 0f       	add	r24, r18
 4be:	01 c0       	rjmp	.+2      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	28 2f       	mov	r18, r24
 4c4:	85 30       	cpi	r24, 0x05	; 5
 4c6:	48 f3       	brcs	.-46     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 4c8:	e1 2c       	mov	r14, r1
 4ca:	f1 2c       	mov	r15, r1
 4cc:	45 c0       	rjmp	.+138    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
				while(!(SPSR & (1 << SPIF))){;}
				spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
			}
			while(passwordCorrect == false){
				Keypress = KEYPAD_GetKey();
 4ce:	ec de       	rcall	.-552    	; 0x2a8 <KEYPAD_GetKey>
 4d0:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <Keypress>
 4d4:	1f 92       	push	r1
				//turns uint_8 to char
				sprintf(str, "%c", Keypress);
 4d6:	8f 93       	push	r24
 4d8:	81 e7       	ldi	r24, 0x71	; 113
 4da:	92 e0       	ldi	r25, 0x02	; 2
 4dc:	9f 93       	push	r25
 4de:	8f 93       	push	r24
 4e0:	0e ed       	ldi	r16, 0xDE	; 222
 4e2:	12 e0       	ldi	r17, 0x02	; 2
 4e4:	1f 93       	push	r17
 4e6:	0f 93       	push	r16
 4e8:	1b d1       	rcall	.+566    	; 0x720 <sprintf>
 4ea:	f8 01       	movw	r30, r16

				if(str[0] == submit[0]){
 4ec:	80 81       	ld	r24, Z
 4ee:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <submit>
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	89 17       	cp	r24, r25
 500:	81 f1       	breq	.+96     	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 502:	20 91 30 02 	lds	r18, 0x0230	; 0x800230 <backspace>
					break;
				}
				if(str[0] == backspace[0] && i > 0){
 506:	82 13       	cpse	r24, r18
 508:	0b c0       	rjmp	.+22     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 50a:	1e 14       	cp	r1, r14
 50c:	1f 04       	cpc	r1, r15
 50e:	44 f4       	brge	.+16     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 510:	f1 e0       	ldi	r31, 0x01	; 1
					i--;
 512:	ef 1a       	sub	r14, r31
 514:	f1 08       	sbc	r15, r1
 516:	f7 01       	movw	r30, r14
					password[i] = '\0';
 518:	ec 53       	subi	r30, 0x3C	; 60
 51a:	fd 4f       	sbci	r31, 0xFD	; 253
 51c:	10 82       	st	Z, r1
 51e:	0f c0       	rjmp	.+30     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 520:	34 e0       	ldi	r19, 0x04	; 4
				}
				else if(i < 4 && str[0] != backspace[0] && str[0] != submit[0]){
 522:	e3 16       	cp	r14, r19
 524:	f1 04       	cpc	r15, r1
 526:	5c f4       	brge	.+22     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 528:	82 17       	cp	r24, r18
 52a:	49 f0       	breq	.+18     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 52c:	89 17       	cp	r24, r25
 52e:	39 f0       	breq	.+14     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
 530:	f7 01       	movw	r30, r14
					password[i] = str[0];
 532:	ec 53       	subi	r30, 0x3C	; 60
 534:	fd 4f       	sbci	r31, 0xFD	; 253
 536:	80 83       	st	Z, r24
 538:	8f ef       	ldi	r24, 0xFF	; 255
					i++;
 53a:	e8 1a       	sub	r14, r24
 53c:	f8 0a       	sbc	r15, r24
				}
				//Print the password to console for debugging purposes
				printf("\nPaswd: %s\n", password);
 53e:	84 ec       	ldi	r24, 0xC4	; 196
 540:	92 e0       	ldi	r25, 0x02	; 2
 542:	9f 93       	push	r25
 544:	8f 93       	push	r24
 546:	84 e7       	ldi	r24, 0x74	; 116
 548:	92 e0       	ldi	r25, 0x02	; 2
 54a:	9f 93       	push	r25
 54c:	8f 93       	push	r24
 54e:	a5 d0       	rcall	.+330    	; 0x69a <printf>
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <__data_end>
			{
				SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
				while(!(SPSR & (1 << SPIF))){;}
				spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
			}
			while(passwordCorrect == false){
 55c:	88 23       	and	r24, r24
 55e:	09 f4       	brne	.+2      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
 560:	b6 cf       	rjmp	.-148    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
				//Print the password to console for debugging purposes
				printf("\nPaswd: %s\n", password);

			}

			password[4] = '\0';
 562:	e4 ec       	ldi	r30, 0xC4	; 196
 564:	f2 e0       	ldi	r31, 0x02	; 2
 566:	14 82       	std	Z+4, r1	; 0x04
			printf("\nPassword entered: %s\n", password);
 568:	ff 93       	push	r31
 56a:	ef 93       	push	r30
 56c:	80 e8       	ldi	r24, 0x80	; 128
 56e:	92 e0       	ldi	r25, 0x02	; 2
 570:	9f 93       	push	r25
 572:	8f 93       	push	r24
 574:	92 d0       	rcall	.+292    	; 0x69a <printf>
			if (strcmp(correct_password, password) != 0) {
 576:	64 ec       	ldi	r22, 0xC4	; 196
 578:	72 e0       	ldi	r23, 0x02	; 2
 57a:	ce 01       	movw	r24, r28
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	7d d0       	rcall	.+250    	; 0x67a <strcmp>
 580:	0f 90       	pop	r0
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	89 2b       	or	r24, r25
				printf("Incorrect password.\n");
 58a:	39 f1       	breq	.+78     	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
 58c:	87 e9       	ldi	r24, 0x97	; 151
 58e:	92 e0       	ldi	r25, 0x02	; 2
				strcpy(spi_send_data, inCorrect_code);  //Set the data to be sent to be the code for incorrect password
 590:	97 d0       	rcall	.+302    	; 0x6c0 <puts>
 592:	66 e2       	ldi	r22, 0x26	; 38
 594:	72 e0       	ldi	r23, 0x02	; 2
 596:	8b e2       	ldi	r24, 0x2B	; 43
 598:	92 e0       	ldi	r25, 0x02	; 2
 59a:	78 d0       	rcall	.+240    	; 0x68c <strcpy>
				printf(spi_send_data);
 59c:	8b e2       	ldi	r24, 0x2B	; 43
 59e:	92 e0       	ldi	r25, 0x02	; 2
 5a0:	9f 93       	push	r25
 5a2:	8f 93       	push	r24
 5a4:	7a d0       	rcall	.+244    	; 0x69a <printf>
 5a6:	0f 90       	pop	r0
				
				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 5a8:	0f 90       	pop	r0
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	12 c0       	rjmp	.+36     	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
 5ae:	08 2e       	mov	r0, r24
				{
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 5b0:	00 0c       	add	r0, r0
 5b2:	99 0b       	sbc	r25, r25
 5b4:	fc 01       	movw	r30, r24
 5b6:	e5 5d       	subi	r30, 0xD5	; 213
 5b8:	fd 4f       	sbci	r31, 0xFD	; 253
 5ba:	30 81       	ld	r19, Z
 5bc:	3e bd       	out	0x2e, r19	; 46
 5be:	0d b4       	in	r0, 0x2d	; 45
					while(!(SPSR & (1 << SPIF))){;}
 5c0:	07 fe       	sbrs	r0, 7
 5c2:	fd cf       	rjmp	.-6      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 5c4:	3e b5       	in	r19, 0x2e	; 46
 5c6:	fc 01       	movw	r30, r24
 5c8:	e6 53       	subi	r30, 0x36	; 54
 5ca:	fd 4f       	sbci	r31, 0xFD	; 253
			if (strcmp(correct_password, password) != 0) {
				printf("Incorrect password.\n");
				strcpy(spi_send_data, inCorrect_code);  //Set the data to be sent to be the code for incorrect password
				printf(spi_send_data);
				
				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 5cc:	30 83       	st	Z, r19
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	82 0f       	add	r24, r18
 5d2:	28 2f       	mov	r18, r24
 5d4:	85 30       	cpi	r24, 0x05	; 5
 5d6:	58 f3       	brcs	.-42     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
				}
				//passwordCorrect = true;
				
			}else {
				printf("Correct password.\n");
 5d8:	30 cf       	rjmp	.-416    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 5da:	8b ea       	ldi	r24, 0xAB	; 171
 5dc:	92 e0       	ldi	r25, 0x02	; 2
 5de:	70 d0       	rcall	.+224    	; 0x6c0 <puts>
				strcpy(spi_send_data, correct_code); //Set the data to be sent to be the code for correct password
 5e0:	61 e2       	ldi	r22, 0x21	; 33
 5e2:	72 e0       	ldi	r23, 0x02	; 2
 5e4:	8b e2       	ldi	r24, 0x2B	; 43
 5e6:	92 e0       	ldi	r25, 0x02	; 2
 5e8:	51 d0       	rcall	.+162    	; 0x68c <strcpy>
 5ea:	80 e0       	ldi	r24, 0x00	; 0

				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 5ec:	12 c0       	rjmp	.+36     	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
 5ee:	08 2e       	mov	r0, r24
				{
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 5f0:	00 0c       	add	r0, r0
 5f2:	99 0b       	sbc	r25, r25
 5f4:	fc 01       	movw	r30, r24
 5f6:	e5 5d       	subi	r30, 0xD5	; 213
 5f8:	fd 4f       	sbci	r31, 0xFD	; 253
 5fa:	30 81       	ld	r19, Z
 5fc:	3e bd       	out	0x2e, r19	; 46
 5fe:	0d b4       	in	r0, 0x2d	; 45
					while(!(SPSR & (1 << SPIF))){;}
 600:	07 fe       	sbrs	r0, 7
 602:	fd cf       	rjmp	.-6      	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
 604:	3e b5       	in	r19, 0x2e	; 46
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 606:	fc 01       	movw	r30, r24
 608:	e6 53       	subi	r30, 0x36	; 54
 60a:	fd 4f       	sbci	r31, 0xFD	; 253
 60c:	30 83       	st	Z, r19
 60e:	81 e0       	ldi	r24, 0x01	; 1
				
			}else {
				printf("Correct password.\n");
				strcpy(spi_send_data, correct_code); //Set the data to be sent to be the code for correct password

				for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 610:	82 0f       	add	r24, r18
 612:	28 2f       	mov	r18, r24
 614:	85 30       	cpi	r24, 0x05	; 5
 616:	58 f3       	brcs	.-42     	; 0x5ee <__LOCK_REGION_LENGTH__+0x1ee>
 618:	81 e0       	ldi	r24, 0x01	; 1
				{
					SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
					while(!(SPSR & (1 << SPIF))){;}
					spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
				}
				passwordCorrect = true;
 61a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <__data_end>
 61e:	0d cf       	rjmp	.-486    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

00000620 <uart_putchar>:
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
/******************************************************************************
******************************************************************************/
int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 620:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 624:	95 ff       	sbrs	r25, 5
 626:	fc cf       	rjmp	.-8      	; 0x620 <uart_putchar>
	UDR0 = c;
 628:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	return 0;
}
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	08 95       	ret

00000632 <uart_getchar>:
/******************************************************************************
******************************************************************************/
int uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
 632:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 636:	88 23       	and	r24, r24
 638:	e4 f7       	brge	.-8      	; 0x632 <uart_getchar>
	return UDR0;
 63a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	08 95       	ret

00000642 <init_uart>:
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 642:	88 e1       	ldi	r24, 0x18	; 24
 644:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
 648:	87 e6       	ldi	r24, 0x67	; 103
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 650:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	stdout = &mystdout;
 654:	e0 ee       	ldi	r30, 0xE0	; 224
 656:	f2 e0       	ldi	r31, 0x02	; 2
 658:	82 e4       	ldi	r24, 0x42	; 66
 65a:	92 e0       	ldi	r25, 0x02	; 2
 65c:	93 83       	std	Z+3, r25	; 0x03
 65e:	82 83       	std	Z+2, r24	; 0x02
	stdin = &mystdin;
 660:	84 e3       	ldi	r24, 0x34	; 52
 662:	92 e0       	ldi	r25, 0x02	; 2
 664:	91 83       	std	Z+1, r25	; 0x01
 666:	80 83       	st	Z, r24
 668:	08 95       	ret

0000066a <__tablejump2__>:
 66a:	ee 0f       	add	r30, r30
 66c:	ff 1f       	adc	r31, r31
 66e:	88 1f       	adc	r24, r24
 670:	8b bf       	out	0x3b, r24	; 59
 672:	07 90       	elpm	r0, Z+
 674:	f6 91       	elpm	r31, Z
 676:	e0 2d       	mov	r30, r0
 678:	19 94       	eijmp

0000067a <strcmp>:
 67a:	fb 01       	movw	r30, r22
 67c:	dc 01       	movw	r26, r24
 67e:	8d 91       	ld	r24, X+
 680:	01 90       	ld	r0, Z+
 682:	80 19       	sub	r24, r0
 684:	01 10       	cpse	r0, r1
 686:	d9 f3       	breq	.-10     	; 0x67e <strcmp+0x4>
 688:	99 0b       	sbc	r25, r25
 68a:	08 95       	ret

0000068c <strcpy>:
 68c:	fb 01       	movw	r30, r22
 68e:	dc 01       	movw	r26, r24
 690:	01 90       	ld	r0, Z+
 692:	0d 92       	st	X+, r0
 694:	00 20       	and	r0, r0
 696:	e1 f7       	brne	.-8      	; 0x690 <strcpy+0x4>
 698:	08 95       	ret

0000069a <printf>:
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	ae 01       	movw	r20, r28
 6a4:	4a 5f       	subi	r20, 0xFA	; 250
 6a6:	5f 4f       	sbci	r21, 0xFF	; 255
 6a8:	fa 01       	movw	r30, r20
 6aa:	61 91       	ld	r22, Z+
 6ac:	71 91       	ld	r23, Z+
 6ae:	af 01       	movw	r20, r30
 6b0:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__iob+0x2>
 6b4:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <__iob+0x3>
 6b8:	61 d0       	rcall	.+194    	; 0x77c <vfprintf>
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	08 95       	ret

000006c0 <puts>:
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	e0 91 e2 02 	lds	r30, 0x02E2	; 0x8002e2 <__iob+0x2>
 6cc:	f0 91 e3 02 	lds	r31, 0x02E3	; 0x8002e3 <__iob+0x3>
 6d0:	23 81       	ldd	r18, Z+3	; 0x03
 6d2:	21 ff       	sbrs	r18, 1
 6d4:	1b c0       	rjmp	.+54     	; 0x70c <puts+0x4c>
 6d6:	8c 01       	movw	r16, r24
 6d8:	d0 e0       	ldi	r29, 0x00	; 0
 6da:	c0 e0       	ldi	r28, 0x00	; 0
 6dc:	f8 01       	movw	r30, r16
 6de:	81 91       	ld	r24, Z+
 6e0:	8f 01       	movw	r16, r30
 6e2:	60 91 e2 02 	lds	r22, 0x02E2	; 0x8002e2 <__iob+0x2>
 6e6:	70 91 e3 02 	lds	r23, 0x02E3	; 0x8002e3 <__iob+0x3>
 6ea:	db 01       	movw	r26, r22
 6ec:	18 96       	adiw	r26, 0x08	; 8
 6ee:	ed 91       	ld	r30, X+
 6f0:	fc 91       	ld	r31, X
 6f2:	19 97       	sbiw	r26, 0x09	; 9
 6f4:	88 23       	and	r24, r24
 6f6:	31 f0       	breq	.+12     	; 0x704 <puts+0x44>
 6f8:	19 95       	eicall
 6fa:	89 2b       	or	r24, r25
 6fc:	79 f3       	breq	.-34     	; 0x6dc <puts+0x1c>
 6fe:	df ef       	ldi	r29, 0xFF	; 255
 700:	cf ef       	ldi	r28, 0xFF	; 255
 702:	ec cf       	rjmp	.-40     	; 0x6dc <puts+0x1c>
 704:	8a e0       	ldi	r24, 0x0A	; 10
 706:	19 95       	eicall
 708:	89 2b       	or	r24, r25
 70a:	19 f0       	breq	.+6      	; 0x712 <puts+0x52>
 70c:	8f ef       	ldi	r24, 0xFF	; 255
 70e:	9f ef       	ldi	r25, 0xFF	; 255
 710:	02 c0       	rjmp	.+4      	; 0x716 <puts+0x56>
 712:	8d 2f       	mov	r24, r29
 714:	9c 2f       	mov	r25, r28
 716:	df 91       	pop	r29
 718:	cf 91       	pop	r28
 71a:	1f 91       	pop	r17
 71c:	0f 91       	pop	r16
 71e:	08 95       	ret

00000720 <sprintf>:
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	cd b7       	in	r28, 0x3d	; 61
 72a:	de b7       	in	r29, 0x3e	; 62
 72c:	2e 97       	sbiw	r28, 0x0e	; 14
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	de bf       	out	0x3e, r29	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	cd bf       	out	0x3d, r28	; 61
 738:	0e 89       	ldd	r16, Y+22	; 0x16
 73a:	1f 89       	ldd	r17, Y+23	; 0x17
 73c:	86 e0       	ldi	r24, 0x06	; 6
 73e:	8c 83       	std	Y+4, r24	; 0x04
 740:	1a 83       	std	Y+2, r17	; 0x02
 742:	09 83       	std	Y+1, r16	; 0x01
 744:	8f ef       	ldi	r24, 0xFF	; 255
 746:	9f e7       	ldi	r25, 0x7F	; 127
 748:	9e 83       	std	Y+6, r25	; 0x06
 74a:	8d 83       	std	Y+5, r24	; 0x05
 74c:	ae 01       	movw	r20, r28
 74e:	46 5e       	subi	r20, 0xE6	; 230
 750:	5f 4f       	sbci	r21, 0xFF	; 255
 752:	68 8d       	ldd	r22, Y+24	; 0x18
 754:	79 8d       	ldd	r23, Y+25	; 0x19
 756:	ce 01       	movw	r24, r28
 758:	01 96       	adiw	r24, 0x01	; 1
 75a:	10 d0       	rcall	.+32     	; 0x77c <vfprintf>
 75c:	ef 81       	ldd	r30, Y+7	; 0x07
 75e:	f8 85       	ldd	r31, Y+8	; 0x08
 760:	e0 0f       	add	r30, r16
 762:	f1 1f       	adc	r31, r17
 764:	10 82       	st	Z, r1
 766:	2e 96       	adiw	r28, 0x0e	; 14
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	f8 94       	cli
 76c:	de bf       	out	0x3e, r29	; 62
 76e:	0f be       	out	0x3f, r0	; 63
 770:	cd bf       	out	0x3d, r28	; 61
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	0f 91       	pop	r16
 77a:	08 95       	ret

0000077c <vfprintf>:
 77c:	2f 92       	push	r2
 77e:	3f 92       	push	r3
 780:	4f 92       	push	r4
 782:	5f 92       	push	r5
 784:	6f 92       	push	r6
 786:	7f 92       	push	r7
 788:	8f 92       	push	r8
 78a:	9f 92       	push	r9
 78c:	af 92       	push	r10
 78e:	bf 92       	push	r11
 790:	cf 92       	push	r12
 792:	df 92       	push	r13
 794:	ef 92       	push	r14
 796:	ff 92       	push	r15
 798:	0f 93       	push	r16
 79a:	1f 93       	push	r17
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	cd b7       	in	r28, 0x3d	; 61
 7a2:	de b7       	in	r29, 0x3e	; 62
 7a4:	2b 97       	sbiw	r28, 0x0b	; 11
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	f8 94       	cli
 7aa:	de bf       	out	0x3e, r29	; 62
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	cd bf       	out	0x3d, r28	; 61
 7b0:	6c 01       	movw	r12, r24
 7b2:	7b 01       	movw	r14, r22
 7b4:	8a 01       	movw	r16, r20
 7b6:	fc 01       	movw	r30, r24
 7b8:	17 82       	std	Z+7, r1	; 0x07
 7ba:	16 82       	std	Z+6, r1	; 0x06
 7bc:	83 81       	ldd	r24, Z+3	; 0x03
 7be:	81 ff       	sbrs	r24, 1
 7c0:	bf c1       	rjmp	.+894    	; 0xb40 <vfprintf+0x3c4>
 7c2:	ce 01       	movw	r24, r28
 7c4:	01 96       	adiw	r24, 0x01	; 1
 7c6:	3c 01       	movw	r6, r24
 7c8:	f6 01       	movw	r30, r12
 7ca:	93 81       	ldd	r25, Z+3	; 0x03
 7cc:	f7 01       	movw	r30, r14
 7ce:	93 fd       	sbrc	r25, 3
 7d0:	85 91       	lpm	r24, Z+
 7d2:	93 ff       	sbrs	r25, 3
 7d4:	81 91       	ld	r24, Z+
 7d6:	7f 01       	movw	r14, r30
 7d8:	88 23       	and	r24, r24
 7da:	09 f4       	brne	.+2      	; 0x7de <vfprintf+0x62>
 7dc:	ad c1       	rjmp	.+858    	; 0xb38 <vfprintf+0x3bc>
 7de:	85 32       	cpi	r24, 0x25	; 37
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <vfprintf+0x74>
 7e2:	93 fd       	sbrc	r25, 3
 7e4:	85 91       	lpm	r24, Z+
 7e6:	93 ff       	sbrs	r25, 3
 7e8:	81 91       	ld	r24, Z+
 7ea:	7f 01       	movw	r14, r30
 7ec:	85 32       	cpi	r24, 0x25	; 37
 7ee:	21 f4       	brne	.+8      	; 0x7f8 <vfprintf+0x7c>
 7f0:	b6 01       	movw	r22, r12
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	d6 d1       	rcall	.+940    	; 0xba2 <fputc>
 7f6:	e8 cf       	rjmp	.-48     	; 0x7c8 <vfprintf+0x4c>
 7f8:	91 2c       	mov	r9, r1
 7fa:	21 2c       	mov	r2, r1
 7fc:	31 2c       	mov	r3, r1
 7fe:	ff e1       	ldi	r31, 0x1F	; 31
 800:	f3 15       	cp	r31, r3
 802:	d8 f0       	brcs	.+54     	; 0x83a <vfprintf+0xbe>
 804:	8b 32       	cpi	r24, 0x2B	; 43
 806:	79 f0       	breq	.+30     	; 0x826 <vfprintf+0xaa>
 808:	38 f4       	brcc	.+14     	; 0x818 <vfprintf+0x9c>
 80a:	80 32       	cpi	r24, 0x20	; 32
 80c:	79 f0       	breq	.+30     	; 0x82c <vfprintf+0xb0>
 80e:	83 32       	cpi	r24, 0x23	; 35
 810:	a1 f4       	brne	.+40     	; 0x83a <vfprintf+0xbe>
 812:	23 2d       	mov	r18, r3
 814:	20 61       	ori	r18, 0x10	; 16
 816:	1d c0       	rjmp	.+58     	; 0x852 <vfprintf+0xd6>
 818:	8d 32       	cpi	r24, 0x2D	; 45
 81a:	61 f0       	breq	.+24     	; 0x834 <vfprintf+0xb8>
 81c:	80 33       	cpi	r24, 0x30	; 48
 81e:	69 f4       	brne	.+26     	; 0x83a <vfprintf+0xbe>
 820:	23 2d       	mov	r18, r3
 822:	21 60       	ori	r18, 0x01	; 1
 824:	16 c0       	rjmp	.+44     	; 0x852 <vfprintf+0xd6>
 826:	83 2d       	mov	r24, r3
 828:	82 60       	ori	r24, 0x02	; 2
 82a:	38 2e       	mov	r3, r24
 82c:	e3 2d       	mov	r30, r3
 82e:	e4 60       	ori	r30, 0x04	; 4
 830:	3e 2e       	mov	r3, r30
 832:	2a c0       	rjmp	.+84     	; 0x888 <vfprintf+0x10c>
 834:	f3 2d       	mov	r31, r3
 836:	f8 60       	ori	r31, 0x08	; 8
 838:	1d c0       	rjmp	.+58     	; 0x874 <vfprintf+0xf8>
 83a:	37 fc       	sbrc	r3, 7
 83c:	2d c0       	rjmp	.+90     	; 0x898 <vfprintf+0x11c>
 83e:	20 ed       	ldi	r18, 0xD0	; 208
 840:	28 0f       	add	r18, r24
 842:	2a 30       	cpi	r18, 0x0A	; 10
 844:	40 f0       	brcs	.+16     	; 0x856 <vfprintf+0xda>
 846:	8e 32       	cpi	r24, 0x2E	; 46
 848:	b9 f4       	brne	.+46     	; 0x878 <vfprintf+0xfc>
 84a:	36 fc       	sbrc	r3, 6
 84c:	75 c1       	rjmp	.+746    	; 0xb38 <vfprintf+0x3bc>
 84e:	23 2d       	mov	r18, r3
 850:	20 64       	ori	r18, 0x40	; 64
 852:	32 2e       	mov	r3, r18
 854:	19 c0       	rjmp	.+50     	; 0x888 <vfprintf+0x10c>
 856:	36 fe       	sbrs	r3, 6
 858:	06 c0       	rjmp	.+12     	; 0x866 <vfprintf+0xea>
 85a:	8a e0       	ldi	r24, 0x0A	; 10
 85c:	98 9e       	mul	r9, r24
 85e:	20 0d       	add	r18, r0
 860:	11 24       	eor	r1, r1
 862:	92 2e       	mov	r9, r18
 864:	11 c0       	rjmp	.+34     	; 0x888 <vfprintf+0x10c>
 866:	ea e0       	ldi	r30, 0x0A	; 10
 868:	2e 9e       	mul	r2, r30
 86a:	20 0d       	add	r18, r0
 86c:	11 24       	eor	r1, r1
 86e:	22 2e       	mov	r2, r18
 870:	f3 2d       	mov	r31, r3
 872:	f0 62       	ori	r31, 0x20	; 32
 874:	3f 2e       	mov	r3, r31
 876:	08 c0       	rjmp	.+16     	; 0x888 <vfprintf+0x10c>
 878:	8c 36       	cpi	r24, 0x6C	; 108
 87a:	21 f4       	brne	.+8      	; 0x884 <vfprintf+0x108>
 87c:	83 2d       	mov	r24, r3
 87e:	80 68       	ori	r24, 0x80	; 128
 880:	38 2e       	mov	r3, r24
 882:	02 c0       	rjmp	.+4      	; 0x888 <vfprintf+0x10c>
 884:	88 36       	cpi	r24, 0x68	; 104
 886:	41 f4       	brne	.+16     	; 0x898 <vfprintf+0x11c>
 888:	f7 01       	movw	r30, r14
 88a:	93 fd       	sbrc	r25, 3
 88c:	85 91       	lpm	r24, Z+
 88e:	93 ff       	sbrs	r25, 3
 890:	81 91       	ld	r24, Z+
 892:	7f 01       	movw	r14, r30
 894:	81 11       	cpse	r24, r1
 896:	b3 cf       	rjmp	.-154    	; 0x7fe <vfprintf+0x82>
 898:	98 2f       	mov	r25, r24
 89a:	9f 7d       	andi	r25, 0xDF	; 223
 89c:	95 54       	subi	r25, 0x45	; 69
 89e:	93 30       	cpi	r25, 0x03	; 3
 8a0:	28 f4       	brcc	.+10     	; 0x8ac <vfprintf+0x130>
 8a2:	0c 5f       	subi	r16, 0xFC	; 252
 8a4:	1f 4f       	sbci	r17, 0xFF	; 255
 8a6:	9f e3       	ldi	r25, 0x3F	; 63
 8a8:	99 83       	std	Y+1, r25	; 0x01
 8aa:	0d c0       	rjmp	.+26     	; 0x8c6 <vfprintf+0x14a>
 8ac:	83 36       	cpi	r24, 0x63	; 99
 8ae:	31 f0       	breq	.+12     	; 0x8bc <vfprintf+0x140>
 8b0:	83 37       	cpi	r24, 0x73	; 115
 8b2:	71 f0       	breq	.+28     	; 0x8d0 <vfprintf+0x154>
 8b4:	83 35       	cpi	r24, 0x53	; 83
 8b6:	09 f0       	breq	.+2      	; 0x8ba <vfprintf+0x13e>
 8b8:	55 c0       	rjmp	.+170    	; 0x964 <vfprintf+0x1e8>
 8ba:	20 c0       	rjmp	.+64     	; 0x8fc <vfprintf+0x180>
 8bc:	f8 01       	movw	r30, r16
 8be:	80 81       	ld	r24, Z
 8c0:	89 83       	std	Y+1, r24	; 0x01
 8c2:	0e 5f       	subi	r16, 0xFE	; 254
 8c4:	1f 4f       	sbci	r17, 0xFF	; 255
 8c6:	88 24       	eor	r8, r8
 8c8:	83 94       	inc	r8
 8ca:	91 2c       	mov	r9, r1
 8cc:	53 01       	movw	r10, r6
 8ce:	12 c0       	rjmp	.+36     	; 0x8f4 <vfprintf+0x178>
 8d0:	28 01       	movw	r4, r16
 8d2:	f2 e0       	ldi	r31, 0x02	; 2
 8d4:	4f 0e       	add	r4, r31
 8d6:	51 1c       	adc	r5, r1
 8d8:	f8 01       	movw	r30, r16
 8da:	a0 80       	ld	r10, Z
 8dc:	b1 80       	ldd	r11, Z+1	; 0x01
 8de:	36 fe       	sbrs	r3, 6
 8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <vfprintf+0x16c>
 8e2:	69 2d       	mov	r22, r9
 8e4:	70 e0       	ldi	r23, 0x00	; 0
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <vfprintf+0x170>
 8e8:	6f ef       	ldi	r22, 0xFF	; 255
 8ea:	7f ef       	ldi	r23, 0xFF	; 255
 8ec:	c5 01       	movw	r24, r10
 8ee:	4e d1       	rcall	.+668    	; 0xb8c <strnlen>
 8f0:	4c 01       	movw	r8, r24
 8f2:	82 01       	movw	r16, r4
 8f4:	f3 2d       	mov	r31, r3
 8f6:	ff 77       	andi	r31, 0x7F	; 127
 8f8:	3f 2e       	mov	r3, r31
 8fa:	15 c0       	rjmp	.+42     	; 0x926 <vfprintf+0x1aa>
 8fc:	28 01       	movw	r4, r16
 8fe:	22 e0       	ldi	r18, 0x02	; 2
 900:	42 0e       	add	r4, r18
 902:	51 1c       	adc	r5, r1
 904:	f8 01       	movw	r30, r16
 906:	a0 80       	ld	r10, Z
 908:	b1 80       	ldd	r11, Z+1	; 0x01
 90a:	36 fe       	sbrs	r3, 6
 90c:	03 c0       	rjmp	.+6      	; 0x914 <vfprintf+0x198>
 90e:	69 2d       	mov	r22, r9
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	02 c0       	rjmp	.+4      	; 0x918 <vfprintf+0x19c>
 914:	6f ef       	ldi	r22, 0xFF	; 255
 916:	7f ef       	ldi	r23, 0xFF	; 255
 918:	c5 01       	movw	r24, r10
 91a:	2d d1       	rcall	.+602    	; 0xb76 <strnlen_P>
 91c:	4c 01       	movw	r8, r24
 91e:	f3 2d       	mov	r31, r3
 920:	f0 68       	ori	r31, 0x80	; 128
 922:	3f 2e       	mov	r3, r31
 924:	82 01       	movw	r16, r4
 926:	33 fc       	sbrc	r3, 3
 928:	19 c0       	rjmp	.+50     	; 0x95c <vfprintf+0x1e0>
 92a:	82 2d       	mov	r24, r2
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	88 16       	cp	r8, r24
 930:	99 06       	cpc	r9, r25
 932:	a0 f4       	brcc	.+40     	; 0x95c <vfprintf+0x1e0>
 934:	b6 01       	movw	r22, r12
 936:	80 e2       	ldi	r24, 0x20	; 32
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	33 d1       	rcall	.+614    	; 0xba2 <fputc>
 93c:	2a 94       	dec	r2
 93e:	f5 cf       	rjmp	.-22     	; 0x92a <vfprintf+0x1ae>
 940:	f5 01       	movw	r30, r10
 942:	37 fc       	sbrc	r3, 7
 944:	85 91       	lpm	r24, Z+
 946:	37 fe       	sbrs	r3, 7
 948:	81 91       	ld	r24, Z+
 94a:	5f 01       	movw	r10, r30
 94c:	b6 01       	movw	r22, r12
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	28 d1       	rcall	.+592    	; 0xba2 <fputc>
 952:	21 10       	cpse	r2, r1
 954:	2a 94       	dec	r2
 956:	21 e0       	ldi	r18, 0x01	; 1
 958:	82 1a       	sub	r8, r18
 95a:	91 08       	sbc	r9, r1
 95c:	81 14       	cp	r8, r1
 95e:	91 04       	cpc	r9, r1
 960:	79 f7       	brne	.-34     	; 0x940 <vfprintf+0x1c4>
 962:	e1 c0       	rjmp	.+450    	; 0xb26 <vfprintf+0x3aa>
 964:	84 36       	cpi	r24, 0x64	; 100
 966:	11 f0       	breq	.+4      	; 0x96c <vfprintf+0x1f0>
 968:	89 36       	cpi	r24, 0x69	; 105
 96a:	39 f5       	brne	.+78     	; 0x9ba <vfprintf+0x23e>
 96c:	f8 01       	movw	r30, r16
 96e:	37 fe       	sbrs	r3, 7
 970:	07 c0       	rjmp	.+14     	; 0x980 <vfprintf+0x204>
 972:	60 81       	ld	r22, Z
 974:	71 81       	ldd	r23, Z+1	; 0x01
 976:	82 81       	ldd	r24, Z+2	; 0x02
 978:	93 81       	ldd	r25, Z+3	; 0x03
 97a:	0c 5f       	subi	r16, 0xFC	; 252
 97c:	1f 4f       	sbci	r17, 0xFF	; 255
 97e:	08 c0       	rjmp	.+16     	; 0x990 <vfprintf+0x214>
 980:	60 81       	ld	r22, Z
 982:	71 81       	ldd	r23, Z+1	; 0x01
 984:	07 2e       	mov	r0, r23
 986:	00 0c       	add	r0, r0
 988:	88 0b       	sbc	r24, r24
 98a:	99 0b       	sbc	r25, r25
 98c:	0e 5f       	subi	r16, 0xFE	; 254
 98e:	1f 4f       	sbci	r17, 0xFF	; 255
 990:	f3 2d       	mov	r31, r3
 992:	ff 76       	andi	r31, 0x6F	; 111
 994:	3f 2e       	mov	r3, r31
 996:	97 ff       	sbrs	r25, 7
 998:	09 c0       	rjmp	.+18     	; 0x9ac <vfprintf+0x230>
 99a:	90 95       	com	r25
 99c:	80 95       	com	r24
 99e:	70 95       	com	r23
 9a0:	61 95       	neg	r22
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255
 9a4:	8f 4f       	sbci	r24, 0xFF	; 255
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	f0 68       	ori	r31, 0x80	; 128
 9aa:	3f 2e       	mov	r3, r31
 9ac:	2a e0       	ldi	r18, 0x0A	; 10
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	a3 01       	movw	r20, r6
 9b2:	33 d1       	rcall	.+614    	; 0xc1a <__ultoa_invert>
 9b4:	88 2e       	mov	r8, r24
 9b6:	86 18       	sub	r8, r6
 9b8:	44 c0       	rjmp	.+136    	; 0xa42 <vfprintf+0x2c6>
 9ba:	85 37       	cpi	r24, 0x75	; 117
 9bc:	31 f4       	brne	.+12     	; 0x9ca <vfprintf+0x24e>
 9be:	23 2d       	mov	r18, r3
 9c0:	2f 7e       	andi	r18, 0xEF	; 239
 9c2:	b2 2e       	mov	r11, r18
 9c4:	2a e0       	ldi	r18, 0x0A	; 10
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	25 c0       	rjmp	.+74     	; 0xa14 <vfprintf+0x298>
 9ca:	93 2d       	mov	r25, r3
 9cc:	99 7f       	andi	r25, 0xF9	; 249
 9ce:	b9 2e       	mov	r11, r25
 9d0:	8f 36       	cpi	r24, 0x6F	; 111
 9d2:	c1 f0       	breq	.+48     	; 0xa04 <vfprintf+0x288>
 9d4:	18 f4       	brcc	.+6      	; 0x9dc <vfprintf+0x260>
 9d6:	88 35       	cpi	r24, 0x58	; 88
 9d8:	79 f0       	breq	.+30     	; 0x9f8 <vfprintf+0x27c>
 9da:	ae c0       	rjmp	.+348    	; 0xb38 <vfprintf+0x3bc>
 9dc:	80 37       	cpi	r24, 0x70	; 112
 9de:	19 f0       	breq	.+6      	; 0x9e6 <vfprintf+0x26a>
 9e0:	88 37       	cpi	r24, 0x78	; 120
 9e2:	21 f0       	breq	.+8      	; 0x9ec <vfprintf+0x270>
 9e4:	a9 c0       	rjmp	.+338    	; 0xb38 <vfprintf+0x3bc>
 9e6:	e9 2f       	mov	r30, r25
 9e8:	e0 61       	ori	r30, 0x10	; 16
 9ea:	be 2e       	mov	r11, r30
 9ec:	b4 fe       	sbrs	r11, 4
 9ee:	0d c0       	rjmp	.+26     	; 0xa0a <vfprintf+0x28e>
 9f0:	fb 2d       	mov	r31, r11
 9f2:	f4 60       	ori	r31, 0x04	; 4
 9f4:	bf 2e       	mov	r11, r31
 9f6:	09 c0       	rjmp	.+18     	; 0xa0a <vfprintf+0x28e>
 9f8:	34 fe       	sbrs	r3, 4
 9fa:	0a c0       	rjmp	.+20     	; 0xa10 <vfprintf+0x294>
 9fc:	29 2f       	mov	r18, r25
 9fe:	26 60       	ori	r18, 0x06	; 6
 a00:	b2 2e       	mov	r11, r18
 a02:	06 c0       	rjmp	.+12     	; 0xa10 <vfprintf+0x294>
 a04:	28 e0       	ldi	r18, 0x08	; 8
 a06:	30 e0       	ldi	r19, 0x00	; 0
 a08:	05 c0       	rjmp	.+10     	; 0xa14 <vfprintf+0x298>
 a0a:	20 e1       	ldi	r18, 0x10	; 16
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	02 c0       	rjmp	.+4      	; 0xa14 <vfprintf+0x298>
 a10:	20 e1       	ldi	r18, 0x10	; 16
 a12:	32 e0       	ldi	r19, 0x02	; 2
 a14:	f8 01       	movw	r30, r16
 a16:	b7 fe       	sbrs	r11, 7
 a18:	07 c0       	rjmp	.+14     	; 0xa28 <vfprintf+0x2ac>
 a1a:	60 81       	ld	r22, Z
 a1c:	71 81       	ldd	r23, Z+1	; 0x01
 a1e:	82 81       	ldd	r24, Z+2	; 0x02
 a20:	93 81       	ldd	r25, Z+3	; 0x03
 a22:	0c 5f       	subi	r16, 0xFC	; 252
 a24:	1f 4f       	sbci	r17, 0xFF	; 255
 a26:	06 c0       	rjmp	.+12     	; 0xa34 <vfprintf+0x2b8>
 a28:	60 81       	ld	r22, Z
 a2a:	71 81       	ldd	r23, Z+1	; 0x01
 a2c:	80 e0       	ldi	r24, 0x00	; 0
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 5f       	subi	r16, 0xFE	; 254
 a32:	1f 4f       	sbci	r17, 0xFF	; 255
 a34:	a3 01       	movw	r20, r6
 a36:	f1 d0       	rcall	.+482    	; 0xc1a <__ultoa_invert>
 a38:	88 2e       	mov	r8, r24
 a3a:	86 18       	sub	r8, r6
 a3c:	fb 2d       	mov	r31, r11
 a3e:	ff 77       	andi	r31, 0x7F	; 127
 a40:	3f 2e       	mov	r3, r31
 a42:	36 fe       	sbrs	r3, 6
 a44:	0d c0       	rjmp	.+26     	; 0xa60 <vfprintf+0x2e4>
 a46:	23 2d       	mov	r18, r3
 a48:	2e 7f       	andi	r18, 0xFE	; 254
 a4a:	a2 2e       	mov	r10, r18
 a4c:	89 14       	cp	r8, r9
 a4e:	58 f4       	brcc	.+22     	; 0xa66 <vfprintf+0x2ea>
 a50:	34 fe       	sbrs	r3, 4
 a52:	0b c0       	rjmp	.+22     	; 0xa6a <vfprintf+0x2ee>
 a54:	32 fc       	sbrc	r3, 2
 a56:	09 c0       	rjmp	.+18     	; 0xa6a <vfprintf+0x2ee>
 a58:	83 2d       	mov	r24, r3
 a5a:	8e 7e       	andi	r24, 0xEE	; 238
 a5c:	a8 2e       	mov	r10, r24
 a5e:	05 c0       	rjmp	.+10     	; 0xa6a <vfprintf+0x2ee>
 a60:	b8 2c       	mov	r11, r8
 a62:	a3 2c       	mov	r10, r3
 a64:	03 c0       	rjmp	.+6      	; 0xa6c <vfprintf+0x2f0>
 a66:	b8 2c       	mov	r11, r8
 a68:	01 c0       	rjmp	.+2      	; 0xa6c <vfprintf+0x2f0>
 a6a:	b9 2c       	mov	r11, r9
 a6c:	a4 fe       	sbrs	r10, 4
 a6e:	0f c0       	rjmp	.+30     	; 0xa8e <vfprintf+0x312>
 a70:	fe 01       	movw	r30, r28
 a72:	e8 0d       	add	r30, r8
 a74:	f1 1d       	adc	r31, r1
 a76:	80 81       	ld	r24, Z
 a78:	80 33       	cpi	r24, 0x30	; 48
 a7a:	21 f4       	brne	.+8      	; 0xa84 <vfprintf+0x308>
 a7c:	9a 2d       	mov	r25, r10
 a7e:	99 7e       	andi	r25, 0xE9	; 233
 a80:	a9 2e       	mov	r10, r25
 a82:	09 c0       	rjmp	.+18     	; 0xa96 <vfprintf+0x31a>
 a84:	a2 fe       	sbrs	r10, 2
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <vfprintf+0x318>
 a88:	b3 94       	inc	r11
 a8a:	b3 94       	inc	r11
 a8c:	04 c0       	rjmp	.+8      	; 0xa96 <vfprintf+0x31a>
 a8e:	8a 2d       	mov	r24, r10
 a90:	86 78       	andi	r24, 0x86	; 134
 a92:	09 f0       	breq	.+2      	; 0xa96 <vfprintf+0x31a>
 a94:	b3 94       	inc	r11
 a96:	a3 fc       	sbrc	r10, 3
 a98:	10 c0       	rjmp	.+32     	; 0xaba <vfprintf+0x33e>
 a9a:	a0 fe       	sbrs	r10, 0
 a9c:	06 c0       	rjmp	.+12     	; 0xaaa <vfprintf+0x32e>
 a9e:	b2 14       	cp	r11, r2
 aa0:	80 f4       	brcc	.+32     	; 0xac2 <vfprintf+0x346>
 aa2:	28 0c       	add	r2, r8
 aa4:	92 2c       	mov	r9, r2
 aa6:	9b 18       	sub	r9, r11
 aa8:	0d c0       	rjmp	.+26     	; 0xac4 <vfprintf+0x348>
 aaa:	b2 14       	cp	r11, r2
 aac:	58 f4       	brcc	.+22     	; 0xac4 <vfprintf+0x348>
 aae:	b6 01       	movw	r22, r12
 ab0:	80 e2       	ldi	r24, 0x20	; 32
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	76 d0       	rcall	.+236    	; 0xba2 <fputc>
 ab6:	b3 94       	inc	r11
 ab8:	f8 cf       	rjmp	.-16     	; 0xaaa <vfprintf+0x32e>
 aba:	b2 14       	cp	r11, r2
 abc:	18 f4       	brcc	.+6      	; 0xac4 <vfprintf+0x348>
 abe:	2b 18       	sub	r2, r11
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <vfprintf+0x34a>
 ac2:	98 2c       	mov	r9, r8
 ac4:	21 2c       	mov	r2, r1
 ac6:	a4 fe       	sbrs	r10, 4
 ac8:	0f c0       	rjmp	.+30     	; 0xae8 <vfprintf+0x36c>
 aca:	b6 01       	movw	r22, r12
 acc:	80 e3       	ldi	r24, 0x30	; 48
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	68 d0       	rcall	.+208    	; 0xba2 <fputc>
 ad2:	a2 fe       	sbrs	r10, 2
 ad4:	16 c0       	rjmp	.+44     	; 0xb02 <vfprintf+0x386>
 ad6:	a1 fc       	sbrc	r10, 1
 ad8:	03 c0       	rjmp	.+6      	; 0xae0 <vfprintf+0x364>
 ada:	88 e7       	ldi	r24, 0x78	; 120
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	02 c0       	rjmp	.+4      	; 0xae4 <vfprintf+0x368>
 ae0:	88 e5       	ldi	r24, 0x58	; 88
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	b6 01       	movw	r22, r12
 ae6:	0c c0       	rjmp	.+24     	; 0xb00 <vfprintf+0x384>
 ae8:	8a 2d       	mov	r24, r10
 aea:	86 78       	andi	r24, 0x86	; 134
 aec:	51 f0       	breq	.+20     	; 0xb02 <vfprintf+0x386>
 aee:	a1 fe       	sbrs	r10, 1
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <vfprintf+0x37a>
 af2:	8b e2       	ldi	r24, 0x2B	; 43
 af4:	01 c0       	rjmp	.+2      	; 0xaf8 <vfprintf+0x37c>
 af6:	80 e2       	ldi	r24, 0x20	; 32
 af8:	a7 fc       	sbrc	r10, 7
 afa:	8d e2       	ldi	r24, 0x2D	; 45
 afc:	b6 01       	movw	r22, r12
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	50 d0       	rcall	.+160    	; 0xba2 <fputc>
 b02:	89 14       	cp	r8, r9
 b04:	30 f4       	brcc	.+12     	; 0xb12 <vfprintf+0x396>
 b06:	b6 01       	movw	r22, r12
 b08:	80 e3       	ldi	r24, 0x30	; 48
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	4a d0       	rcall	.+148    	; 0xba2 <fputc>
 b0e:	9a 94       	dec	r9
 b10:	f8 cf       	rjmp	.-16     	; 0xb02 <vfprintf+0x386>
 b12:	8a 94       	dec	r8
 b14:	f3 01       	movw	r30, r6
 b16:	e8 0d       	add	r30, r8
 b18:	f1 1d       	adc	r31, r1
 b1a:	80 81       	ld	r24, Z
 b1c:	b6 01       	movw	r22, r12
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	40 d0       	rcall	.+128    	; 0xba2 <fputc>
 b22:	81 10       	cpse	r8, r1
 b24:	f6 cf       	rjmp	.-20     	; 0xb12 <vfprintf+0x396>
 b26:	22 20       	and	r2, r2
 b28:	09 f4       	brne	.+2      	; 0xb2c <vfprintf+0x3b0>
 b2a:	4e ce       	rjmp	.-868    	; 0x7c8 <vfprintf+0x4c>
 b2c:	b6 01       	movw	r22, r12
 b2e:	80 e2       	ldi	r24, 0x20	; 32
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	37 d0       	rcall	.+110    	; 0xba2 <fputc>
 b34:	2a 94       	dec	r2
 b36:	f7 cf       	rjmp	.-18     	; 0xb26 <vfprintf+0x3aa>
 b38:	f6 01       	movw	r30, r12
 b3a:	86 81       	ldd	r24, Z+6	; 0x06
 b3c:	97 81       	ldd	r25, Z+7	; 0x07
 b3e:	02 c0       	rjmp	.+4      	; 0xb44 <vfprintf+0x3c8>
 b40:	8f ef       	ldi	r24, 0xFF	; 255
 b42:	9f ef       	ldi	r25, 0xFF	; 255
 b44:	2b 96       	adiw	r28, 0x0b	; 11
 b46:	0f b6       	in	r0, 0x3f	; 63
 b48:	f8 94       	cli
 b4a:	de bf       	out	0x3e, r29	; 62
 b4c:	0f be       	out	0x3f, r0	; 63
 b4e:	cd bf       	out	0x3d, r28	; 61
 b50:	df 91       	pop	r29
 b52:	cf 91       	pop	r28
 b54:	1f 91       	pop	r17
 b56:	0f 91       	pop	r16
 b58:	ff 90       	pop	r15
 b5a:	ef 90       	pop	r14
 b5c:	df 90       	pop	r13
 b5e:	cf 90       	pop	r12
 b60:	bf 90       	pop	r11
 b62:	af 90       	pop	r10
 b64:	9f 90       	pop	r9
 b66:	8f 90       	pop	r8
 b68:	7f 90       	pop	r7
 b6a:	6f 90       	pop	r6
 b6c:	5f 90       	pop	r5
 b6e:	4f 90       	pop	r4
 b70:	3f 90       	pop	r3
 b72:	2f 90       	pop	r2
 b74:	08 95       	ret

00000b76 <strnlen_P>:
 b76:	fc 01       	movw	r30, r24
 b78:	05 90       	lpm	r0, Z+
 b7a:	61 50       	subi	r22, 0x01	; 1
 b7c:	70 40       	sbci	r23, 0x00	; 0
 b7e:	01 10       	cpse	r0, r1
 b80:	d8 f7       	brcc	.-10     	; 0xb78 <strnlen_P+0x2>
 b82:	80 95       	com	r24
 b84:	90 95       	com	r25
 b86:	8e 0f       	add	r24, r30
 b88:	9f 1f       	adc	r25, r31
 b8a:	08 95       	ret

00000b8c <strnlen>:
 b8c:	fc 01       	movw	r30, r24
 b8e:	61 50       	subi	r22, 0x01	; 1
 b90:	70 40       	sbci	r23, 0x00	; 0
 b92:	01 90       	ld	r0, Z+
 b94:	01 10       	cpse	r0, r1
 b96:	d8 f7       	brcc	.-10     	; 0xb8e <strnlen+0x2>
 b98:	80 95       	com	r24
 b9a:	90 95       	com	r25
 b9c:	8e 0f       	add	r24, r30
 b9e:	9f 1f       	adc	r25, r31
 ba0:	08 95       	ret

00000ba2 <fputc>:
 ba2:	0f 93       	push	r16
 ba4:	1f 93       	push	r17
 ba6:	cf 93       	push	r28
 ba8:	df 93       	push	r29
 baa:	fb 01       	movw	r30, r22
 bac:	23 81       	ldd	r18, Z+3	; 0x03
 bae:	21 fd       	sbrc	r18, 1
 bb0:	03 c0       	rjmp	.+6      	; 0xbb8 <fputc+0x16>
 bb2:	8f ef       	ldi	r24, 0xFF	; 255
 bb4:	9f ef       	ldi	r25, 0xFF	; 255
 bb6:	2c c0       	rjmp	.+88     	; 0xc10 <fputc+0x6e>
 bb8:	22 ff       	sbrs	r18, 2
 bba:	16 c0       	rjmp	.+44     	; 0xbe8 <fputc+0x46>
 bbc:	46 81       	ldd	r20, Z+6	; 0x06
 bbe:	57 81       	ldd	r21, Z+7	; 0x07
 bc0:	24 81       	ldd	r18, Z+4	; 0x04
 bc2:	35 81       	ldd	r19, Z+5	; 0x05
 bc4:	42 17       	cp	r20, r18
 bc6:	53 07       	cpc	r21, r19
 bc8:	44 f4       	brge	.+16     	; 0xbda <fputc+0x38>
 bca:	a0 81       	ld	r26, Z
 bcc:	b1 81       	ldd	r27, Z+1	; 0x01
 bce:	9d 01       	movw	r18, r26
 bd0:	2f 5f       	subi	r18, 0xFF	; 255
 bd2:	3f 4f       	sbci	r19, 0xFF	; 255
 bd4:	31 83       	std	Z+1, r19	; 0x01
 bd6:	20 83       	st	Z, r18
 bd8:	8c 93       	st	X, r24
 bda:	26 81       	ldd	r18, Z+6	; 0x06
 bdc:	37 81       	ldd	r19, Z+7	; 0x07
 bde:	2f 5f       	subi	r18, 0xFF	; 255
 be0:	3f 4f       	sbci	r19, 0xFF	; 255
 be2:	37 83       	std	Z+7, r19	; 0x07
 be4:	26 83       	std	Z+6, r18	; 0x06
 be6:	14 c0       	rjmp	.+40     	; 0xc10 <fputc+0x6e>
 be8:	8b 01       	movw	r16, r22
 bea:	ec 01       	movw	r28, r24
 bec:	fb 01       	movw	r30, r22
 bee:	00 84       	ldd	r0, Z+8	; 0x08
 bf0:	f1 85       	ldd	r31, Z+9	; 0x09
 bf2:	e0 2d       	mov	r30, r0
 bf4:	19 95       	eicall
 bf6:	89 2b       	or	r24, r25
 bf8:	e1 f6       	brne	.-72     	; 0xbb2 <fputc+0x10>
 bfa:	d8 01       	movw	r26, r16
 bfc:	16 96       	adiw	r26, 0x06	; 6
 bfe:	8d 91       	ld	r24, X+
 c00:	9c 91       	ld	r25, X
 c02:	17 97       	sbiw	r26, 0x07	; 7
 c04:	01 96       	adiw	r24, 0x01	; 1
 c06:	17 96       	adiw	r26, 0x07	; 7
 c08:	9c 93       	st	X, r25
 c0a:	8e 93       	st	-X, r24
 c0c:	16 97       	sbiw	r26, 0x06	; 6
 c0e:	ce 01       	movw	r24, r28
 c10:	df 91       	pop	r29
 c12:	cf 91       	pop	r28
 c14:	1f 91       	pop	r17
 c16:	0f 91       	pop	r16
 c18:	08 95       	ret

00000c1a <__ultoa_invert>:
 c1a:	fa 01       	movw	r30, r20
 c1c:	aa 27       	eor	r26, r26
 c1e:	28 30       	cpi	r18, 0x08	; 8
 c20:	51 f1       	breq	.+84     	; 0xc76 <__ultoa_invert+0x5c>
 c22:	20 31       	cpi	r18, 0x10	; 16
 c24:	81 f1       	breq	.+96     	; 0xc86 <__ultoa_invert+0x6c>
 c26:	e8 94       	clt
 c28:	6f 93       	push	r22
 c2a:	6e 7f       	andi	r22, 0xFE	; 254
 c2c:	6e 5f       	subi	r22, 0xFE	; 254
 c2e:	7f 4f       	sbci	r23, 0xFF	; 255
 c30:	8f 4f       	sbci	r24, 0xFF	; 255
 c32:	9f 4f       	sbci	r25, 0xFF	; 255
 c34:	af 4f       	sbci	r26, 0xFF	; 255
 c36:	b1 e0       	ldi	r27, 0x01	; 1
 c38:	3e d0       	rcall	.+124    	; 0xcb6 <__ultoa_invert+0x9c>
 c3a:	b4 e0       	ldi	r27, 0x04	; 4
 c3c:	3c d0       	rcall	.+120    	; 0xcb6 <__ultoa_invert+0x9c>
 c3e:	67 0f       	add	r22, r23
 c40:	78 1f       	adc	r23, r24
 c42:	89 1f       	adc	r24, r25
 c44:	9a 1f       	adc	r25, r26
 c46:	a1 1d       	adc	r26, r1
 c48:	68 0f       	add	r22, r24
 c4a:	79 1f       	adc	r23, r25
 c4c:	8a 1f       	adc	r24, r26
 c4e:	91 1d       	adc	r25, r1
 c50:	a1 1d       	adc	r26, r1
 c52:	6a 0f       	add	r22, r26
 c54:	71 1d       	adc	r23, r1
 c56:	81 1d       	adc	r24, r1
 c58:	91 1d       	adc	r25, r1
 c5a:	a1 1d       	adc	r26, r1
 c5c:	20 d0       	rcall	.+64     	; 0xc9e <__ultoa_invert+0x84>
 c5e:	09 f4       	brne	.+2      	; 0xc62 <__ultoa_invert+0x48>
 c60:	68 94       	set
 c62:	3f 91       	pop	r19
 c64:	2a e0       	ldi	r18, 0x0A	; 10
 c66:	26 9f       	mul	r18, r22
 c68:	11 24       	eor	r1, r1
 c6a:	30 19       	sub	r19, r0
 c6c:	30 5d       	subi	r19, 0xD0	; 208
 c6e:	31 93       	st	Z+, r19
 c70:	de f6       	brtc	.-74     	; 0xc28 <__ultoa_invert+0xe>
 c72:	cf 01       	movw	r24, r30
 c74:	08 95       	ret
 c76:	46 2f       	mov	r20, r22
 c78:	47 70       	andi	r20, 0x07	; 7
 c7a:	40 5d       	subi	r20, 0xD0	; 208
 c7c:	41 93       	st	Z+, r20
 c7e:	b3 e0       	ldi	r27, 0x03	; 3
 c80:	0f d0       	rcall	.+30     	; 0xca0 <__ultoa_invert+0x86>
 c82:	c9 f7       	brne	.-14     	; 0xc76 <__ultoa_invert+0x5c>
 c84:	f6 cf       	rjmp	.-20     	; 0xc72 <__ultoa_invert+0x58>
 c86:	46 2f       	mov	r20, r22
 c88:	4f 70       	andi	r20, 0x0F	; 15
 c8a:	40 5d       	subi	r20, 0xD0	; 208
 c8c:	4a 33       	cpi	r20, 0x3A	; 58
 c8e:	18 f0       	brcs	.+6      	; 0xc96 <__ultoa_invert+0x7c>
 c90:	49 5d       	subi	r20, 0xD9	; 217
 c92:	31 fd       	sbrc	r19, 1
 c94:	40 52       	subi	r20, 0x20	; 32
 c96:	41 93       	st	Z+, r20
 c98:	02 d0       	rcall	.+4      	; 0xc9e <__ultoa_invert+0x84>
 c9a:	a9 f7       	brne	.-22     	; 0xc86 <__ultoa_invert+0x6c>
 c9c:	ea cf       	rjmp	.-44     	; 0xc72 <__ultoa_invert+0x58>
 c9e:	b4 e0       	ldi	r27, 0x04	; 4
 ca0:	a6 95       	lsr	r26
 ca2:	97 95       	ror	r25
 ca4:	87 95       	ror	r24
 ca6:	77 95       	ror	r23
 ca8:	67 95       	ror	r22
 caa:	ba 95       	dec	r27
 cac:	c9 f7       	brne	.-14     	; 0xca0 <__ultoa_invert+0x86>
 cae:	00 97       	sbiw	r24, 0x00	; 0
 cb0:	61 05       	cpc	r22, r1
 cb2:	71 05       	cpc	r23, r1
 cb4:	08 95       	ret
 cb6:	9b 01       	movw	r18, r22
 cb8:	ac 01       	movw	r20, r24
 cba:	0a 2e       	mov	r0, r26
 cbc:	06 94       	lsr	r0
 cbe:	57 95       	ror	r21
 cc0:	47 95       	ror	r20
 cc2:	37 95       	ror	r19
 cc4:	27 95       	ror	r18
 cc6:	ba 95       	dec	r27
 cc8:	c9 f7       	brne	.-14     	; 0xcbc <__ultoa_invert+0xa2>
 cca:	62 0f       	add	r22, r18
 ccc:	73 1f       	adc	r23, r19
 cce:	84 1f       	adc	r24, r20
 cd0:	95 1f       	adc	r25, r21
 cd2:	a0 1d       	adc	r26, r0
 cd4:	08 95       	ret

00000cd6 <_exit>:
 cd6:	f8 94       	cli

00000cd8 <__stop_program>:
 cd8:	ff cf       	rjmp	.-2      	; 0xcd8 <__stop_program>


SPIMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009c  00800100  00000c46  00000cda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  0080019c  0080019c  00000d76  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001421  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a56  00000000  00000000  000022f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000804  00000000  00000000  00002d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00003550  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000564  00000000  00000000  000036f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000887  00000000  00000000  00003c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000044df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e4       	ldi	r30, 0x46	; 70
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 39       	cpi	r26, 0x9C	; 156
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e9       	ldi	r26, 0x9C	; 156
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 3c       	cpi	r26, 0xCA	; 202
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 37 02 	call	0x46e	; 0x46e <main>
  9e:	0c 94 21 06 	jmp	0xc42	; 0xc42 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	88 61       	ori	r24, 0x18	; 24
  b6:	80 83       	st	Z, r24
  b8:	e2 ec       	ldi	r30, 0xC2	; 194
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8e 60       	ori	r24, 0x0E	; 14
  c0:	80 83       	st	Z, r24
  c2:	08 95       	ret

000000c4 <USART_Transmit>:
  c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	95 ff       	sbrs	r25, 5
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <USART_Transmit>
  cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d0:	08 95       	ret

000000d2 <USART_Receive>:
  d2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d6:	85 ff       	sbrs	r24, 5
  d8:	fc cf       	rjmp	.-8      	; 0xd2 <USART_Receive>
  da:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  de:	08 95       	ret

000000e0 <LCD_Command>:
  e0:	9b b1       	in	r25, 0x0b	; 11
  e2:	9f 70       	andi	r25, 0x0F	; 15
  e4:	28 2f       	mov	r18, r24
  e6:	20 7f       	andi	r18, 0xF0	; 240
  e8:	92 2b       	or	r25, r18
  ea:	9b b9       	out	0x0b, r25	; 11
  ec:	9b b1       	in	r25, 0x0b	; 11
  ee:	9b 7f       	andi	r25, 0xFB	; 251
  f0:	9b b9       	out	0x0b, r25	; 11
  f2:	9b b1       	in	r25, 0x0b	; 11
  f4:	98 60       	ori	r25, 0x08	; 8
  f6:	9b b9       	out	0x0b, r25	; 11
  f8:	35 e0       	ldi	r19, 0x05	; 5
  fa:	3a 95       	dec	r19
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Command+0x1a>
  fe:	00 00       	nop
 100:	9b b1       	in	r25, 0x0b	; 11
 102:	97 7f       	andi	r25, 0xF7	; 247
 104:	9b b9       	out	0x0b, r25	; 11
 106:	ef e1       	ldi	r30, 0x1F	; 31
 108:	f3 e0       	ldi	r31, 0x03	; 3
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_Command+0x2a>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_Command+0x30>
 110:	00 00       	nop
 112:	2b b1       	in	r18, 0x0b	; 11
 114:	f0 e1       	ldi	r31, 0x10	; 16
 116:	8f 9f       	mul	r24, r31
 118:	c0 01       	movw	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	92 2f       	mov	r25, r18
 11e:	9f 70       	andi	r25, 0x0F	; 15
 120:	89 2b       	or	r24, r25
 122:	8b b9       	out	0x0b, r24	; 11
 124:	8b b1       	in	r24, 0x0b	; 11
 126:	88 60       	ori	r24, 0x08	; 8
 128:	8b b9       	out	0x0b, r24	; 11
 12a:	35 e0       	ldi	r19, 0x05	; 5
 12c:	3a 95       	dec	r19
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_Command+0x4c>
 130:	00 00       	nop
 132:	8b b1       	in	r24, 0x0b	; 11
 134:	87 7f       	andi	r24, 0xF7	; 247
 136:	8b b9       	out	0x0b, r24	; 11
 138:	8f e3       	ldi	r24, 0x3F	; 63
 13a:	9f e1       	ldi	r25, 0x1F	; 31
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_Command+0x5c>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Command+0x62>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <LCD_Data>:
 146:	9b b1       	in	r25, 0x0b	; 11
 148:	9f 70       	andi	r25, 0x0F	; 15
 14a:	28 2f       	mov	r18, r24
 14c:	20 7f       	andi	r18, 0xF0	; 240
 14e:	92 2b       	or	r25, r18
 150:	9b b9       	out	0x0b, r25	; 11
 152:	9b b1       	in	r25, 0x0b	; 11
 154:	94 60       	ori	r25, 0x04	; 4
 156:	9b b9       	out	0x0b, r25	; 11
 158:	9b b1       	in	r25, 0x0b	; 11
 15a:	98 60       	ori	r25, 0x08	; 8
 15c:	9b b9       	out	0x0b, r25	; 11
 15e:	35 e0       	ldi	r19, 0x05	; 5
 160:	3a 95       	dec	r19
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_Data+0x1a>
 164:	00 00       	nop
 166:	9b b1       	in	r25, 0x0b	; 11
 168:	97 7f       	andi	r25, 0xF7	; 247
 16a:	9b b9       	out	0x0b, r25	; 11
 16c:	ef e1       	ldi	r30, 0x1F	; 31
 16e:	f3 e0       	ldi	r31, 0x03	; 3
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <LCD_Data+0x2a>
 174:	00 c0       	rjmp	.+0      	; 0x176 <LCD_Data+0x30>
 176:	00 00       	nop
 178:	2b b1       	in	r18, 0x0b	; 11
 17a:	f0 e1       	ldi	r31, 0x10	; 16
 17c:	8f 9f       	mul	r24, r31
 17e:	c0 01       	movw	r24, r0
 180:	11 24       	eor	r1, r1
 182:	92 2f       	mov	r25, r18
 184:	9f 70       	andi	r25, 0x0F	; 15
 186:	89 2b       	or	r24, r25
 188:	8b b9       	out	0x0b, r24	; 11
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	35 e0       	ldi	r19, 0x05	; 5
 192:	3a 95       	dec	r19
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_Data+0x4c>
 196:	00 00       	nop
 198:	8b b1       	in	r24, 0x0b	; 11
 19a:	87 7f       	andi	r24, 0xF7	; 247
 19c:	8b b9       	out	0x0b, r24	; 11
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_Data+0x5c>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_Data+0x62>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <LCD_Init>:
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	89 ef       	ldi	r24, 0xF9	; 249
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <LCD_Init+0x6>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_Init+0x10>
 1bc:	00 00       	nop
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Command>
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Command>
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Command>
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Command>
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Command>
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	9f e1       	ldi	r25, 0x1F	; 31
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_Init+0x34>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_Init+0x3a>
 1e6:	00 00       	nop
 1e8:	08 95       	ret

000001ea <LCD_Print>:
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ec 01       	movw	r28, r24
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <LCD_Print+0xe>
 1f2:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_Data>
 1f6:	21 96       	adiw	r28, 0x01	; 1
 1f8:	88 81       	ld	r24, Y
 1fa:	81 11       	cpse	r24, r1
 1fc:	fa cf       	rjmp	.-12     	; 0x1f2 <LCD_Print+0x8>
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <LCD_Print_Row>:
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
 20a:	61 11       	cpse	r22, r1
 20c:	04 c0       	rjmp	.+8      	; 0x216 <LCD_Print_Row+0x12>
 20e:	80 e8       	ldi	r24, 0x80	; 128
 210:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Command>
 214:	07 c0       	rjmp	.+14     	; 0x224 <LCD_Print_Row+0x20>
 216:	80 ec       	ldi	r24, 0xC0	; 192
 218:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Command>
 21c:	03 c0       	rjmp	.+6      	; 0x224 <LCD_Print_Row+0x20>
 21e:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_Data>
 222:	21 96       	adiw	r28, 0x01	; 1
 224:	88 81       	ld	r24, Y
 226:	81 11       	cpse	r24, r1
 228:	fa cf       	rjmp	.-12     	; 0x21e <LCD_Print_Row+0x1a>
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	08 95       	ret

00000230 <LCD_Clear>:
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 70 00 	call	0xe0	; 0xe0 <LCD_Command>
 236:	8f e3       	ldi	r24, 0x3F	; 63
 238:	9f e1       	ldi	r25, 0x1F	; 31
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Clear+0xa>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Clear+0x10>
 240:	00 00       	nop
 242:	08 95       	ret

00000244 <TOP_value>:
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	86 9f       	mul	r24, r22
 24a:	90 01       	movw	r18, r0
 24c:	87 9f       	mul	r24, r23
 24e:	30 0d       	add	r19, r0
 250:	96 9f       	mul	r25, r22
 252:	30 0d       	add	r19, r0
 254:	11 24       	eor	r1, r1
 256:	03 2e       	mov	r0, r19
 258:	00 0c       	add	r0, r0
 25a:	44 0b       	sbc	r20, r20
 25c:	55 0b       	sbc	r21, r21
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	74 e2       	ldi	r23, 0x24	; 36
 262:	84 ef       	ldi	r24, 0xF4	; 244
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divmodsi4>
 26a:	c9 01       	movw	r24, r18
 26c:	08 95       	ret

0000026e <__vector_11>:
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 27c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <alarm>:
 28a:	8c 01       	movw	r16, r24
 28c:	7b 01       	movw	r14, r22
 28e:	84 b1       	in	r24, 0x04	; 4
 290:	82 60       	ori	r24, 0x02	; 2
 292:	84 b9       	out	0x04, r24	; 4
 294:	78 94       	sei
 296:	e0 e8       	ldi	r30, 0x80	; 128
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	10 82       	st	Z, r1
 29c:	a1 e8       	ldi	r26, 0x81	; 129
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	1c 92       	st	X, r1
 2a2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2a6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 2aa:	80 81       	ld	r24, Z
 2ac:	80 64       	ori	r24, 0x40	; 64
 2ae:	80 83       	st	Z, r24
 2b0:	80 81       	ld	r24, Z
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	80 83       	st	Z, r24
 2b6:	8c 91       	ld	r24, X
 2b8:	80 61       	ori	r24, 0x10	; 16
 2ba:	8c 93       	st	X, r24
 2bc:	ef e6       	ldi	r30, 0x6F	; 111
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	82 60       	ori	r24, 0x02	; 2
 2c4:	80 83       	st	Z, r24
 2c6:	c8 01       	movw	r24, r16
 2c8:	0e 94 22 01 	call	0x244	; 0x244 <TOP_value>
 2cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2d4:	e1 e8       	ldi	r30, 0x81	; 129
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	82 60       	ori	r24, 0x02	; 2
 2dc:	80 83       	st	Z, r24
 2de:	c1 e0       	ldi	r28, 0x01	; 1
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	18 c0       	rjmp	.+48     	; 0x314 <alarm+0x8a>
 2e4:	2f ef       	ldi	r18, 0xFF	; 255
 2e6:	89 ef       	ldi	r24, 0xF9	; 249
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	21 50       	subi	r18, 0x01	; 1
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	90 40       	sbci	r25, 0x00	; 0
 2f0:	e1 f7       	brne	.-8      	; 0x2ea <alarm+0x60>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <alarm+0x6a>
 2f4:	00 00       	nop
 2f6:	b7 01       	movw	r22, r14
 2f8:	c0 9f       	mul	r28, r16
 2fa:	c0 01       	movw	r24, r0
 2fc:	c1 9f       	mul	r28, r17
 2fe:	90 0d       	add	r25, r0
 300:	d0 9f       	mul	r29, r16
 302:	90 0d       	add	r25, r0
 304:	11 24       	eor	r1, r1
 306:	0e 94 22 01 	call	0x244	; 0x244 <TOP_value>
 30a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 30e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 312:	21 96       	adiw	r28, 0x01	; 1
 314:	ca 30       	cpi	r28, 0x0A	; 10
 316:	d1 05       	cpc	r29, r1
 318:	2c f3       	brlt	.-54     	; 0x2e4 <alarm+0x5a>
 31a:	ca e0       	ldi	r28, 0x0A	; 10
 31c:	d0 e0       	ldi	r29, 0x00	; 0
 31e:	18 c0       	rjmp	.+48     	; 0x350 <alarm+0xc6>
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	89 ef       	ldi	r24, 0xF9	; 249
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <alarm+0x9c>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <alarm+0xa6>
 330:	00 00       	nop
 332:	b7 01       	movw	r22, r14
 334:	c0 9f       	mul	r28, r16
 336:	c0 01       	movw	r24, r0
 338:	c1 9f       	mul	r28, r17
 33a:	90 0d       	add	r25, r0
 33c:	d0 9f       	mul	r29, r16
 33e:	90 0d       	add	r25, r0
 340:	11 24       	eor	r1, r1
 342:	0e 94 22 01 	call	0x244	; 0x244 <TOP_value>
 346:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 34a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 34e:	21 97       	sbiw	r28, 0x01	; 1
 350:	1c 16       	cp	r1, r28
 352:	1d 06       	cpc	r1, r29
 354:	2c f3       	brlt	.-54     	; 0x320 <alarm+0x96>
 356:	be cf       	rjmp	.-132    	; 0x2d4 <alarm+0x4a>

00000358 <start_timer>:
	//##################################################
	
	//alarm(f_buzz, prescaler);
};

bool start_timer(){
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	0f 93       	push	r16
 35e:	1f 93       	push	r17
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	cd b7       	in	r28, 0x3d	; 61
 366:	de b7       	in	r29, 0x3e	; 62
 368:	60 97       	sbiw	r28, 0x10	; 16
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
	LCD_Init();
 374:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Init>

	int count = 30; // start timer at 30 seconds
	LCD_Print_Row("GIVE PASS", 0);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	83 e4       	ldi	r24, 0x43	; 67
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 02 01 	call	0x204	; 0x204 <LCD_Print_Row>
};

bool start_timer(){
	LCD_Init();

	int count = 30; // start timer at 30 seconds
 382:	0e e1       	ldi	r16, 0x1E	; 30
 384:	10 e0       	ldi	r17, 0x00	; 0
	LCD_Print_Row("GIVE PASS", 0);
	while(count >= 0) {
 386:	60 c0       	rjmp	.+192    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
		char buffer[16];
		snprintf(buffer, sizeof(buffer), "Time: %02d sec", count); // format timer value
 388:	1f 93       	push	r17
 38a:	0f 93       	push	r16
 38c:	8d e4       	ldi	r24, 0x4D	; 77
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	9f 93       	push	r25
 392:	8f 93       	push	r24
 394:	1f 92       	push	r1
 396:	80 e1       	ldi	r24, 0x10	; 16
 398:	8f 93       	push	r24
 39a:	ce 01       	movw	r24, r28
 39c:	01 96       	adiw	r24, 0x01	; 1
 39e:	7c 01       	movw	r14, r24
 3a0:	9f 93       	push	r25
 3a2:	8f 93       	push	r24
 3a4:	0e 94 29 03 	call	0x652	; 0x652 <snprintf>
		LCD_Print_Row(buffer, 1);
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	c7 01       	movw	r24, r14
 3ac:	0e 94 02 01 	call	0x204	; 0x204 <LCD_Print_Row>
 3b0:	9f ef       	ldi	r25, 0xFF	; 255
 3b2:	23 ed       	ldi	r18, 0xD3	; 211
 3b4:	80 e3       	ldi	r24, 0x30	; 48
 3b6:	91 50       	subi	r25, 0x01	; 1
 3b8:	20 40       	sbci	r18, 0x00	; 0
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <start_timer+0x5e>
 3be:	00 c0       	rjmp	.+0      	; 0x3c0 <start_timer+0x68>
 3c0:	00 00       	nop
		_delay_ms(1000); // wait for 1 second
		count--; // decrement timer
 3c2:	01 50       	subi	r16, 0x01	; 1
 3c4:	11 09       	sbc	r17, r1
		
		
		 PORTB &= ~(1 << PB2); // SS LOW
 3c6:	85 b1       	in	r24, 0x05	; 5
 3c8:	8b 7f       	andi	r24, 0xFB	; 251
 3ca:	85 b9       	out	0x05, r24	; 5
		 
		 for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	f8 94       	cli
 3d0:	de bf       	out	0x3e, r29	; 62
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	cd bf       	out	0x3d, r28	; 61
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	12 c0       	rjmp	.+36     	; 0x3fe <start_timer+0xa6>
		 {
			 SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 3da:	08 2e       	mov	r0, r24
 3dc:	00 0c       	add	r0, r0
 3de:	99 0b       	sbc	r25, r25
 3e0:	fc 01       	movw	r30, r24
 3e2:	e4 56       	subi	r30, 0x64	; 100
 3e4:	fe 4f       	sbci	r31, 0xFE	; 254
 3e6:	30 81       	ld	r19, Z
 3e8:	3e bd       	out	0x2e, r19	; 46
			 while(!(SPSR & (1 << SPIF))){;}
 3ea:	0d b4       	in	r0, 0x2d	; 45
 3ec:	07 fe       	sbrs	r0, 7
 3ee:	fd cf       	rjmp	.-6      	; 0x3ea <start_timer+0x92>
			 spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 3f0:	3e b5       	in	r19, 0x2e	; 46
 3f2:	fc 01       	movw	r30, r24
 3f4:	e0 55       	subi	r30, 0x50	; 80
 3f6:	fe 4f       	sbci	r31, 0xFE	; 254
 3f8:	30 83       	st	Z, r19
		count--; // decrement timer
		
		
		 PORTB &= ~(1 << PB2); // SS LOW
		 
		 for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	82 0f       	add	r24, r18
 3fe:	28 2f       	mov	r18, r24
 400:	84 31       	cpi	r24, 0x14	; 20
 402:	58 f3       	brcs	.-42     	; 0x3da <start_timer+0x82>
			 SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
			 while(!(SPSR & (1 << SPIF))){;}
			 spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
		 }
		 
		 PORTB |= (1 << PB2); // SS HIGH
 404:	85 b1       	in	r24, 0x05	; 5
 406:	84 60       	ori	r24, 0x04	; 4
 408:	85 b9       	out	0x05, r24	; 5
		
		if (spi_receive_data[0] == '3') {
 40a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <spi_receive_data>
 40e:	83 33       	cpi	r24, 0x33	; 51
 410:	41 f4       	brne	.+16     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
			LCD_Clear();
 412:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Clear>
			//printf("FLAG 5");
			LCD_Print("Correct pass!");
 416:	8c e5       	ldi	r24, 0x5C	; 92
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Print>
			return true;
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	19 c0       	rjmp	.+50     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		} else if (spi_receive_data[0] == '4') {
 422:	84 33       	cpi	r24, 0x34	; 52
 424:	89 f4       	brne	.+34     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
			LCD_Clear();
 426:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Clear>
			LCD_Print("Incorrect pass!");
 42a:	8a e6       	ldi	r24, 0x6A	; 106
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Print>
 432:	9f ef       	ldi	r25, 0xFF	; 255
 434:	2b e7       	ldi	r18, 0x7B	; 123
 436:	82 e9       	ldi	r24, 0x92	; 146
 438:	91 50       	subi	r25, 0x01	; 1
 43a:	20 40       	sbci	r18, 0x00	; 0
 43c:	80 40       	sbci	r24, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 442:	00 00       	nop
			_delay_ms(3000);
			return false;
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	06 c0       	rjmp	.+12     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
bool start_timer(){
	LCD_Init();

	int count = 30; // start timer at 30 seconds
	LCD_Print_Row("GIVE PASS", 0);
	while(count >= 0) {
 448:	11 23       	and	r17, r17
 44a:	0c f0       	brlt	.+2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44c:	9d cf       	rjmp	.-198    	; 0x388 <start_timer+0x30>
			return false;
		}
		
	}

	LCD_Clear(); // clear the display
 44e:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Clear>
	return false;
 452:	80 e0       	ldi	r24, 0x00	; 0

}
 454:	60 96       	adiw	r28, 0x10	; 16
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	de bf       	out	0x3e, r29	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	cd bf       	out	0x3d, r28	; 61
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	ff 90       	pop	r15
 46a:	ef 90       	pop	r14
 46c:	08 95       	ret

0000046e <main>:
FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_Receive, _FDEV_SETUP_READ);

int main(void)
{
	// Set PORTD pins 2-7 as output
	DDRD |= (1<<LCD_RS) | (1<<LCD_EN) | (1<<LCD_D4) | (1<<LCD_D5) | (1<<LCD_D6) | (1<<LCD_D7);
 46e:	8a b1       	in	r24, 0x0a	; 10
 470:	8c 6f       	ori	r24, 0xFC	; 252
 472:	8a b9       	out	0x0a, r24	; 10
	
	init_uart();
 474:	0e 94 be 02 	call	0x57c	; 0x57c <init_uart>
	LCD_Init();
 478:	0e 94 d6 00 	call	0x1ac	; 0x1ac <LCD_Init>
	LCD_Clear();
 47c:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Clear>
	LCD_Print("SCANNING...");
 480:	8a e7       	ldi	r24, 0x7A	; 122
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_Print>

    /* set SS, MOSI and SCK as output, pins 53 (PB0), 51 (PB2) and 52 (PB1) */
    DDRB |= (1 << PB2) | (1 << PB3) | (1 << PB5); // SS as output
 488:	84 b1       	in	r24, 0x04	; 4
 48a:	8c 62       	ori	r24, 0x2C	; 44
 48c:	84 b9       	out	0x04, r24	; 4
    /* set SPI enable and master/slave select, making MEGA the master */
    SPCR |= (1 << 6) | (1 << 4);
 48e:	8c b5       	in	r24, 0x2c	; 44
 490:	80 65       	ori	r24, 0x50	; 80
 492:	8c bd       	out	0x2c, r24	; 44
    /* set SPI clock rate to 1 MHz */
    SPCR |= (1 << 0);
 494:	8c b5       	in	r24, 0x2c	; 44
 496:	81 60       	ori	r24, 0x01	; 1
 498:	8c bd       	out	0x2c, r24	; 44
    
    // initialize the UART with 9600 BAUD
    USART_init(MYUBRR);
 49a:	87 e6       	ldi	r24, 0x67	; 103
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_init>
        
    // redirect the stdin and stdout to UART functions
    stdout = &uart_output;
 4a2:	e4 ec       	ldi	r30, 0xC4	; 196
 4a4:	f1 e0       	ldi	r31, 0x01	; 1
 4a6:	8e e0       	ldi	r24, 0x0E	; 14
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	93 83       	std	Z+3, r25	; 0x03
 4ac:	82 83       	std	Z+2, r24	; 0x02
    stdin = &uart_input;
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	91 e0       	ldi	r25, 0x01	; 1
 4b2:	91 83       	std	Z+1, r25	; 0x01
 4b4:	80 83       	st	Z, r24
	
    /* send message to slave and receive message from slave */
    while (1) 
    {
        
        PORTB &= ~(1 << PB2); // SS LOW
 4b6:	85 b1       	in	r24, 0x05	; 5
 4b8:	8b 7f       	andi	r24, 0xFB	; 251
 4ba:	85 b9       	out	0x05, r24	; 5
           
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	12 c0       	rjmp	.+36     	; 0x4e4 <main+0x76>
        {
            SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
 4c0:	08 2e       	mov	r0, r24
 4c2:	00 0c       	add	r0, r0
 4c4:	99 0b       	sbc	r25, r25
 4c6:	fc 01       	movw	r30, r24
 4c8:	e4 56       	subi	r30, 0x64	; 100
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	30 81       	ld	r19, Z
 4ce:	3e bd       	out	0x2e, r19	; 46
				 while(!(SPSR & (1 << SPIF))){;}
 4d0:	0d b4       	in	r0, 0x2d	; 45
 4d2:	07 fe       	sbrs	r0, 7
 4d4:	fd cf       	rjmp	.-6      	; 0x4d0 <main+0x62>
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
 4d6:	3e b5       	in	r19, 0x2e	; 46
 4d8:	fc 01       	movw	r30, r24
 4da:	e0 55       	subi	r30, 0x50	; 80
 4dc:	fe 4f       	sbci	r31, 0xFE	; 254
 4de:	30 83       	st	Z, r19
    while (1) 
    {
        
        PORTB &= ~(1 << PB2); // SS LOW
           
        for(int8_t spi_data_index = 0; spi_data_index < sizeof(spi_send_data); spi_data_index++)
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	82 0f       	add	r24, r18
 4e4:	28 2f       	mov	r18, r24
 4e6:	84 31       	cpi	r24, 0x14	; 20
 4e8:	58 f3       	brcs	.-42     	; 0x4c0 <main+0x52>
            SPDR = spi_send_data[spi_data_index]; // send byte using SPI data register
				 while(!(SPSR & (1 << SPIF))){;}
            spi_receive_data[spi_data_index] = SPDR; // receive byte from the SPI data register
        }
            
        PORTB |= (1 << PB2); // SS HIGH
 4ea:	85 b1       	in	r24, 0x05	; 5
 4ec:	84 60       	ori	r24, 0x04	; 4
 4ee:	85 b9       	out	0x05, r24	; 5
		printf(spi_receive_data);
 4f0:	c0 eb       	ldi	r28, 0xB0	; 176
 4f2:	d1 e0       	ldi	r29, 0x01	; 1
 4f4:	df 93       	push	r29
 4f6:	cf 93       	push	r28
 4f8:	0e 94 13 03 	call	0x626	; 0x626 <printf>
		
		bool passwordCorrect;
		
		if (spi_receive_data[0] == '2') {
 4fc:	88 81       	ld	r24, Y
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	82 33       	cpi	r24, 0x32	; 50
 504:	c1 f6       	brne	.-80     	; 0x4b6 <main+0x48>
			printf(spi_receive_data);
 506:	ce 01       	movw	r24, r28
 508:	9f 93       	push	r25
 50a:	cf 93       	push	r28
 50c:	0e 94 13 03 	call	0x626	; 0x626 <printf>
			LCD_Clear();
 510:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Clear>
			passwordCorrect = start_timer();
 514:	0e 94 ac 01 	call	0x358	; 0x358 <start_timer>
 518:	c8 2f       	mov	r28, r24
			LCD_Clear();
 51a:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Clear>
			if (passwordCorrect == false){
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	c1 11       	cpse	r28, r1
 524:	14 c0       	rjmp	.+40     	; 0x54e <main+0xe0>
				LCD_Print_Row("ALERT!", 0);
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	8c e3       	ldi	r24, 0x3C	; 60
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 02 01 	call	0x204	; 0x204 <LCD_Print_Row>
				LCD_Print_Row("POLICE!", 1);
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	86 e8       	ldi	r24, 0x86	; 134
 534:	91 e0       	ldi	r25, 0x01	; 1
 536:	0e 94 02 01 	call	0x204	; 0x204 <LCD_Print_Row>
				alarm(f_buzz, prescaler);
 53a:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <prescaler>
 53e:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <prescaler+0x1>
 542:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <f_buzz>
 546:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <f_buzz+0x1>
 54a:	0e 94 45 01 	call	0x28a	; 0x28a <alarm>
			} else{
				LCD_Print_Row("Correct pass", 0);
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	8e e8       	ldi	r24, 0x8E	; 142
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	0e 94 02 01 	call	0x204	; 0x204 <LCD_Print_Row>
 558:	ae cf       	rjmp	.-164    	; 0x4b6 <main+0x48>

0000055a <uart_putchar>:
FILE mystdin = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);
/******************************************************************************
******************************************************************************/
int uart_putchar(char c, FILE *stream)
{
	loop_until_bit_is_set(UCSR0A, UDRE0);
 55a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 55e:	95 ff       	sbrs	r25, 5
 560:	fc cf       	rjmp	.-8      	; 0x55a <uart_putchar>
	UDR0 = c;
 562:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	return 0;
}
 566:	80 e0       	ldi	r24, 0x00	; 0
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	08 95       	ret

0000056c <uart_getchar>:
/******************************************************************************
******************************************************************************/
int uart_getchar(FILE *stream)
{
	/* Wait until data exists. */
	loop_until_bit_is_set(UCSR0A, RXC0);
 56c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 570:	88 23       	and	r24, r24
 572:	e4 f7       	brge	.-8      	; 0x56c <uart_getchar>
	return UDR0;
 574:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	08 95       	ret

0000057c <init_uart>:
/******************************************************************************
******************************************************************************/
void init_uart(void)
{
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 57c:	88 e1       	ldi	r24, 0x18	; 24
 57e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UBRR0 = 103;  //With 16 MHz Crystal, 9600 baud = 103
 582:	87 e6       	ldi	r24, 0x67	; 103
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 58a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	stdout = &mystdout;
 58e:	e4 ec       	ldi	r30, 0xC4	; 196
 590:	f1 e0       	ldi	r31, 0x01	; 1
 592:	8e e2       	ldi	r24, 0x2E	; 46
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	93 83       	std	Z+3, r25	; 0x03
 598:	82 83       	std	Z+2, r24	; 0x02
	stdin = &mystdin;
 59a:	80 e2       	ldi	r24, 0x20	; 32
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	91 83       	std	Z+1, r25	; 0x01
 5a0:	80 83       	st	Z, r24
 5a2:	08 95       	ret

000005a4 <__divmodsi4>:
 5a4:	05 2e       	mov	r0, r21
 5a6:	97 fb       	bst	r25, 7
 5a8:	1e f4       	brtc	.+6      	; 0x5b0 <__divmodsi4+0xc>
 5aa:	00 94       	com	r0
 5ac:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__negsi2>
 5b0:	57 fd       	sbrc	r21, 7
 5b2:	07 d0       	rcall	.+14     	; 0x5c2 <__divmodsi4_neg2>
 5b4:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__udivmodsi4>
 5b8:	07 fc       	sbrc	r0, 7
 5ba:	03 d0       	rcall	.+6      	; 0x5c2 <__divmodsi4_neg2>
 5bc:	4e f4       	brtc	.+18     	; 0x5d0 <__divmodsi4_exit>
 5be:	0c 94 e9 02 	jmp	0x5d2	; 0x5d2 <__negsi2>

000005c2 <__divmodsi4_neg2>:
 5c2:	50 95       	com	r21
 5c4:	40 95       	com	r20
 5c6:	30 95       	com	r19
 5c8:	21 95       	neg	r18
 5ca:	3f 4f       	sbci	r19, 0xFF	; 255
 5cc:	4f 4f       	sbci	r20, 0xFF	; 255
 5ce:	5f 4f       	sbci	r21, 0xFF	; 255

000005d0 <__divmodsi4_exit>:
 5d0:	08 95       	ret

000005d2 <__negsi2>:
 5d2:	90 95       	com	r25
 5d4:	80 95       	com	r24
 5d6:	70 95       	com	r23
 5d8:	61 95       	neg	r22
 5da:	7f 4f       	sbci	r23, 0xFF	; 255
 5dc:	8f 4f       	sbci	r24, 0xFF	; 255
 5de:	9f 4f       	sbci	r25, 0xFF	; 255
 5e0:	08 95       	ret

000005e2 <__udivmodsi4>:
 5e2:	a1 e2       	ldi	r26, 0x21	; 33
 5e4:	1a 2e       	mov	r1, r26
 5e6:	aa 1b       	sub	r26, r26
 5e8:	bb 1b       	sub	r27, r27
 5ea:	fd 01       	movw	r30, r26
 5ec:	0d c0       	rjmp	.+26     	; 0x608 <__udivmodsi4_ep>

000005ee <__udivmodsi4_loop>:
 5ee:	aa 1f       	adc	r26, r26
 5f0:	bb 1f       	adc	r27, r27
 5f2:	ee 1f       	adc	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	a2 17       	cp	r26, r18
 5f8:	b3 07       	cpc	r27, r19
 5fa:	e4 07       	cpc	r30, r20
 5fc:	f5 07       	cpc	r31, r21
 5fe:	20 f0       	brcs	.+8      	; 0x608 <__udivmodsi4_ep>
 600:	a2 1b       	sub	r26, r18
 602:	b3 0b       	sbc	r27, r19
 604:	e4 0b       	sbc	r30, r20
 606:	f5 0b       	sbc	r31, r21

00000608 <__udivmodsi4_ep>:
 608:	66 1f       	adc	r22, r22
 60a:	77 1f       	adc	r23, r23
 60c:	88 1f       	adc	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	1a 94       	dec	r1
 612:	69 f7       	brne	.-38     	; 0x5ee <__udivmodsi4_loop>
 614:	60 95       	com	r22
 616:	70 95       	com	r23
 618:	80 95       	com	r24
 61a:	90 95       	com	r25
 61c:	9b 01       	movw	r18, r22
 61e:	ac 01       	movw	r20, r24
 620:	bd 01       	movw	r22, r26
 622:	cf 01       	movw	r24, r30
 624:	08 95       	ret

00000626 <printf>:
 626:	a0 e0       	ldi	r26, 0x00	; 0
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	e9 e1       	ldi	r30, 0x19	; 25
 62c:	f3 e0       	ldi	r31, 0x03	; 3
 62e:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__prologue_saves__+0x20>
 632:	ae 01       	movw	r20, r28
 634:	4b 5f       	subi	r20, 0xFB	; 251
 636:	5f 4f       	sbci	r21, 0xFF	; 255
 638:	fa 01       	movw	r30, r20
 63a:	61 91       	ld	r22, Z+
 63c:	71 91       	ld	r23, Z+
 63e:	af 01       	movw	r20, r30
 640:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__iob+0x2>
 644:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <__iob+0x3>
 648:	0e 94 59 03 	call	0x6b2	; 0x6b2 <vfprintf>
 64c:	e2 e0       	ldi	r30, 0x02	; 2
 64e:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__epilogue_restores__+0x20>

00000652 <snprintf>:
 652:	ae e0       	ldi	r26, 0x0E	; 14
 654:	b0 e0       	ldi	r27, 0x00	; 0
 656:	ef e2       	ldi	r30, 0x2F	; 47
 658:	f3 e0       	ldi	r31, 0x03	; 3
 65a:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__prologue_saves__+0x1c>
 65e:	0d 89       	ldd	r16, Y+21	; 0x15
 660:	1e 89       	ldd	r17, Y+22	; 0x16
 662:	8f 89       	ldd	r24, Y+23	; 0x17
 664:	98 8d       	ldd	r25, Y+24	; 0x18
 666:	26 e0       	ldi	r18, 0x06	; 6
 668:	2c 83       	std	Y+4, r18	; 0x04
 66a:	1a 83       	std	Y+2, r17	; 0x02
 66c:	09 83       	std	Y+1, r16	; 0x01
 66e:	97 ff       	sbrs	r25, 7
 670:	02 c0       	rjmp	.+4      	; 0x676 <snprintf+0x24>
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	90 e8       	ldi	r25, 0x80	; 128
 676:	01 97       	sbiw	r24, 0x01	; 1
 678:	9e 83       	std	Y+6, r25	; 0x06
 67a:	8d 83       	std	Y+5, r24	; 0x05
 67c:	ae 01       	movw	r20, r28
 67e:	45 5e       	subi	r20, 0xE5	; 229
 680:	5f 4f       	sbci	r21, 0xFF	; 255
 682:	69 8d       	ldd	r22, Y+25	; 0x19
 684:	7a 8d       	ldd	r23, Y+26	; 0x1a
 686:	ce 01       	movw	r24, r28
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <vfprintf>
 68e:	4d 81       	ldd	r20, Y+5	; 0x05
 690:	5e 81       	ldd	r21, Y+6	; 0x06
 692:	57 fd       	sbrc	r21, 7
 694:	0a c0       	rjmp	.+20     	; 0x6aa <snprintf+0x58>
 696:	2f 81       	ldd	r18, Y+7	; 0x07
 698:	38 85       	ldd	r19, Y+8	; 0x08
 69a:	42 17       	cp	r20, r18
 69c:	53 07       	cpc	r21, r19
 69e:	0c f4       	brge	.+2      	; 0x6a2 <snprintf+0x50>
 6a0:	9a 01       	movw	r18, r20
 6a2:	f8 01       	movw	r30, r16
 6a4:	e2 0f       	add	r30, r18
 6a6:	f3 1f       	adc	r31, r19
 6a8:	10 82       	st	Z, r1
 6aa:	2e 96       	adiw	r28, 0x0e	; 14
 6ac:	e4 e0       	ldi	r30, 0x04	; 4
 6ae:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__epilogue_restores__+0x1c>

000006b2 <vfprintf>:
 6b2:	ab e0       	ldi	r26, 0x0B	; 11
 6b4:	b0 e0       	ldi	r27, 0x00	; 0
 6b6:	ef e5       	ldi	r30, 0x5F	; 95
 6b8:	f3 e0       	ldi	r31, 0x03	; 3
 6ba:	0c 94 ea 05 	jmp	0xbd4	; 0xbd4 <__prologue_saves__>
 6be:	6c 01       	movw	r12, r24
 6c0:	7b 01       	movw	r14, r22
 6c2:	8a 01       	movw	r16, r20
 6c4:	fc 01       	movw	r30, r24
 6c6:	17 82       	std	Z+7, r1	; 0x07
 6c8:	16 82       	std	Z+6, r1	; 0x06
 6ca:	83 81       	ldd	r24, Z+3	; 0x03
 6cc:	81 ff       	sbrs	r24, 1
 6ce:	cc c1       	rjmp	.+920    	; 0xa68 <__stack+0x169>
 6d0:	ce 01       	movw	r24, r28
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	3c 01       	movw	r6, r24
 6d6:	f6 01       	movw	r30, r12
 6d8:	93 81       	ldd	r25, Z+3	; 0x03
 6da:	f7 01       	movw	r30, r14
 6dc:	93 fd       	sbrc	r25, 3
 6de:	85 91       	lpm	r24, Z+
 6e0:	93 ff       	sbrs	r25, 3
 6e2:	81 91       	ld	r24, Z+
 6e4:	7f 01       	movw	r14, r30
 6e6:	88 23       	and	r24, r24
 6e8:	09 f4       	brne	.+2      	; 0x6ec <vfprintf+0x3a>
 6ea:	ba c1       	rjmp	.+884    	; 0xa60 <__stack+0x161>
 6ec:	85 32       	cpi	r24, 0x25	; 37
 6ee:	39 f4       	brne	.+14     	; 0x6fe <vfprintf+0x4c>
 6f0:	93 fd       	sbrc	r25, 3
 6f2:	85 91       	lpm	r24, Z+
 6f4:	93 ff       	sbrs	r25, 3
 6f6:	81 91       	ld	r24, Z+
 6f8:	7f 01       	movw	r14, r30
 6fa:	85 32       	cpi	r24, 0x25	; 37
 6fc:	29 f4       	brne	.+10     	; 0x708 <vfprintf+0x56>
 6fe:	b6 01       	movw	r22, r12
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 706:	e7 cf       	rjmp	.-50     	; 0x6d6 <vfprintf+0x24>
 708:	91 2c       	mov	r9, r1
 70a:	21 2c       	mov	r2, r1
 70c:	31 2c       	mov	r3, r1
 70e:	ff e1       	ldi	r31, 0x1F	; 31
 710:	f3 15       	cp	r31, r3
 712:	d8 f0       	brcs	.+54     	; 0x74a <vfprintf+0x98>
 714:	8b 32       	cpi	r24, 0x2B	; 43
 716:	79 f0       	breq	.+30     	; 0x736 <vfprintf+0x84>
 718:	38 f4       	brcc	.+14     	; 0x728 <vfprintf+0x76>
 71a:	80 32       	cpi	r24, 0x20	; 32
 71c:	79 f0       	breq	.+30     	; 0x73c <vfprintf+0x8a>
 71e:	83 32       	cpi	r24, 0x23	; 35
 720:	a1 f4       	brne	.+40     	; 0x74a <vfprintf+0x98>
 722:	23 2d       	mov	r18, r3
 724:	20 61       	ori	r18, 0x10	; 16
 726:	1d c0       	rjmp	.+58     	; 0x762 <vfprintf+0xb0>
 728:	8d 32       	cpi	r24, 0x2D	; 45
 72a:	61 f0       	breq	.+24     	; 0x744 <vfprintf+0x92>
 72c:	80 33       	cpi	r24, 0x30	; 48
 72e:	69 f4       	brne	.+26     	; 0x74a <vfprintf+0x98>
 730:	23 2d       	mov	r18, r3
 732:	21 60       	ori	r18, 0x01	; 1
 734:	16 c0       	rjmp	.+44     	; 0x762 <vfprintf+0xb0>
 736:	83 2d       	mov	r24, r3
 738:	82 60       	ori	r24, 0x02	; 2
 73a:	38 2e       	mov	r3, r24
 73c:	e3 2d       	mov	r30, r3
 73e:	e4 60       	ori	r30, 0x04	; 4
 740:	3e 2e       	mov	r3, r30
 742:	2a c0       	rjmp	.+84     	; 0x798 <vfprintf+0xe6>
 744:	f3 2d       	mov	r31, r3
 746:	f8 60       	ori	r31, 0x08	; 8
 748:	1d c0       	rjmp	.+58     	; 0x784 <vfprintf+0xd2>
 74a:	37 fc       	sbrc	r3, 7
 74c:	2d c0       	rjmp	.+90     	; 0x7a8 <vfprintf+0xf6>
 74e:	20 ed       	ldi	r18, 0xD0	; 208
 750:	28 0f       	add	r18, r24
 752:	2a 30       	cpi	r18, 0x0A	; 10
 754:	40 f0       	brcs	.+16     	; 0x766 <vfprintf+0xb4>
 756:	8e 32       	cpi	r24, 0x2E	; 46
 758:	b9 f4       	brne	.+46     	; 0x788 <vfprintf+0xd6>
 75a:	36 fc       	sbrc	r3, 6
 75c:	81 c1       	rjmp	.+770    	; 0xa60 <__stack+0x161>
 75e:	23 2d       	mov	r18, r3
 760:	20 64       	ori	r18, 0x40	; 64
 762:	32 2e       	mov	r3, r18
 764:	19 c0       	rjmp	.+50     	; 0x798 <vfprintf+0xe6>
 766:	36 fe       	sbrs	r3, 6
 768:	06 c0       	rjmp	.+12     	; 0x776 <vfprintf+0xc4>
 76a:	8a e0       	ldi	r24, 0x0A	; 10
 76c:	98 9e       	mul	r9, r24
 76e:	20 0d       	add	r18, r0
 770:	11 24       	eor	r1, r1
 772:	92 2e       	mov	r9, r18
 774:	11 c0       	rjmp	.+34     	; 0x798 <vfprintf+0xe6>
 776:	ea e0       	ldi	r30, 0x0A	; 10
 778:	2e 9e       	mul	r2, r30
 77a:	20 0d       	add	r18, r0
 77c:	11 24       	eor	r1, r1
 77e:	22 2e       	mov	r2, r18
 780:	f3 2d       	mov	r31, r3
 782:	f0 62       	ori	r31, 0x20	; 32
 784:	3f 2e       	mov	r3, r31
 786:	08 c0       	rjmp	.+16     	; 0x798 <vfprintf+0xe6>
 788:	8c 36       	cpi	r24, 0x6C	; 108
 78a:	21 f4       	brne	.+8      	; 0x794 <vfprintf+0xe2>
 78c:	83 2d       	mov	r24, r3
 78e:	80 68       	ori	r24, 0x80	; 128
 790:	38 2e       	mov	r3, r24
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0xe6>
 794:	88 36       	cpi	r24, 0x68	; 104
 796:	41 f4       	brne	.+16     	; 0x7a8 <vfprintf+0xf6>
 798:	f7 01       	movw	r30, r14
 79a:	93 fd       	sbrc	r25, 3
 79c:	85 91       	lpm	r24, Z+
 79e:	93 ff       	sbrs	r25, 3
 7a0:	81 91       	ld	r24, Z+
 7a2:	7f 01       	movw	r14, r30
 7a4:	81 11       	cpse	r24, r1
 7a6:	b3 cf       	rjmp	.-154    	; 0x70e <vfprintf+0x5c>
 7a8:	98 2f       	mov	r25, r24
 7aa:	9f 7d       	andi	r25, 0xDF	; 223
 7ac:	95 54       	subi	r25, 0x45	; 69
 7ae:	93 30       	cpi	r25, 0x03	; 3
 7b0:	28 f4       	brcc	.+10     	; 0x7bc <vfprintf+0x10a>
 7b2:	0c 5f       	subi	r16, 0xFC	; 252
 7b4:	1f 4f       	sbci	r17, 0xFF	; 255
 7b6:	9f e3       	ldi	r25, 0x3F	; 63
 7b8:	99 83       	std	Y+1, r25	; 0x01
 7ba:	0d c0       	rjmp	.+26     	; 0x7d6 <vfprintf+0x124>
 7bc:	83 36       	cpi	r24, 0x63	; 99
 7be:	31 f0       	breq	.+12     	; 0x7cc <vfprintf+0x11a>
 7c0:	83 37       	cpi	r24, 0x73	; 115
 7c2:	71 f0       	breq	.+28     	; 0x7e0 <vfprintf+0x12e>
 7c4:	83 35       	cpi	r24, 0x53	; 83
 7c6:	09 f0       	breq	.+2      	; 0x7ca <vfprintf+0x118>
 7c8:	59 c0       	rjmp	.+178    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 7ca:	21 c0       	rjmp	.+66     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 7cc:	f8 01       	movw	r30, r16
 7ce:	80 81       	ld	r24, Z
 7d0:	89 83       	std	Y+1, r24	; 0x01
 7d2:	0e 5f       	subi	r16, 0xFE	; 254
 7d4:	1f 4f       	sbci	r17, 0xFF	; 255
 7d6:	88 24       	eor	r8, r8
 7d8:	83 94       	inc	r8
 7da:	91 2c       	mov	r9, r1
 7dc:	53 01       	movw	r10, r6
 7de:	13 c0       	rjmp	.+38     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7e0:	28 01       	movw	r4, r16
 7e2:	f2 e0       	ldi	r31, 0x02	; 2
 7e4:	4f 0e       	add	r4, r31
 7e6:	51 1c       	adc	r5, r1
 7e8:	f8 01       	movw	r30, r16
 7ea:	a0 80       	ld	r10, Z
 7ec:	b1 80       	ldd	r11, Z+1	; 0x01
 7ee:	36 fe       	sbrs	r3, 6
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <vfprintf+0x146>
 7f2:	69 2d       	mov	r22, r9
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <vfprintf+0x14a>
 7f8:	6f ef       	ldi	r22, 0xFF	; 255
 7fa:	7f ef       	ldi	r23, 0xFF	; 255
 7fc:	c5 01       	movw	r24, r10
 7fe:	0e 94 45 05 	call	0xa8a	; 0xa8a <strnlen>
 802:	4c 01       	movw	r8, r24
 804:	82 01       	movw	r16, r4
 806:	f3 2d       	mov	r31, r3
 808:	ff 77       	andi	r31, 0x7F	; 127
 80a:	3f 2e       	mov	r3, r31
 80c:	16 c0       	rjmp	.+44     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 80e:	28 01       	movw	r4, r16
 810:	22 e0       	ldi	r18, 0x02	; 2
 812:	42 0e       	add	r4, r18
 814:	51 1c       	adc	r5, r1
 816:	f8 01       	movw	r30, r16
 818:	a0 80       	ld	r10, Z
 81a:	b1 80       	ldd	r11, Z+1	; 0x01
 81c:	36 fe       	sbrs	r3, 6
 81e:	03 c0       	rjmp	.+6      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 820:	69 2d       	mov	r22, r9
 822:	70 e0       	ldi	r23, 0x00	; 0
 824:	02 c0       	rjmp	.+4      	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 826:	6f ef       	ldi	r22, 0xFF	; 255
 828:	7f ef       	ldi	r23, 0xFF	; 255
 82a:	c5 01       	movw	r24, r10
 82c:	0e 94 3a 05 	call	0xa74	; 0xa74 <strnlen_P>
 830:	4c 01       	movw	r8, r24
 832:	f3 2d       	mov	r31, r3
 834:	f0 68       	ori	r31, 0x80	; 128
 836:	3f 2e       	mov	r3, r31
 838:	82 01       	movw	r16, r4
 83a:	33 fc       	sbrc	r3, 3
 83c:	1b c0       	rjmp	.+54     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 83e:	82 2d       	mov	r24, r2
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	88 16       	cp	r8, r24
 844:	99 06       	cpc	r9, r25
 846:	b0 f4       	brcc	.+44     	; 0x874 <__DATA_REGION_LENGTH__+0x74>
 848:	b6 01       	movw	r22, r12
 84a:	80 e2       	ldi	r24, 0x20	; 32
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 852:	2a 94       	dec	r2
 854:	f4 cf       	rjmp	.-24     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 856:	f5 01       	movw	r30, r10
 858:	37 fc       	sbrc	r3, 7
 85a:	85 91       	lpm	r24, Z+
 85c:	37 fe       	sbrs	r3, 7
 85e:	81 91       	ld	r24, Z+
 860:	5f 01       	movw	r10, r30
 862:	b6 01       	movw	r22, r12
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 86a:	21 10       	cpse	r2, r1
 86c:	2a 94       	dec	r2
 86e:	21 e0       	ldi	r18, 0x01	; 1
 870:	82 1a       	sub	r8, r18
 872:	91 08       	sbc	r9, r1
 874:	81 14       	cp	r8, r1
 876:	91 04       	cpc	r9, r1
 878:	71 f7       	brne	.-36     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 87a:	e8 c0       	rjmp	.+464    	; 0xa4c <__stack+0x14d>
 87c:	84 36       	cpi	r24, 0x64	; 100
 87e:	11 f0       	breq	.+4      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 880:	89 36       	cpi	r24, 0x69	; 105
 882:	41 f5       	brne	.+80     	; 0x8d4 <__DATA_REGION_LENGTH__+0xd4>
 884:	f8 01       	movw	r30, r16
 886:	37 fe       	sbrs	r3, 7
 888:	07 c0       	rjmp	.+14     	; 0x898 <__DATA_REGION_LENGTH__+0x98>
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	82 81       	ldd	r24, Z+2	; 0x02
 890:	93 81       	ldd	r25, Z+3	; 0x03
 892:	0c 5f       	subi	r16, 0xFC	; 252
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	08 c0       	rjmp	.+16     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 898:	60 81       	ld	r22, Z
 89a:	71 81       	ldd	r23, Z+1	; 0x01
 89c:	07 2e       	mov	r0, r23
 89e:	00 0c       	add	r0, r0
 8a0:	88 0b       	sbc	r24, r24
 8a2:	99 0b       	sbc	r25, r25
 8a4:	0e 5f       	subi	r16, 0xFE	; 254
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	f3 2d       	mov	r31, r3
 8aa:	ff 76       	andi	r31, 0x6F	; 111
 8ac:	3f 2e       	mov	r3, r31
 8ae:	97 ff       	sbrs	r25, 7
 8b0:	09 c0       	rjmp	.+18     	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8b2:	90 95       	com	r25
 8b4:	80 95       	com	r24
 8b6:	70 95       	com	r23
 8b8:	61 95       	neg	r22
 8ba:	7f 4f       	sbci	r23, 0xFF	; 255
 8bc:	8f 4f       	sbci	r24, 0xFF	; 255
 8be:	9f 4f       	sbci	r25, 0xFF	; 255
 8c0:	f0 68       	ori	r31, 0x80	; 128
 8c2:	3f 2e       	mov	r3, r31
 8c4:	2a e0       	ldi	r18, 0x0A	; 10
 8c6:	30 e0       	ldi	r19, 0x00	; 0
 8c8:	a3 01       	movw	r20, r6
 8ca:	0e 94 8c 05 	call	0xb18	; 0xb18 <__ultoa_invert>
 8ce:	88 2e       	mov	r8, r24
 8d0:	86 18       	sub	r8, r6
 8d2:	45 c0       	rjmp	.+138    	; 0x95e <__stack+0x5f>
 8d4:	85 37       	cpi	r24, 0x75	; 117
 8d6:	31 f4       	brne	.+12     	; 0x8e4 <__DATA_REGION_LENGTH__+0xe4>
 8d8:	23 2d       	mov	r18, r3
 8da:	2f 7e       	andi	r18, 0xEF	; 239
 8dc:	b2 2e       	mov	r11, r18
 8de:	2a e0       	ldi	r18, 0x0A	; 10
 8e0:	30 e0       	ldi	r19, 0x00	; 0
 8e2:	25 c0       	rjmp	.+74     	; 0x92e <__stack+0x2f>
 8e4:	93 2d       	mov	r25, r3
 8e6:	99 7f       	andi	r25, 0xF9	; 249
 8e8:	b9 2e       	mov	r11, r25
 8ea:	8f 36       	cpi	r24, 0x6F	; 111
 8ec:	c1 f0       	breq	.+48     	; 0x91e <__stack+0x1f>
 8ee:	18 f4       	brcc	.+6      	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 8f0:	88 35       	cpi	r24, 0x58	; 88
 8f2:	79 f0       	breq	.+30     	; 0x912 <__stack+0x13>
 8f4:	b5 c0       	rjmp	.+362    	; 0xa60 <__stack+0x161>
 8f6:	80 37       	cpi	r24, 0x70	; 112
 8f8:	19 f0       	breq	.+6      	; 0x900 <__stack+0x1>
 8fa:	88 37       	cpi	r24, 0x78	; 120
 8fc:	21 f0       	breq	.+8      	; 0x906 <__stack+0x7>
 8fe:	b0 c0       	rjmp	.+352    	; 0xa60 <__stack+0x161>
 900:	e9 2f       	mov	r30, r25
 902:	e0 61       	ori	r30, 0x10	; 16
 904:	be 2e       	mov	r11, r30
 906:	b4 fe       	sbrs	r11, 4
 908:	0d c0       	rjmp	.+26     	; 0x924 <__stack+0x25>
 90a:	fb 2d       	mov	r31, r11
 90c:	f4 60       	ori	r31, 0x04	; 4
 90e:	bf 2e       	mov	r11, r31
 910:	09 c0       	rjmp	.+18     	; 0x924 <__stack+0x25>
 912:	34 fe       	sbrs	r3, 4
 914:	0a c0       	rjmp	.+20     	; 0x92a <__stack+0x2b>
 916:	29 2f       	mov	r18, r25
 918:	26 60       	ori	r18, 0x06	; 6
 91a:	b2 2e       	mov	r11, r18
 91c:	06 c0       	rjmp	.+12     	; 0x92a <__stack+0x2b>
 91e:	28 e0       	ldi	r18, 0x08	; 8
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	05 c0       	rjmp	.+10     	; 0x92e <__stack+0x2f>
 924:	20 e1       	ldi	r18, 0x10	; 16
 926:	30 e0       	ldi	r19, 0x00	; 0
 928:	02 c0       	rjmp	.+4      	; 0x92e <__stack+0x2f>
 92a:	20 e1       	ldi	r18, 0x10	; 16
 92c:	32 e0       	ldi	r19, 0x02	; 2
 92e:	f8 01       	movw	r30, r16
 930:	b7 fe       	sbrs	r11, 7
 932:	07 c0       	rjmp	.+14     	; 0x942 <__stack+0x43>
 934:	60 81       	ld	r22, Z
 936:	71 81       	ldd	r23, Z+1	; 0x01
 938:	82 81       	ldd	r24, Z+2	; 0x02
 93a:	93 81       	ldd	r25, Z+3	; 0x03
 93c:	0c 5f       	subi	r16, 0xFC	; 252
 93e:	1f 4f       	sbci	r17, 0xFF	; 255
 940:	06 c0       	rjmp	.+12     	; 0x94e <__stack+0x4f>
 942:	60 81       	ld	r22, Z
 944:	71 81       	ldd	r23, Z+1	; 0x01
 946:	80 e0       	ldi	r24, 0x00	; 0
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	0e 5f       	subi	r16, 0xFE	; 254
 94c:	1f 4f       	sbci	r17, 0xFF	; 255
 94e:	a3 01       	movw	r20, r6
 950:	0e 94 8c 05 	call	0xb18	; 0xb18 <__ultoa_invert>
 954:	88 2e       	mov	r8, r24
 956:	86 18       	sub	r8, r6
 958:	fb 2d       	mov	r31, r11
 95a:	ff 77       	andi	r31, 0x7F	; 127
 95c:	3f 2e       	mov	r3, r31
 95e:	36 fe       	sbrs	r3, 6
 960:	0d c0       	rjmp	.+26     	; 0x97c <__stack+0x7d>
 962:	23 2d       	mov	r18, r3
 964:	2e 7f       	andi	r18, 0xFE	; 254
 966:	a2 2e       	mov	r10, r18
 968:	89 14       	cp	r8, r9
 96a:	58 f4       	brcc	.+22     	; 0x982 <__stack+0x83>
 96c:	34 fe       	sbrs	r3, 4
 96e:	0b c0       	rjmp	.+22     	; 0x986 <__stack+0x87>
 970:	32 fc       	sbrc	r3, 2
 972:	09 c0       	rjmp	.+18     	; 0x986 <__stack+0x87>
 974:	83 2d       	mov	r24, r3
 976:	8e 7e       	andi	r24, 0xEE	; 238
 978:	a8 2e       	mov	r10, r24
 97a:	05 c0       	rjmp	.+10     	; 0x986 <__stack+0x87>
 97c:	b8 2c       	mov	r11, r8
 97e:	a3 2c       	mov	r10, r3
 980:	03 c0       	rjmp	.+6      	; 0x988 <__stack+0x89>
 982:	b8 2c       	mov	r11, r8
 984:	01 c0       	rjmp	.+2      	; 0x988 <__stack+0x89>
 986:	b9 2c       	mov	r11, r9
 988:	a4 fe       	sbrs	r10, 4
 98a:	0f c0       	rjmp	.+30     	; 0x9aa <__stack+0xab>
 98c:	fe 01       	movw	r30, r28
 98e:	e8 0d       	add	r30, r8
 990:	f1 1d       	adc	r31, r1
 992:	80 81       	ld	r24, Z
 994:	80 33       	cpi	r24, 0x30	; 48
 996:	21 f4       	brne	.+8      	; 0x9a0 <__stack+0xa1>
 998:	9a 2d       	mov	r25, r10
 99a:	99 7e       	andi	r25, 0xE9	; 233
 99c:	a9 2e       	mov	r10, r25
 99e:	09 c0       	rjmp	.+18     	; 0x9b2 <__stack+0xb3>
 9a0:	a2 fe       	sbrs	r10, 2
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <__stack+0xb1>
 9a4:	b3 94       	inc	r11
 9a6:	b3 94       	inc	r11
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__stack+0xb3>
 9aa:	8a 2d       	mov	r24, r10
 9ac:	86 78       	andi	r24, 0x86	; 134
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <__stack+0xb3>
 9b0:	b3 94       	inc	r11
 9b2:	a3 fc       	sbrc	r10, 3
 9b4:	11 c0       	rjmp	.+34     	; 0x9d8 <__stack+0xd9>
 9b6:	a0 fe       	sbrs	r10, 0
 9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__stack+0xc7>
 9ba:	b2 14       	cp	r11, r2
 9bc:	88 f4       	brcc	.+34     	; 0x9e0 <__stack+0xe1>
 9be:	28 0c       	add	r2, r8
 9c0:	92 2c       	mov	r9, r2
 9c2:	9b 18       	sub	r9, r11
 9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <__stack+0xe3>
 9c6:	b2 14       	cp	r11, r2
 9c8:	60 f4       	brcc	.+24     	; 0x9e2 <__stack+0xe3>
 9ca:	b6 01       	movw	r22, r12
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 9d4:	b3 94       	inc	r11
 9d6:	f7 cf       	rjmp	.-18     	; 0x9c6 <__stack+0xc7>
 9d8:	b2 14       	cp	r11, r2
 9da:	18 f4       	brcc	.+6      	; 0x9e2 <__stack+0xe3>
 9dc:	2b 18       	sub	r2, r11
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <__stack+0xe5>
 9e0:	98 2c       	mov	r9, r8
 9e2:	21 2c       	mov	r2, r1
 9e4:	a4 fe       	sbrs	r10, 4
 9e6:	10 c0       	rjmp	.+32     	; 0xa08 <__stack+0x109>
 9e8:	b6 01       	movw	r22, r12
 9ea:	80 e3       	ldi	r24, 0x30	; 48
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 9f2:	a2 fe       	sbrs	r10, 2
 9f4:	17 c0       	rjmp	.+46     	; 0xa24 <__stack+0x125>
 9f6:	a1 fc       	sbrc	r10, 1
 9f8:	03 c0       	rjmp	.+6      	; 0xa00 <__stack+0x101>
 9fa:	88 e7       	ldi	r24, 0x78	; 120
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	02 c0       	rjmp	.+4      	; 0xa04 <__stack+0x105>
 a00:	88 e5       	ldi	r24, 0x58	; 88
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	b6 01       	movw	r22, r12
 a06:	0c c0       	rjmp	.+24     	; 0xa20 <__stack+0x121>
 a08:	8a 2d       	mov	r24, r10
 a0a:	86 78       	andi	r24, 0x86	; 134
 a0c:	59 f0       	breq	.+22     	; 0xa24 <__stack+0x125>
 a0e:	a1 fe       	sbrs	r10, 1
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <__stack+0x117>
 a12:	8b e2       	ldi	r24, 0x2B	; 43
 a14:	01 c0       	rjmp	.+2      	; 0xa18 <__stack+0x119>
 a16:	80 e2       	ldi	r24, 0x20	; 32
 a18:	a7 fc       	sbrc	r10, 7
 a1a:	8d e2       	ldi	r24, 0x2D	; 45
 a1c:	b6 01       	movw	r22, r12
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 a24:	89 14       	cp	r8, r9
 a26:	38 f4       	brcc	.+14     	; 0xa36 <__stack+0x137>
 a28:	b6 01       	movw	r22, r12
 a2a:	80 e3       	ldi	r24, 0x30	; 48
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 a32:	9a 94       	dec	r9
 a34:	f7 cf       	rjmp	.-18     	; 0xa24 <__stack+0x125>
 a36:	8a 94       	dec	r8
 a38:	f3 01       	movw	r30, r6
 a3a:	e8 0d       	add	r30, r8
 a3c:	f1 1d       	adc	r31, r1
 a3e:	80 81       	ld	r24, Z
 a40:	b6 01       	movw	r22, r12
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 a48:	81 10       	cpse	r8, r1
 a4a:	f5 cf       	rjmp	.-22     	; 0xa36 <__stack+0x137>
 a4c:	22 20       	and	r2, r2
 a4e:	09 f4       	brne	.+2      	; 0xa52 <__stack+0x153>
 a50:	42 ce       	rjmp	.-892    	; 0x6d6 <vfprintf+0x24>
 a52:	b6 01       	movw	r22, r12
 a54:	80 e2       	ldi	r24, 0x20	; 32
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 50 05 	call	0xaa0	; 0xaa0 <fputc>
 a5c:	2a 94       	dec	r2
 a5e:	f6 cf       	rjmp	.-20     	; 0xa4c <__stack+0x14d>
 a60:	f6 01       	movw	r30, r12
 a62:	86 81       	ldd	r24, Z+6	; 0x06
 a64:	97 81       	ldd	r25, Z+7	; 0x07
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <__stack+0x16d>
 a68:	8f ef       	ldi	r24, 0xFF	; 255
 a6a:	9f ef       	ldi	r25, 0xFF	; 255
 a6c:	2b 96       	adiw	r28, 0x0b	; 11
 a6e:	e2 e1       	ldi	r30, 0x12	; 18
 a70:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__epilogue_restores__>

00000a74 <strnlen_P>:
 a74:	fc 01       	movw	r30, r24
 a76:	05 90       	lpm	r0, Z+
 a78:	61 50       	subi	r22, 0x01	; 1
 a7a:	70 40       	sbci	r23, 0x00	; 0
 a7c:	01 10       	cpse	r0, r1
 a7e:	d8 f7       	brcc	.-10     	; 0xa76 <strnlen_P+0x2>
 a80:	80 95       	com	r24
 a82:	90 95       	com	r25
 a84:	8e 0f       	add	r24, r30
 a86:	9f 1f       	adc	r25, r31
 a88:	08 95       	ret

00000a8a <strnlen>:
 a8a:	fc 01       	movw	r30, r24
 a8c:	61 50       	subi	r22, 0x01	; 1
 a8e:	70 40       	sbci	r23, 0x00	; 0
 a90:	01 90       	ld	r0, Z+
 a92:	01 10       	cpse	r0, r1
 a94:	d8 f7       	brcc	.-10     	; 0xa8c <strnlen+0x2>
 a96:	80 95       	com	r24
 a98:	90 95       	com	r25
 a9a:	8e 0f       	add	r24, r30
 a9c:	9f 1f       	adc	r25, r31
 a9e:	08 95       	ret

00000aa0 <fputc>:
 aa0:	0f 93       	push	r16
 aa2:	1f 93       	push	r17
 aa4:	cf 93       	push	r28
 aa6:	df 93       	push	r29
 aa8:	fb 01       	movw	r30, r22
 aaa:	23 81       	ldd	r18, Z+3	; 0x03
 aac:	21 fd       	sbrc	r18, 1
 aae:	03 c0       	rjmp	.+6      	; 0xab6 <fputc+0x16>
 ab0:	8f ef       	ldi	r24, 0xFF	; 255
 ab2:	9f ef       	ldi	r25, 0xFF	; 255
 ab4:	2c c0       	rjmp	.+88     	; 0xb0e <fputc+0x6e>
 ab6:	22 ff       	sbrs	r18, 2
 ab8:	16 c0       	rjmp	.+44     	; 0xae6 <fputc+0x46>
 aba:	46 81       	ldd	r20, Z+6	; 0x06
 abc:	57 81       	ldd	r21, Z+7	; 0x07
 abe:	24 81       	ldd	r18, Z+4	; 0x04
 ac0:	35 81       	ldd	r19, Z+5	; 0x05
 ac2:	42 17       	cp	r20, r18
 ac4:	53 07       	cpc	r21, r19
 ac6:	44 f4       	brge	.+16     	; 0xad8 <fputc+0x38>
 ac8:	a0 81       	ld	r26, Z
 aca:	b1 81       	ldd	r27, Z+1	; 0x01
 acc:	9d 01       	movw	r18, r26
 ace:	2f 5f       	subi	r18, 0xFF	; 255
 ad0:	3f 4f       	sbci	r19, 0xFF	; 255
 ad2:	31 83       	std	Z+1, r19	; 0x01
 ad4:	20 83       	st	Z, r18
 ad6:	8c 93       	st	X, r24
 ad8:	26 81       	ldd	r18, Z+6	; 0x06
 ada:	37 81       	ldd	r19, Z+7	; 0x07
 adc:	2f 5f       	subi	r18, 0xFF	; 255
 ade:	3f 4f       	sbci	r19, 0xFF	; 255
 ae0:	37 83       	std	Z+7, r19	; 0x07
 ae2:	26 83       	std	Z+6, r18	; 0x06
 ae4:	14 c0       	rjmp	.+40     	; 0xb0e <fputc+0x6e>
 ae6:	8b 01       	movw	r16, r22
 ae8:	ec 01       	movw	r28, r24
 aea:	fb 01       	movw	r30, r22
 aec:	00 84       	ldd	r0, Z+8	; 0x08
 aee:	f1 85       	ldd	r31, Z+9	; 0x09
 af0:	e0 2d       	mov	r30, r0
 af2:	09 95       	icall
 af4:	89 2b       	or	r24, r25
 af6:	e1 f6       	brne	.-72     	; 0xab0 <fputc+0x10>
 af8:	d8 01       	movw	r26, r16
 afa:	16 96       	adiw	r26, 0x06	; 6
 afc:	8d 91       	ld	r24, X+
 afe:	9c 91       	ld	r25, X
 b00:	17 97       	sbiw	r26, 0x07	; 7
 b02:	01 96       	adiw	r24, 0x01	; 1
 b04:	17 96       	adiw	r26, 0x07	; 7
 b06:	9c 93       	st	X, r25
 b08:	8e 93       	st	-X, r24
 b0a:	16 97       	sbiw	r26, 0x06	; 6
 b0c:	ce 01       	movw	r24, r28
 b0e:	df 91       	pop	r29
 b10:	cf 91       	pop	r28
 b12:	1f 91       	pop	r17
 b14:	0f 91       	pop	r16
 b16:	08 95       	ret

00000b18 <__ultoa_invert>:
 b18:	fa 01       	movw	r30, r20
 b1a:	aa 27       	eor	r26, r26
 b1c:	28 30       	cpi	r18, 0x08	; 8
 b1e:	51 f1       	breq	.+84     	; 0xb74 <__ultoa_invert+0x5c>
 b20:	20 31       	cpi	r18, 0x10	; 16
 b22:	81 f1       	breq	.+96     	; 0xb84 <__ultoa_invert+0x6c>
 b24:	e8 94       	clt
 b26:	6f 93       	push	r22
 b28:	6e 7f       	andi	r22, 0xFE	; 254
 b2a:	6e 5f       	subi	r22, 0xFE	; 254
 b2c:	7f 4f       	sbci	r23, 0xFF	; 255
 b2e:	8f 4f       	sbci	r24, 0xFF	; 255
 b30:	9f 4f       	sbci	r25, 0xFF	; 255
 b32:	af 4f       	sbci	r26, 0xFF	; 255
 b34:	b1 e0       	ldi	r27, 0x01	; 1
 b36:	3e d0       	rcall	.+124    	; 0xbb4 <__ultoa_invert+0x9c>
 b38:	b4 e0       	ldi	r27, 0x04	; 4
 b3a:	3c d0       	rcall	.+120    	; 0xbb4 <__ultoa_invert+0x9c>
 b3c:	67 0f       	add	r22, r23
 b3e:	78 1f       	adc	r23, r24
 b40:	89 1f       	adc	r24, r25
 b42:	9a 1f       	adc	r25, r26
 b44:	a1 1d       	adc	r26, r1
 b46:	68 0f       	add	r22, r24
 b48:	79 1f       	adc	r23, r25
 b4a:	8a 1f       	adc	r24, r26
 b4c:	91 1d       	adc	r25, r1
 b4e:	a1 1d       	adc	r26, r1
 b50:	6a 0f       	add	r22, r26
 b52:	71 1d       	adc	r23, r1
 b54:	81 1d       	adc	r24, r1
 b56:	91 1d       	adc	r25, r1
 b58:	a1 1d       	adc	r26, r1
 b5a:	20 d0       	rcall	.+64     	; 0xb9c <__ultoa_invert+0x84>
 b5c:	09 f4       	brne	.+2      	; 0xb60 <__ultoa_invert+0x48>
 b5e:	68 94       	set
 b60:	3f 91       	pop	r19
 b62:	2a e0       	ldi	r18, 0x0A	; 10
 b64:	26 9f       	mul	r18, r22
 b66:	11 24       	eor	r1, r1
 b68:	30 19       	sub	r19, r0
 b6a:	30 5d       	subi	r19, 0xD0	; 208
 b6c:	31 93       	st	Z+, r19
 b6e:	de f6       	brtc	.-74     	; 0xb26 <__ultoa_invert+0xe>
 b70:	cf 01       	movw	r24, r30
 b72:	08 95       	ret
 b74:	46 2f       	mov	r20, r22
 b76:	47 70       	andi	r20, 0x07	; 7
 b78:	40 5d       	subi	r20, 0xD0	; 208
 b7a:	41 93       	st	Z+, r20
 b7c:	b3 e0       	ldi	r27, 0x03	; 3
 b7e:	0f d0       	rcall	.+30     	; 0xb9e <__ultoa_invert+0x86>
 b80:	c9 f7       	brne	.-14     	; 0xb74 <__ultoa_invert+0x5c>
 b82:	f6 cf       	rjmp	.-20     	; 0xb70 <__ultoa_invert+0x58>
 b84:	46 2f       	mov	r20, r22
 b86:	4f 70       	andi	r20, 0x0F	; 15
 b88:	40 5d       	subi	r20, 0xD0	; 208
 b8a:	4a 33       	cpi	r20, 0x3A	; 58
 b8c:	18 f0       	brcs	.+6      	; 0xb94 <__ultoa_invert+0x7c>
 b8e:	49 5d       	subi	r20, 0xD9	; 217
 b90:	31 fd       	sbrc	r19, 1
 b92:	40 52       	subi	r20, 0x20	; 32
 b94:	41 93       	st	Z+, r20
 b96:	02 d0       	rcall	.+4      	; 0xb9c <__ultoa_invert+0x84>
 b98:	a9 f7       	brne	.-22     	; 0xb84 <__ultoa_invert+0x6c>
 b9a:	ea cf       	rjmp	.-44     	; 0xb70 <__ultoa_invert+0x58>
 b9c:	b4 e0       	ldi	r27, 0x04	; 4
 b9e:	a6 95       	lsr	r26
 ba0:	97 95       	ror	r25
 ba2:	87 95       	ror	r24
 ba4:	77 95       	ror	r23
 ba6:	67 95       	ror	r22
 ba8:	ba 95       	dec	r27
 baa:	c9 f7       	brne	.-14     	; 0xb9e <__ultoa_invert+0x86>
 bac:	00 97       	sbiw	r24, 0x00	; 0
 bae:	61 05       	cpc	r22, r1
 bb0:	71 05       	cpc	r23, r1
 bb2:	08 95       	ret
 bb4:	9b 01       	movw	r18, r22
 bb6:	ac 01       	movw	r20, r24
 bb8:	0a 2e       	mov	r0, r26
 bba:	06 94       	lsr	r0
 bbc:	57 95       	ror	r21
 bbe:	47 95       	ror	r20
 bc0:	37 95       	ror	r19
 bc2:	27 95       	ror	r18
 bc4:	ba 95       	dec	r27
 bc6:	c9 f7       	brne	.-14     	; 0xbba <__ultoa_invert+0xa2>
 bc8:	62 0f       	add	r22, r18
 bca:	73 1f       	adc	r23, r19
 bcc:	84 1f       	adc	r24, r20
 bce:	95 1f       	adc	r25, r21
 bd0:	a0 1d       	adc	r26, r0
 bd2:	08 95       	ret

00000bd4 <__prologue_saves__>:
 bd4:	2f 92       	push	r2
 bd6:	3f 92       	push	r3
 bd8:	4f 92       	push	r4
 bda:	5f 92       	push	r5
 bdc:	6f 92       	push	r6
 bde:	7f 92       	push	r7
 be0:	8f 92       	push	r8
 be2:	9f 92       	push	r9
 be4:	af 92       	push	r10
 be6:	bf 92       	push	r11
 be8:	cf 92       	push	r12
 bea:	df 92       	push	r13
 bec:	ef 92       	push	r14
 bee:	ff 92       	push	r15
 bf0:	0f 93       	push	r16
 bf2:	1f 93       	push	r17
 bf4:	cf 93       	push	r28
 bf6:	df 93       	push	r29
 bf8:	cd b7       	in	r28, 0x3d	; 61
 bfa:	de b7       	in	r29, 0x3e	; 62
 bfc:	ca 1b       	sub	r28, r26
 bfe:	db 0b       	sbc	r29, r27
 c00:	0f b6       	in	r0, 0x3f	; 63
 c02:	f8 94       	cli
 c04:	de bf       	out	0x3e, r29	; 62
 c06:	0f be       	out	0x3f, r0	; 63
 c08:	cd bf       	out	0x3d, r28	; 61
 c0a:	09 94       	ijmp

00000c0c <__epilogue_restores__>:
 c0c:	2a 88       	ldd	r2, Y+18	; 0x12
 c0e:	39 88       	ldd	r3, Y+17	; 0x11
 c10:	48 88       	ldd	r4, Y+16	; 0x10
 c12:	5f 84       	ldd	r5, Y+15	; 0x0f
 c14:	6e 84       	ldd	r6, Y+14	; 0x0e
 c16:	7d 84       	ldd	r7, Y+13	; 0x0d
 c18:	8c 84       	ldd	r8, Y+12	; 0x0c
 c1a:	9b 84       	ldd	r9, Y+11	; 0x0b
 c1c:	aa 84       	ldd	r10, Y+10	; 0x0a
 c1e:	b9 84       	ldd	r11, Y+9	; 0x09
 c20:	c8 84       	ldd	r12, Y+8	; 0x08
 c22:	df 80       	ldd	r13, Y+7	; 0x07
 c24:	ee 80       	ldd	r14, Y+6	; 0x06
 c26:	fd 80       	ldd	r15, Y+5	; 0x05
 c28:	0c 81       	ldd	r16, Y+4	; 0x04
 c2a:	1b 81       	ldd	r17, Y+3	; 0x03
 c2c:	aa 81       	ldd	r26, Y+2	; 0x02
 c2e:	b9 81       	ldd	r27, Y+1	; 0x01
 c30:	ce 0f       	add	r28, r30
 c32:	d1 1d       	adc	r29, r1
 c34:	0f b6       	in	r0, 0x3f	; 63
 c36:	f8 94       	cli
 c38:	de bf       	out	0x3e, r29	; 62
 c3a:	0f be       	out	0x3f, r0	; 63
 c3c:	cd bf       	out	0x3d, r28	; 61
 c3e:	ed 01       	movw	r28, r26
 c40:	08 95       	ret

00000c42 <_exit>:
 c42:	f8 94       	cli

00000c44 <__stop_program>:
 c44:	ff cf       	rjmp	.-2      	; 0xc44 <__stop_program>


Arduino_lcd_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  00000750  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800152  00800152  00000836  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000836  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000176e  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bca  00000000  00000000  0000211e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb4  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  0000389c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000662  00000000  00000000  00003b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c46  00000000  00000000  0000419e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 37       	cpi	r26, 0x79	; 121
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <main>
  9e:	0c 94 a6 03 	jmp	0x74c	; 0x74c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  a6:	2d 9a       	sbi	0x05, 5	; 5
  a8:	00 00       	nop
  aa:	2d 98       	cbi	0x05, 5	; 5
  ac:	08 95       	ret

000000ae <lcd_write>:
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
  b2:	66 23       	and	r22, r22
  b4:	11 f0       	breq	.+4      	; 0xba <lcd_write+0xc>
  b6:	2b 9a       	sbi	0x05, 3	; 5
  b8:	01 c0       	rjmp	.+2      	; 0xbc <lcd_write+0xe>
  ba:	2b 98       	cbi	0x05, 3	; 5
  bc:	2c 98       	cbi	0x05, 4	; 5
  be:	53 9a       	sbi	0x0a, 3	; 10
  c0:	54 9a       	sbi	0x0a, 4	; 10
  c2:	55 9a       	sbi	0x0a, 5	; 10
  c4:	56 9a       	sbi	0x0a, 6	; 10
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 98       	cbi	0x0b, 5	; 11
  ca:	5c 98       	cbi	0x0b, 4	; 11
  cc:	5b 98       	cbi	0x0b, 3	; 11
  ce:	cc 23       	and	r28, r28
  d0:	0c f4       	brge	.+2      	; 0xd4 <lcd_write+0x26>
  d2:	5e 9a       	sbi	0x0b, 6	; 11
  d4:	c6 fd       	sbrc	r28, 6
  d6:	5d 9a       	sbi	0x0b, 5	; 11
  d8:	c5 fd       	sbrc	r28, 5
  da:	5c 9a       	sbi	0x0b, 4	; 11
  dc:	c4 fd       	sbrc	r28, 4
  de:	5b 9a       	sbi	0x0b, 3	; 11
  e0:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e4:	5e 98       	cbi	0x0b, 6	; 11
  e6:	5d 98       	cbi	0x0b, 5	; 11
  e8:	5c 98       	cbi	0x0b, 4	; 11
  ea:	5b 98       	cbi	0x0b, 3	; 11
  ec:	c3 fd       	sbrc	r28, 3
  ee:	5e 9a       	sbi	0x0b, 6	; 11
  f0:	c2 fd       	sbrc	r28, 2
  f2:	5d 9a       	sbi	0x0b, 5	; 11
  f4:	c1 fd       	sbrc	r28, 1
  f6:	5c 9a       	sbi	0x0b, 4	; 11
  f8:	c0 fd       	sbrc	r28, 0
  fa:	5b 9a       	sbi	0x0b, 3	; 11
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 100:	5b 9a       	sbi	0x0b, 3	; 11
 102:	5c 9a       	sbi	0x0b, 4	; 11
 104:	5d 9a       	sbi	0x0b, 5	; 11
 106:	5e 9a       	sbi	0x0b, 6	; 11
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <lcd_read>:
 10c:	88 23       	and	r24, r24
 10e:	11 f0       	breq	.+4      	; 0x114 <lcd_read+0x8>
 110:	2b 9a       	sbi	0x05, 3	; 5
 112:	01 c0       	rjmp	.+2      	; 0x116 <lcd_read+0xa>
 114:	2b 98       	cbi	0x05, 3	; 5
 116:	2c 9a       	sbi	0x05, 4	; 5
 118:	53 98       	cbi	0x0a, 3	; 10
 11a:	54 98       	cbi	0x0a, 4	; 10
 11c:	55 98       	cbi	0x0a, 5	; 10
 11e:	56 98       	cbi	0x0a, 6	; 10
 120:	2d 9a       	sbi	0x05, 5	; 5
 122:	00 00       	nop
 124:	4b 9b       	sbis	0x09, 3	; 9
 126:	02 c0       	rjmp	.+4      	; 0x12c <lcd_read+0x20>
 128:	80 e1       	ldi	r24, 0x10	; 16
 12a:	01 c0       	rjmp	.+2      	; 0x12e <lcd_read+0x22>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	4c 99       	sbic	0x09, 4	; 9
 130:	80 62       	ori	r24, 0x20	; 32
 132:	4d 99       	sbic	0x09, 5	; 9
 134:	80 64       	ori	r24, 0x40	; 64
 136:	4e 99       	sbic	0x09, 6	; 9
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	2d 98       	cbi	0x05, 5	; 5
 13c:	00 00       	nop
 13e:	2d 9a       	sbi	0x05, 5	; 5
 140:	00 00       	nop
 142:	4b 99       	sbic	0x09, 3	; 9
 144:	81 60       	ori	r24, 0x01	; 1
 146:	4c 99       	sbic	0x09, 4	; 9
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	4d 99       	sbic	0x09, 5	; 9
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	4e 99       	sbic	0x09, 6	; 9
 150:	88 60       	ori	r24, 0x08	; 8
 152:	2d 98       	cbi	0x05, 5	; 5
 154:	08 95       	ret

00000156 <lcd_waitbusy>:
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 15c:	88 23       	and	r24, r24
 15e:	dc f3       	brlt	.-10     	; 0x156 <lcd_waitbusy>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_waitbusy+0xc>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_waitbusy+0xe>
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_read>
 16a:	08 95       	ret

0000016c <lcd_command>:
 16c:	cf 93       	push	r28
 16e:	c8 2f       	mov	r28, r24
 170:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_gotoxy>:
 180:	61 11       	cpse	r22, r1
 182:	04 c0       	rjmp	.+8      	; 0x18c <lcd_gotoxy+0xc>
 184:	80 58       	subi	r24, 0x80	; 128
 186:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 18a:	08 95       	ret
 18c:	80 54       	subi	r24, 0x40	; 64
 18e:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 192:	08 95       	ret

00000194 <lcd_clrscr>:
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 19a:	08 95       	ret

0000019c <lcd_putc>:
 19c:	cf 93       	push	r28
 19e:	c8 2f       	mov	r28, r24
 1a0:	0e 94 ab 00 	call	0x156	; 0x156 <lcd_waitbusy>
 1a4:	ca 30       	cpi	r28, 0x0A	; 10
 1a6:	49 f4       	brne	.+18     	; 0x1ba <lcd_putc+0x1e>
 1a8:	80 34       	cpi	r24, 0x40	; 64
 1aa:	10 f0       	brcs	.+4      	; 0x1b0 <lcd_putc+0x14>
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <lcd_putc+0x16>
 1b0:	80 e4       	ldi	r24, 0x40	; 64
 1b2:	80 58       	subi	r24, 0x80	; 128
 1b4:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <lcd_putc+0x26>
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	8c 2f       	mov	r24, r28
 1be:	0e 94 57 00 	call	0xae	; 0xae <lcd_write>
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <lcd_puts>:
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	ec 01       	movw	r28, r24
 1cc:	21 96       	adiw	r28, 0x01	; 1
 1ce:	fc 01       	movw	r30, r24
 1d0:	80 81       	ld	r24, Z
 1d2:	88 23       	and	r24, r24
 1d4:	29 f0       	breq	.+10     	; 0x1e0 <lcd_puts+0x1a>
 1d6:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_putc>
 1da:	89 91       	ld	r24, Y+
 1dc:	81 11       	cpse	r24, r1
 1de:	fb cf       	rjmp	.-10     	; 0x1d6 <lcd_puts+0x10>
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1e6:	cf 93       	push	r28
 1e8:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 1ea:	23 9a       	sbi	0x04, 3	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 1ec:	24 9a       	sbi	0x04, 4	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 1ee:	25 9a       	sbi	0x04, 5	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 1f0:	53 9a       	sbi	0x0a, 3	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 1f2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 1f4:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1f6:	56 9a       	sbi	0x0a, 6	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	8f e9       	ldi	r24, 0x9F	; 159
 1fa:	9f e0       	ldi	r25, 0x0F	; 15
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <lcd_init+0x16>
 200:	00 c0       	rjmp	.+0      	; 0x202 <lcd_init+0x1c>
 202:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 204:	5c 9a       	sbi	0x0b, 4	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 206:	5b 9a       	sbi	0x0b, 3	; 11
    lcd_e_toggle();
 208:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 20c:	81 ee       	ldi	r24, 0xE1	; 225
 20e:	94 e0       	ldi	r25, 0x04	; 4
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x2a>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_init+0x30>
 216:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 21c:	95 e1       	ldi	r25, 0x15	; 21
 21e:	9a 95       	dec	r25
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_init+0x38>
 222:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 224:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 228:	85 e1       	ldi	r24, 0x15	; 21
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_init+0x44>
 22e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 230:	5b 98       	cbi	0x0b, 3	; 11
    lcd_e_toggle();
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 236:	95 e1       	ldi	r25, 0x15	; 21
 238:	9a 95       	dec	r25
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_init+0x52>
 23c:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 23e:	88 e2       	ldi	r24, 0x28	; 40
 240:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 244:	88 e0       	ldi	r24, 0x08	; 8
 246:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 24a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 24e:	86 e0       	ldi	r24, 0x06	; 6
 250:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 254:	8c 2f       	mov	r24, r28
 256:	0e 94 b6 00 	call	0x16c	; 0x16c <lcd_command>

}/* lcd_init */
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <millis_init>:
int TOP_value (int f_buzz, int scale)
{
	long f_cp = F_CPU;
	int TOP=f_cp/(2*f_buzz*scale);
	return TOP;
}
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 264:	95 e0       	ldi	r25, 0x05	; 5
 266:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 26a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
 26e:	8c e7       	ldi	r24, 0x7C	; 124
 270:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
 274:	78 94       	sei
 276:	08 95       	ret

00000278 <millis_get>:
 278:	2f b7       	in	r18, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <milliseconds>
 280:	70 91 5a 01 	lds	r23, 0x015A	; 0x80015a <milliseconds+0x1>
 284:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <milliseconds+0x2>
 288:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <milliseconds+0x3>
 28c:	2f bf       	out	0x3f, r18	; 63
 28e:	08 95       	ret

00000290 <millis_resume>:
 290:	e4 e6       	ldi	r30, 0x64	; 100
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	8f 7b       	andi	r24, 0xBF	; 191
 298:	80 83       	st	Z, r24
 29a:	85 e0       	ldi	r24, 0x05	; 5
 29c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 2a0:	e0 e7       	ldi	r30, 0x70	; 112
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	82 60       	ori	r24, 0x02	; 2
 2a8:	80 83       	st	Z, r24
 2aa:	08 95       	ret

000002ac <millis_pause>:
 2ac:	e0 e7       	ldi	r30, 0x70	; 112
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	8d 7f       	andi	r24, 0xFD	; 253
 2b4:	80 83       	st	Z, r24
 2b6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 2ba:	e4 e6       	ldi	r30, 0x64	; 100
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	80 64       	ori	r24, 0x40	; 64
 2c2:	80 83       	st	Z, r24
 2c4:	08 95       	ret

000002c6 <millis_reset>:
 2c6:	8f b7       	in	r24, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <milliseconds>
 2ce:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <milliseconds+0x1>
 2d2:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <milliseconds+0x2>
 2d6:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <milliseconds+0x3>
 2da:	8f bf       	out	0x3f, r24	; 63
 2dc:	08 95       	ret

000002de <__vector_7>:
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <milliseconds>
 2f4:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <milliseconds+0x1>
 2f8:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <milliseconds+0x2>
 2fc:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <milliseconds+0x3>
 300:	01 96       	adiw	r24, 0x01	; 1
 302:	a1 1d       	adc	r26, r1
 304:	b1 1d       	adc	r27, r1
 306:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <milliseconds>
 30a:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <milliseconds+0x1>
 30e:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <milliseconds+0x2>
 312:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <milliseconds+0x3>
 316:	bf 91       	pop	r27
 318:	af 91       	pop	r26
 31a:	9f 91       	pop	r25
 31c:	8f 91       	pop	r24
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <__vector_11>:


ISR(TIMER1_COMPA_vect)
{
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
	TCNT1 = 0;
 332:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 336:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
}
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <alarm>:


void alarm(int f_buzz, int prescaler) {
 344:	8c 01       	movw	r16, r24
 346:	eb 01       	movw	r28, r22
	/* Set pin 9 as output pin */
	DDRB |= (1 << PB1);
 348:	21 9a       	sbi	0x04, 1	; 4
	/* Enable interrupt */
	sei();
 34a:	78 94       	sei
	
	/* Reset timer 1 to prevent undesired actions */
	TCCR1A = 0;
 34c:	e0 e8       	ldi	r30, 0x80	; 128
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	10 82       	st	Z, r1
	TCCR1B = 0;
 352:	a1 e8       	ldi	r26, 0x81	; 129
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	1c 92       	st	X, r1
	TCNT1 = 0;
 358:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 35c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	
	/* Set compare output mode (Compare Output A Mode) */
	TCCR1A |= (1 << COM1A0);
 360:	80 81       	ld	r24, Z
 362:	80 64       	ori	r24, 0x40	; 64
 364:	80 83       	st	Z, r24
	
	/* Set wave generation mode to mode 9 (Wave Generation Mode)*/
	TCCR1A |= (1 << WGM10);
 366:	80 81       	ld	r24, Z
 368:	81 60       	ori	r24, 0x01	; 1
 36a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13);
 36c:	8c 91       	ld	r24, X
 36e:	80 61       	ori	r24, 0x10	; 16
 370:	8c 93       	st	X, r24
	
	/* Enable interrupts based on output comparison (Output Compare A Match Interrupt Enable) */
	TIMSK1 |= (1 << OCIE1A);
 372:	ef e6       	ldi	r30, 0x6F	; 111
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	82 60       	ori	r24, 0x02	; 2
 37a:	80 83       	st	Z, r24

/* Calculates TOP using clock frequency, buzzer frequency and prescaler */
int TOP_value (int f_buzz, int scale)
{
	long f_cp = F_CPU;
	int TOP=f_cp/(2*f_buzz*scale);
 37c:	c8 01       	movw	r24, r16
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	86 9f       	mul	r24, r22
 384:	30 01       	movw	r6, r0
 386:	87 9f       	mul	r24, r23
 388:	70 0c       	add	r7, r0
 38a:	96 9f       	mul	r25, r22
 38c:	70 0c       	add	r7, r0
 38e:	11 24       	eor	r1, r1
	TCCR1B |= (1 << WGM13);
	
	/* Enable interrupts based on output comparison (Output Compare A Match Interrupt Enable) */
	TIMSK1 |= (1 << OCIE1A);
	/* Set frequency */
	OCR1A = TOP_value(f_buzz, prescaler);
 390:	93 01       	movw	r18, r6
 392:	07 2c       	mov	r0, r7
 394:	00 0c       	add	r0, r0
 396:	44 0b       	sbc	r20, r20
 398:	55 0b       	sbc	r21, r21
 39a:	60 e0       	ldi	r22, 0x00	; 0
 39c:	74 e2       	ldi	r23, 0x24	; 36
 39e:	84 ef       	ldi	r24, 0xF4	; 244
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 30 03 	call	0x660	; 0x660 <__divmodsi4>
 3a6:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 3aa:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 3ae:	88 27       	eor	r24, r24
 3b0:	99 27       	eor	r25, r25
 3b2:	80 1b       	sub	r24, r16
 3b4:	91 0b       	sbc	r25, r17
 3b6:	88 0f       	add	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	8c 9f       	mul	r24, r28
 3bc:	60 01       	movw	r12, r0
 3be:	8d 9f       	mul	r24, r29
 3c0:	d0 0c       	add	r13, r0
 3c2:	9c 9f       	mul	r25, r28
 3c4:	d0 0c       	add	r13, r0
 3c6:	11 24       	eor	r1, r1
 3c8:	24 e1       	ldi	r18, 0x14	; 20
 3ca:	20 9f       	mul	r18, r16
 3cc:	c0 01       	movw	r24, r0
 3ce:	21 9f       	mul	r18, r17
 3d0:	90 0d       	add	r25, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	8c 9f       	mul	r24, r28
 3d6:	10 01       	movw	r2, r0
 3d8:	8d 9f       	mul	r24, r29
 3da:	30 0c       	add	r3, r0
 3dc:	9c 9f       	mul	r25, r28
 3de:	30 0c       	add	r3, r0
 3e0:	11 24       	eor	r1, r1
	
	while (1) {
		TCCR1B |= (1 << CS11);
 3e2:	0f 2e       	mov	r0, r31
 3e4:	f1 e8       	ldi	r31, 0x81	; 129
 3e6:	4f 2e       	mov	r4, r31
 3e8:	51 2c       	mov	r5, r1
 3ea:	f0 2d       	mov	r31, r0
		int i;
		for (i=1;i<10;i=i+1) {
		_delay_ms(20);
		OCR1A = TOP_value(f_buzz*i, prescaler);}
 3ec:	0f 2e       	mov	r0, r31
 3ee:	81 2c       	mov	r8, r1
 3f0:	f4 e2       	ldi	r31, 0x24	; 36
 3f2:	9f 2e       	mov	r9, r31
 3f4:	f4 ef       	ldi	r31, 0xF4	; 244
 3f6:	af 2e       	mov	r10, r31
 3f8:	b1 2c       	mov	r11, r1
 3fa:	f0 2d       	mov	r31, r0
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f8 e8       	ldi	r31, 0x88	; 136
 400:	ef 2e       	mov	r14, r31
 402:	f1 2c       	mov	r15, r1
 404:	f0 2d       	mov	r31, r0
	TIMSK1 |= (1 << OCIE1A);
	/* Set frequency */
	OCR1A = TOP_value(f_buzz, prescaler);
	
	while (1) {
		TCCR1B |= (1 << CS11);
 406:	f2 01       	movw	r30, r4
 408:	80 81       	ld	r24, Z
 40a:	82 60       	ori	r24, 0x02	; 2
 40c:	80 83       	st	Z, r24
 40e:	83 01       	movw	r16, r6
 410:	c9 e0       	ldi	r28, 0x09	; 9
 412:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 414:	ff ef       	ldi	r31, 0xFF	; 255
 416:	29 ef       	ldi	r18, 0xF9	; 249
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	f1 50       	subi	r31, 0x01	; 1
 41c:	20 40       	sbci	r18, 0x00	; 0
 41e:	80 40       	sbci	r24, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 424:	00 00       	nop
		int i;
		for (i=1;i<10;i=i+1) {
		_delay_ms(20);
		OCR1A = TOP_value(f_buzz*i, prescaler);}
 426:	98 01       	movw	r18, r16
 428:	01 2e       	mov	r0, r17
 42a:	00 0c       	add	r0, r0
 42c:	44 0b       	sbc	r20, r20
 42e:	55 0b       	sbc	r21, r21
 430:	c5 01       	movw	r24, r10
 432:	b4 01       	movw	r22, r8
 434:	0e 94 30 03 	call	0x660	; 0x660 <__divmodsi4>
 438:	f7 01       	movw	r30, r14
 43a:	31 83       	std	Z+1, r19	; 0x01
 43c:	20 83       	st	Z, r18
 43e:	21 97       	sbiw	r28, 0x01	; 1
 440:	06 0d       	add	r16, r6
 442:	17 1d       	adc	r17, r7
	OCR1A = TOP_value(f_buzz, prescaler);
	
	while (1) {
		TCCR1B |= (1 << CS11);
		int i;
		for (i=1;i<10;i=i+1) {
 444:	20 97       	sbiw	r28, 0x00	; 0
 446:	31 f7       	brne	.-52     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 448:	81 01       	movw	r16, r2
 44a:	ca e0       	ldi	r28, 0x0A	; 10
 44c:	d0 e0       	ldi	r29, 0x00	; 0
 44e:	ff ef       	ldi	r31, 0xFF	; 255
 450:	29 ef       	ldi	r18, 0xF9	; 249
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	f1 50       	subi	r31, 0x01	; 1
 456:	20 40       	sbci	r18, 0x00	; 0
 458:	80 40       	sbci	r24, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45e:	00 00       	nop
		_delay_ms(20);
		OCR1A = TOP_value(f_buzz*i, prescaler);}
		for (i=10;i>0;i=i-1) {
		_delay_ms(20);
		OCR1A = TOP_value(f_buzz*i, prescaler);
 460:	98 01       	movw	r18, r16
 462:	01 2e       	mov	r0, r17
 464:	00 0c       	add	r0, r0
 466:	44 0b       	sbc	r20, r20
 468:	55 0b       	sbc	r21, r21
 46a:	c5 01       	movw	r24, r10
 46c:	b4 01       	movw	r22, r8
 46e:	0e 94 30 03 	call	0x660	; 0x660 <__divmodsi4>
 472:	f7 01       	movw	r30, r14
 474:	31 83       	std	Z+1, r19	; 0x01
 476:	20 83       	st	Z, r18
 478:	21 97       	sbiw	r28, 0x01	; 1
 47a:	0c 0d       	add	r16, r12
 47c:	1d 1d       	adc	r17, r13
		TCCR1B |= (1 << CS11);
		int i;
		for (i=1;i<10;i=i+1) {
		_delay_ms(20);
		OCR1A = TOP_value(f_buzz*i, prescaler);}
		for (i=10;i>0;i=i-1) {
 47e:	20 97       	sbiw	r28, 0x00	; 0
 480:	31 f7       	brne	.-52     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 482:	c1 cf       	rjmp	.-126    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

00000484 <time_is_up>:
	}
}

	
void time_is_up(){
	lcd_clrscr();
 484:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
	lcd_puts("Times up!");
 488:	8a e0       	ldi	r24, 0x0A	; 10
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
	lcd_gotoxy(0,1);
 490:	61 e0       	ldi	r22, 0x01	; 1
 492:	80 e0       	ldi	r24, 0x00	; 0
 494:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
	lcd_puts("Police coming!");
 498:	84 e1       	ldi	r24, 0x14	; 20
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
 4a0:	2f ef       	ldi	r18, 0xFF	; 255
 4a2:	87 ea       	ldi	r24, 0xA7	; 167
 4a4:	91 e6       	ldi	r25, 0x61	; 97
 4a6:	21 50       	subi	r18, 0x01	; 1
 4a8:	80 40       	sbci	r24, 0x00	; 0
 4aa:	90 40       	sbci	r25, 0x00	; 0
 4ac:	e1 f7       	brne	.-8      	; 0x4a6 <time_is_up+0x22>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <time_is_up+0x2c>
 4b0:	00 00       	nop
	
	//##################################################
	//call alarm, sound the buzzer
	//##################################################
	
	alarm(f_buzz, prescaler);
 4b2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 4b6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 4ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <f_buzz>
 4be:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <f_buzz+0x1>
 4c2:	0e 94 a2 01 	call	0x344	; 0x344 <alarm>

000004c6 <main>:
	
	};

int main(void){
 4c6:	ff 92       	push	r15
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	cd b7       	in	r28, 0x3d	; 61
 4d2:	de b7       	in	r29, 0x3e	; 62
 4d4:	60 97       	sbiw	r28, 0x10	; 16
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	cd bf       	out	0x3d, r28	; 61
	
	lcd_init(LCD_DISP_ON);
 4e0:	8c e0       	ldi	r24, 0x0C	; 12
 4e2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lcd_init>
	millis_init();
 4e6:	0e 94 2f 01 	call	0x25e	; 0x25e <millis_init>
	millis_pause();
 4ea:	0e 94 56 01 	call	0x2ac	; 0x2ac <millis_pause>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4ee:	4a e0       	ldi	r20, 0x0A	; 10
 4f0:	be 01       	movw	r22, r28
 4f2:	6f 5f       	subi	r22, 0xFF	; 255
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f ef       	ldi	r24, 0xFF	; 255
 4f8:	93 e0       	ldi	r25, 0x03	; 3
 4fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__itoa_ncheck>
	
	int16_t test_number = 1023;
	char test_char_array[16];
	itoa(test_number, test_char_array, 10);
	lcd_gotoxy(0,0);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
	lcd_clrscr();
 506:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
	while(1){
		if(movement_spotted == 1){
			millis_resume();
			if(password_put == 0){
				lcd_puts("Password: ");
				password_put = 1;
 50a:	ff 24       	eor	r15, r15
 50c:	f3 94       	inc	r15
			//assign pressed keypad key to keypad_button variable
			//##################################################
			
			//keypad_button = 
			
			if(keypad_button == "*" && password_index > 10){
 50e:	0f e5       	ldi	r16, 0x5F	; 95
 510:	11 e0       	ldi	r17, 0x01	; 1
	lcd_gotoxy(0,0);
	lcd_clrscr();
	
	
	while(1){
		if(movement_spotted == 1){
 512:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <movement_spotted>
 516:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <movement_spotted+0x1>
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	91 05       	cpc	r25, r1
 51e:	e9 f7       	brne	.-6      	; 0x51a <main+0x54>
			millis_resume();
 520:	0e 94 48 01 	call	0x290	; 0x290 <millis_resume>
			if(password_put == 0){
 524:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end>
 528:	81 11       	cpse	r24, r1
 52a:	06 c0       	rjmp	.+12     	; 0x538 <main+0x72>
				lcd_puts("Password: ");
 52c:	83 e2       	ldi	r24, 0x23	; 35
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
				password_put = 1;
 534:	f0 92 52 01 	sts	0x0152, r15	; 0x800152 <__data_end>
			}
			
			//if a second has passed
			if(millis_get() - lastTime >= interval){
 538:	0e 94 3c 01 	call	0x278	; 0x278 <millis_get>
 53c:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <lastTime>
 540:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <lastTime+0x1>
 544:	ab 01       	movw	r20, r22
 546:	bc 01       	movw	r22, r24
 548:	42 1b       	sub	r20, r18
 54a:	53 0b       	sbc	r21, r19
 54c:	61 09       	sbc	r22, r1
 54e:	71 09       	sbc	r23, r1
 550:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <interval>
 554:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <interval+0x1>
 558:	a0 e0       	ldi	r26, 0x00	; 0
 55a:	b0 e0       	ldi	r27, 0x00	; 0
 55c:	48 17       	cp	r20, r24
 55e:	59 07       	cpc	r21, r25
 560:	6a 07       	cpc	r22, r26
 562:	7b 07       	cpc	r23, r27
 564:	b0 f1       	brcs	.+108    	; 0x5d2 <main+0x10c>
				lastTime = millis_get();
 566:	0e 94 3c 01 	call	0x278	; 0x278 <millis_get>
 56a:	70 93 54 01 	sts	0x0154, r23	; 0x800154 <lastTime+0x1>
 56e:	60 93 53 01 	sts	0x0153, r22	; 0x800153 <lastTime>
				seconds -= 1; // 1000ms interval (1s)
 572:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
 576:	81 50       	subi	r24, 0x01	; 1
 578:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seconds>
				
				if(seconds == 9){
 57c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
 580:	89 30       	cpi	r24, 0x09	; 9
 582:	41 f4       	brne	.+16     	; 0x594 <main+0xce>
					lcd_gotoxy(1,1);
 584:	6f 2d       	mov	r22, r15
 586:	8f 2d       	mov	r24, r15
 588:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
					lcd_puts(" ");
 58c:	8c e2       	ldi	r24, 0x2C	; 44
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
				}
				lcd_gotoxy(0,1);
 594:	6f 2d       	mov	r22, r15
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
				lcd_puts(itoa(seconds, seconds_to_string, 10));
 59c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
 5a0:	4a e0       	ldi	r20, 0x0A	; 10
 5a2:	61 e6       	ldi	r22, 0x61	; 97
 5a4:	71 e0       	ldi	r23, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__itoa_ncheck>
 5ac:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
				
				//reset and pause the millis counter
				if(seconds <= 0){
 5b0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <seconds>
 5b4:	81 11       	cpse	r24, r1
 5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <main+0x10c>
					millis_reset();
 5b8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <millis_reset>
					millis_pause();
 5bc:	0e 94 56 01 	call	0x2ac	; 0x2ac <millis_pause>
					lastTime = 0;
 5c0:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <lastTime+0x1>
 5c4:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <lastTime>
					seconds = 30;
 5c8:	8e e1       	ldi	r24, 0x1E	; 30
 5ca:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <seconds>
					
					//changes the lcd screen to "times up"
					time_is_up();
 5ce:	0e 94 42 02 	call	0x484	; 0x484 <time_is_up>
			//assign pressed keypad key to keypad_button variable
			//##################################################
			
			//keypad_button = 
			
			if(keypad_button == "*" && password_index > 10){
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	0e 32       	cpi	r16, 0x2E	; 46
 5d6:	18 07       	cpc	r17, r24
 5d8:	41 f4       	brne	.+16     	; 0x5ea <main+0x124>
 5da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <password_index>
 5de:	8b 30       	cpi	r24, 0x0B	; 11
 5e0:	98 f0       	brcs	.+38     	; 0x608 <main+0x142>
				password_index--;
 5e2:	81 50       	subi	r24, 0x01	; 1
 5e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <password_index>
 5e8:	0f c0       	rjmp	.+30     	; 0x608 <main+0x142>
			}
			else if(keypad_button != "*" && password_index < 13){
 5ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <password_index>
 5ee:	8d 30       	cpi	r24, 0x0D	; 13
 5f0:	58 f4       	brcc	.+22     	; 0x608 <main+0x142>
				lcd_gotoxy(password_index,0);
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_gotoxy>
				lcd_puts(keypad_button);
 5f8:	c8 01       	movw	r24, r16
 5fa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
				password_index++;
 5fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <password_index>
 602:	8f 5f       	subi	r24, 0xFF	; 255
 604:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <password_index>
			}
		
			//password is correct
			if(password_correct == 1){
 608:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <password_correct>
 60c:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <password_correct+0x1>
 610:	01 97       	sbiw	r24, 0x01	; 1
 612:	49 f4       	brne	.+18     	; 0x626 <main+0x160>
				lcd_clrscr();
 614:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
				lcd_puts("Password correct!");
 618:	80 e3       	ldi	r24, 0x30	; 48
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
				password_put = 0;
 620:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
				break;
 624:	0f c0       	rjmp	.+30     	; 0x644 <main+0x17e>
			}
		
			//password is wrong
			if(password_wrong == 1){
 626:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <password_wrong>
 62a:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <password_wrong+0x1>
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	09 f0       	breq	.+2      	; 0x634 <main+0x16e>
 632:	6f cf       	rjmp	.-290    	; 0x512 <main+0x4c>
				lcd_clrscr();
 634:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_clrscr>
				lcd_puts("Wrong password!");
 638:	82 e4       	ldi	r24, 0x42	; 66
 63a:	91 e0       	ldi	r25, 0x01	; 1
 63c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_puts>
				password_put = 0;
 640:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <__data_end>
				break;
			}
		}
	}
}
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	60 96       	adiw	r28, 0x10	; 16
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	ff 90       	pop	r15
 65e:	08 95       	ret

00000660 <__divmodsi4>:
 660:	05 2e       	mov	r0, r21
 662:	97 fb       	bst	r25, 7
 664:	1e f4       	brtc	.+6      	; 0x66c <__divmodsi4+0xc>
 666:	00 94       	com	r0
 668:	0e 94 47 03 	call	0x68e	; 0x68e <__negsi2>
 66c:	57 fd       	sbrc	r21, 7
 66e:	07 d0       	rcall	.+14     	; 0x67e <__divmodsi4_neg2>
 670:	0e 94 4f 03 	call	0x69e	; 0x69e <__udivmodsi4>
 674:	07 fc       	sbrc	r0, 7
 676:	03 d0       	rcall	.+6      	; 0x67e <__divmodsi4_neg2>
 678:	4e f4       	brtc	.+18     	; 0x68c <__divmodsi4_exit>
 67a:	0c 94 47 03 	jmp	0x68e	; 0x68e <__negsi2>

0000067e <__divmodsi4_neg2>:
 67e:	50 95       	com	r21
 680:	40 95       	com	r20
 682:	30 95       	com	r19
 684:	21 95       	neg	r18
 686:	3f 4f       	sbci	r19, 0xFF	; 255
 688:	4f 4f       	sbci	r20, 0xFF	; 255
 68a:	5f 4f       	sbci	r21, 0xFF	; 255

0000068c <__divmodsi4_exit>:
 68c:	08 95       	ret

0000068e <__negsi2>:
 68e:	90 95       	com	r25
 690:	80 95       	com	r24
 692:	70 95       	com	r23
 694:	61 95       	neg	r22
 696:	7f 4f       	sbci	r23, 0xFF	; 255
 698:	8f 4f       	sbci	r24, 0xFF	; 255
 69a:	9f 4f       	sbci	r25, 0xFF	; 255
 69c:	08 95       	ret

0000069e <__udivmodsi4>:
 69e:	a1 e2       	ldi	r26, 0x21	; 33
 6a0:	1a 2e       	mov	r1, r26
 6a2:	aa 1b       	sub	r26, r26
 6a4:	bb 1b       	sub	r27, r27
 6a6:	fd 01       	movw	r30, r26
 6a8:	0d c0       	rjmp	.+26     	; 0x6c4 <__udivmodsi4_ep>

000006aa <__udivmodsi4_loop>:
 6aa:	aa 1f       	adc	r26, r26
 6ac:	bb 1f       	adc	r27, r27
 6ae:	ee 1f       	adc	r30, r30
 6b0:	ff 1f       	adc	r31, r31
 6b2:	a2 17       	cp	r26, r18
 6b4:	b3 07       	cpc	r27, r19
 6b6:	e4 07       	cpc	r30, r20
 6b8:	f5 07       	cpc	r31, r21
 6ba:	20 f0       	brcs	.+8      	; 0x6c4 <__udivmodsi4_ep>
 6bc:	a2 1b       	sub	r26, r18
 6be:	b3 0b       	sbc	r27, r19
 6c0:	e4 0b       	sbc	r30, r20
 6c2:	f5 0b       	sbc	r31, r21

000006c4 <__udivmodsi4_ep>:
 6c4:	66 1f       	adc	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	1a 94       	dec	r1
 6ce:	69 f7       	brne	.-38     	; 0x6aa <__udivmodsi4_loop>
 6d0:	60 95       	com	r22
 6d2:	70 95       	com	r23
 6d4:	80 95       	com	r24
 6d6:	90 95       	com	r25
 6d8:	9b 01       	movw	r18, r22
 6da:	ac 01       	movw	r20, r24
 6dc:	bd 01       	movw	r22, r26
 6de:	cf 01       	movw	r24, r30
 6e0:	08 95       	ret

000006e2 <__itoa_ncheck>:
 6e2:	bb 27       	eor	r27, r27
 6e4:	4a 30       	cpi	r20, 0x0A	; 10
 6e6:	31 f4       	brne	.+12     	; 0x6f4 <__itoa_ncheck+0x12>
 6e8:	99 23       	and	r25, r25
 6ea:	22 f4       	brpl	.+8      	; 0x6f4 <__itoa_ncheck+0x12>
 6ec:	bd e2       	ldi	r27, 0x2D	; 45
 6ee:	90 95       	com	r25
 6f0:	81 95       	neg	r24
 6f2:	9f 4f       	sbci	r25, 0xFF	; 255
 6f4:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__utoa_common>

000006f8 <__utoa_ncheck>:
 6f8:	bb 27       	eor	r27, r27

000006fa <__utoa_common>:
 6fa:	fb 01       	movw	r30, r22
 6fc:	55 27       	eor	r21, r21
 6fe:	aa 27       	eor	r26, r26
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	aa 1f       	adc	r26, r26
 706:	a4 17       	cp	r26, r20
 708:	10 f0       	brcs	.+4      	; 0x70e <__utoa_common+0x14>
 70a:	a4 1b       	sub	r26, r20
 70c:	83 95       	inc	r24
 70e:	50 51       	subi	r21, 0x10	; 16
 710:	b9 f7       	brne	.-18     	; 0x700 <__utoa_common+0x6>
 712:	a0 5d       	subi	r26, 0xD0	; 208
 714:	aa 33       	cpi	r26, 0x3A	; 58
 716:	08 f0       	brcs	.+2      	; 0x71a <__utoa_common+0x20>
 718:	a9 5d       	subi	r26, 0xD9	; 217
 71a:	a1 93       	st	Z+, r26
 71c:	00 97       	sbiw	r24, 0x00	; 0
 71e:	79 f7       	brne	.-34     	; 0x6fe <__utoa_common+0x4>
 720:	b1 11       	cpse	r27, r1
 722:	b1 93       	st	Z+, r27
 724:	11 92       	st	Z+, r1
 726:	cb 01       	movw	r24, r22
 728:	0c 94 96 03 	jmp	0x72c	; 0x72c <strrev>

0000072c <strrev>:
 72c:	dc 01       	movw	r26, r24
 72e:	fc 01       	movw	r30, r24
 730:	67 2f       	mov	r22, r23
 732:	71 91       	ld	r23, Z+
 734:	77 23       	and	r23, r23
 736:	e1 f7       	brne	.-8      	; 0x730 <strrev+0x4>
 738:	32 97       	sbiw	r30, 0x02	; 2
 73a:	04 c0       	rjmp	.+8      	; 0x744 <strrev+0x18>
 73c:	7c 91       	ld	r23, X
 73e:	6d 93       	st	X+, r22
 740:	70 83       	st	Z, r23
 742:	62 91       	ld	r22, -Z
 744:	ae 17       	cp	r26, r30
 746:	bf 07       	cpc	r27, r31
 748:	c8 f3       	brcs	.-14     	; 0x73c <strrev+0x10>
 74a:	08 95       	ret

0000074c <_exit>:
 74c:	f8 94       	cli

0000074e <__stop_program>:
 74e:	ff cf       	rjmp	.-2      	; 0x74e <__stop_program>

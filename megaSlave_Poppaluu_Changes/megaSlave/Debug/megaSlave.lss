
megaSlave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800200  00000c72  00000d06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800298  00800298  00000d9e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000147d  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eee  00000000  00000000  00002331  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000843  00000000  00000000  0000321f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00003a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000845  00000000  00000000  00003b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000514  00000000  00000000  000043b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000048c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	e9 c0       	rjmp	.+466    	; 0x1d4 <__ctors_end>
   2:	00 00       	nop
   4:	06 c1       	rjmp	.+524    	; 0x212 <__bad_interrupt>
   6:	00 00       	nop
   8:	04 c1       	rjmp	.+520    	; 0x212 <__bad_interrupt>
   a:	00 00       	nop
   c:	02 c1       	rjmp	.+516    	; 0x212 <__bad_interrupt>
   e:	00 00       	nop
  10:	00 c1       	rjmp	.+512    	; 0x212 <__bad_interrupt>
  12:	00 00       	nop
  14:	fe c0       	rjmp	.+508    	; 0x212 <__bad_interrupt>
  16:	00 00       	nop
  18:	fc c0       	rjmp	.+504    	; 0x212 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	fa c0       	rjmp	.+500    	; 0x212 <__bad_interrupt>
  1e:	00 00       	nop
  20:	f8 c0       	rjmp	.+496    	; 0x212 <__bad_interrupt>
  22:	00 00       	nop
  24:	f6 c0       	rjmp	.+492    	; 0x212 <__bad_interrupt>
  26:	00 00       	nop
  28:	f4 c0       	rjmp	.+488    	; 0x212 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	f2 c0       	rjmp	.+484    	; 0x212 <__bad_interrupt>
  2e:	00 00       	nop
  30:	f0 c0       	rjmp	.+480    	; 0x212 <__bad_interrupt>
  32:	00 00       	nop
  34:	ee c0       	rjmp	.+476    	; 0x212 <__bad_interrupt>
  36:	00 00       	nop
  38:	ec c0       	rjmp	.+472    	; 0x212 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ea c0       	rjmp	.+468    	; 0x212 <__bad_interrupt>
  3e:	00 00       	nop
  40:	e8 c0       	rjmp	.+464    	; 0x212 <__bad_interrupt>
  42:	00 00       	nop
  44:	e6 c0       	rjmp	.+460    	; 0x212 <__bad_interrupt>
  46:	00 00       	nop
  48:	e4 c0       	rjmp	.+456    	; 0x212 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	e2 c0       	rjmp	.+452    	; 0x212 <__bad_interrupt>
  4e:	00 00       	nop
  50:	e0 c0       	rjmp	.+448    	; 0x212 <__bad_interrupt>
  52:	00 00       	nop
  54:	de c0       	rjmp	.+444    	; 0x212 <__bad_interrupt>
  56:	00 00       	nop
  58:	dc c0       	rjmp	.+440    	; 0x212 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	da c0       	rjmp	.+436    	; 0x212 <__bad_interrupt>
  5e:	00 00       	nop
  60:	76 c1       	rjmp	.+748    	; 0x34e <__vector_24>
  62:	00 00       	nop
  64:	d6 c0       	rjmp	.+428    	; 0x212 <__bad_interrupt>
  66:	00 00       	nop
  68:	d4 c0       	rjmp	.+424    	; 0x212 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	d2 c0       	rjmp	.+420    	; 0x212 <__bad_interrupt>
  6e:	00 00       	nop
  70:	d0 c0       	rjmp	.+416    	; 0x212 <__bad_interrupt>
  72:	00 00       	nop
  74:	ce c0       	rjmp	.+412    	; 0x212 <__bad_interrupt>
  76:	00 00       	nop
  78:	cc c0       	rjmp	.+408    	; 0x212 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	ca c0       	rjmp	.+404    	; 0x212 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c8 c0       	rjmp	.+400    	; 0x212 <__bad_interrupt>
  82:	00 00       	nop
  84:	c6 c0       	rjmp	.+396    	; 0x212 <__bad_interrupt>
  86:	00 00       	nop
  88:	c4 c0       	rjmp	.+392    	; 0x212 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c2 c0       	rjmp	.+388    	; 0x212 <__bad_interrupt>
  8e:	00 00       	nop
  90:	c0 c0       	rjmp	.+384    	; 0x212 <__bad_interrupt>
  92:	00 00       	nop
  94:	be c0       	rjmp	.+380    	; 0x212 <__bad_interrupt>
  96:	00 00       	nop
  98:	bc c0       	rjmp	.+376    	; 0x212 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	ba c0       	rjmp	.+372    	; 0x212 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	b8 c0       	rjmp	.+368    	; 0x212 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	b6 c0       	rjmp	.+364    	; 0x212 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	b4 c0       	rjmp	.+360    	; 0x212 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	b2 c0       	rjmp	.+356    	; 0x212 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	b0 c0       	rjmp	.+352    	; 0x212 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	ae c0       	rjmp	.+348    	; 0x212 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	ac c0       	rjmp	.+344    	; 0x212 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	aa c0       	rjmp	.+340    	; 0x212 <__bad_interrupt>
  be:	00 00       	nop
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	a6 c0       	rjmp	.+332    	; 0x212 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	a4 c0       	rjmp	.+328    	; 0x212 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	a2 c0       	rjmp	.+324    	; 0x212 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	a0 c0       	rjmp	.+320    	; 0x212 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	9e c0       	rjmp	.+316    	; 0x212 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	9c c0       	rjmp	.+312    	; 0x212 <__bad_interrupt>
  da:	00 00       	nop
  dc:	9a c0       	rjmp	.+308    	; 0x212 <__bad_interrupt>
  de:	00 00       	nop
  e0:	98 c0       	rjmp	.+304    	; 0x212 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	89 01       	movw	r16, r18
  e6:	91 01       	movw	r18, r2
  e8:	91 01       	movw	r18, r2
  ea:	91 01       	movw	r18, r2
  ec:	8b 01       	movw	r16, r22
  ee:	91 01       	movw	r18, r2
  f0:	8d 01       	movw	r16, r26
  f2:	8f 01       	movw	r16, r30
  f4:	91 01       	movw	r18, r2
  f6:	91 01       	movw	r18, r2
  f8:	91 01       	movw	r18, r2
  fa:	91 01       	movw	r18, r2
  fc:	91 01       	movw	r18, r2
  fe:	91 01       	movw	r18, r2
 100:	91 01       	movw	r18, r2
 102:	91 01       	movw	r18, r2
 104:	91 01       	movw	r18, r2
 106:	91 01       	movw	r18, r2
 108:	91 01       	movw	r18, r2
 10a:	91 01       	movw	r18, r2
 10c:	91 01       	movw	r18, r2
 10e:	91 01       	movw	r18, r2
 110:	91 01       	movw	r18, r2
 112:	91 01       	movw	r18, r2
 114:	91 01       	movw	r18, r2
 116:	91 01       	movw	r18, r2
 118:	91 01       	movw	r18, r2
 11a:	91 01       	movw	r18, r2
 11c:	91 01       	movw	r18, r2
 11e:	91 01       	movw	r18, r2
 120:	91 01       	movw	r18, r2
 122:	91 01       	movw	r18, r2
 124:	91 01       	movw	r18, r2
 126:	91 01       	movw	r18, r2
 128:	91 01       	movw	r18, r2
 12a:	91 01       	movw	r18, r2
 12c:	91 01       	movw	r18, r2
 12e:	91 01       	movw	r18, r2
 130:	91 01       	movw	r18, r2
 132:	91 01       	movw	r18, r2
 134:	91 01       	movw	r18, r2
 136:	91 01       	movw	r18, r2
 138:	91 01       	movw	r18, r2
 13a:	91 01       	movw	r18, r2
 13c:	91 01       	movw	r18, r2
 13e:	91 01       	movw	r18, r2
 140:	91 01       	movw	r18, r2
 142:	91 01       	movw	r18, r2
 144:	91 01       	movw	r18, r2
 146:	91 01       	movw	r18, r2
 148:	91 01       	movw	r18, r2
 14a:	91 01       	movw	r18, r2
 14c:	91 01       	movw	r18, r2
 14e:	91 01       	movw	r18, r2
 150:	91 01       	movw	r18, r2
 152:	91 01       	movw	r18, r2
 154:	91 01       	movw	r18, r2
 156:	91 01       	movw	r18, r2
 158:	91 01       	movw	r18, r2
 15a:	91 01       	movw	r18, r2
 15c:	91 01       	movw	r18, r2
 15e:	91 01       	movw	r18, r2
 160:	91 01       	movw	r18, r2
 162:	91 01       	movw	r18, r2
 164:	81 01       	movw	r16, r2
 166:	91 01       	movw	r18, r2
 168:	91 01       	movw	r18, r2
 16a:	91 01       	movw	r18, r2
 16c:	83 01       	movw	r16, r6
 16e:	91 01       	movw	r18, r2
 170:	85 01       	movw	r16, r10
 172:	87 01       	movw	r16, r14
 174:	91 01       	movw	r18, r2
 176:	91 01       	movw	r18, r2
 178:	91 01       	movw	r18, r2
 17a:	91 01       	movw	r18, r2
 17c:	91 01       	movw	r18, r2
 17e:	91 01       	movw	r18, r2
 180:	91 01       	movw	r18, r2
 182:	91 01       	movw	r18, r2
 184:	91 01       	movw	r18, r2
 186:	91 01       	movw	r18, r2
 188:	91 01       	movw	r18, r2
 18a:	91 01       	movw	r18, r2
 18c:	91 01       	movw	r18, r2
 18e:	91 01       	movw	r18, r2
 190:	91 01       	movw	r18, r2
 192:	91 01       	movw	r18, r2
 194:	91 01       	movw	r18, r2
 196:	91 01       	movw	r18, r2
 198:	91 01       	movw	r18, r2
 19a:	91 01       	movw	r18, r2
 19c:	91 01       	movw	r18, r2
 19e:	91 01       	movw	r18, r2
 1a0:	91 01       	movw	r18, r2
 1a2:	91 01       	movw	r18, r2
 1a4:	79 01       	movw	r14, r18
 1a6:	91 01       	movw	r18, r2
 1a8:	91 01       	movw	r18, r2
 1aa:	91 01       	movw	r18, r2
 1ac:	7b 01       	movw	r14, r22
 1ae:	91 01       	movw	r18, r2
 1b0:	7d 01       	movw	r14, r26
 1b2:	7f 01       	movw	r14, r30
 1b4:	91 01       	movw	r18, r2
 1b6:	91 01       	movw	r18, r2
 1b8:	91 01       	movw	r18, r2
 1ba:	91 01       	movw	r18, r2
 1bc:	91 01       	movw	r18, r2
 1be:	91 01       	movw	r18, r2
 1c0:	91 01       	movw	r18, r2
 1c2:	91 01       	movw	r18, r2
 1c4:	93 01       	movw	r18, r6
 1c6:	91 01       	movw	r18, r2
 1c8:	91 01       	movw	r18, r2
 1ca:	91 01       	movw	r18, r2
 1cc:	73 01       	movw	r14, r6
 1ce:	91 01       	movw	r18, r2
 1d0:	75 01       	movw	r14, r10
 1d2:	77 01       	movw	r14, r14

000001d4 <__ctors_end>:
 1d4:	11 24       	eor	r1, r1
 1d6:	1f be       	out	0x3f, r1	; 63
 1d8:	cf ef       	ldi	r28, 0xFF	; 255
 1da:	d1 e2       	ldi	r29, 0x21	; 33
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	cd bf       	out	0x3d, r28	; 61
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	0c bf       	out	0x3c, r16	; 60

000001e4 <__do_copy_data>:
 1e4:	12 e0       	ldi	r17, 0x02	; 2
 1e6:	a0 e0       	ldi	r26, 0x00	; 0
 1e8:	b2 e0       	ldi	r27, 0x02	; 2
 1ea:	e2 e7       	ldi	r30, 0x72	; 114
 1ec:	fc e0       	ldi	r31, 0x0C	; 12
 1ee:	00 e0       	ldi	r16, 0x00	; 0
 1f0:	0b bf       	out	0x3b, r16	; 59
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x14>
 1f4:	07 90       	elpm	r0, Z+
 1f6:	0d 92       	st	X+, r0
 1f8:	a8 39       	cpi	r26, 0x98	; 152
 1fa:	b1 07       	cpc	r27, r17
 1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0x10>

000001fe <__do_clear_bss>:
 1fe:	22 e0       	ldi	r18, 0x02	; 2
 200:	a8 e9       	ldi	r26, 0x98	; 152
 202:	b2 e0       	ldi	r27, 0x02	; 2
 204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
 206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
 208:	a5 3e       	cpi	r26, 0xE5	; 229
 20a:	b2 07       	cpc	r27, r18
 20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>
 20e:	ed d0       	rcall	.+474    	; 0x3ea <main>
 210:	2e c5       	rjmp	.+2652   	; 0xc6e <_exit>

00000212 <__bad_interrupt>:
 212:	f6 ce       	rjmp	.-532    	; 0x0 <__vectors>

00000214 <KEYPAD_Init>:
 214:	80 ef       	ldi	r24, 0xF0	; 240
 216:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x700107>
 21a:	08 95       	ret

0000021c <KEYPAD_WaitForKeyRelease>:
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	a8 e0       	ldi	r26, 0x08	; 8
 222:	b1 e0       	ldi	r27, 0x01	; 1
 224:	2f e0       	ldi	r18, 0x0F	; 15
 226:	e6 e0       	ldi	r30, 0x06	; 6
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	92 2f       	mov	r25, r18
 22c:	9c 93       	st	X, r25
 22e:	80 81       	ld	r24, Z
 230:	8f 70       	andi	r24, 0x0F	; 15
 232:	8f 30       	cpi	r24, 0x0F	; 15
 234:	d9 f7       	brne	.-10     	; 0x22c <KEYPAD_WaitForKeyRelease+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	c9 ef       	ldi	r28, 0xF9	; 249
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	21 97       	sbiw	r28, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <KEYPAD_WaitForKeyRelease+0x1e>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <KEYPAD_WaitForKeyRelease+0x24>
 240:	00 00       	nop
 242:	2c 93       	st	X, r18
 244:	80 81       	ld	r24, Z
 246:	8f 70       	andi	r24, 0x0F	; 15
 248:	8f 30       	cpi	r24, 0x0F	; 15
 24a:	81 f7       	brne	.-32     	; 0x22c <KEYPAD_WaitForKeyRelease+0x10>
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <KEYPAD_WaitForKeyPress>:
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	a8 e0       	ldi	r26, 0x08	; 8
 258:	b1 e0       	ldi	r27, 0x01	; 1
 25a:	2f e0       	ldi	r18, 0x0F	; 15
 25c:	e6 e0       	ldi	r30, 0x06	; 6
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	92 2f       	mov	r25, r18
 262:	9c 93       	st	X, r25
 264:	80 81       	ld	r24, Z
 266:	8f 70       	andi	r24, 0x0F	; 15
 268:	8f 30       	cpi	r24, 0x0F	; 15
 26a:	d9 f3       	breq	.-10     	; 0x262 <KEYPAD_WaitForKeyPress+0x10>
 26c:	c9 ef       	ldi	r28, 0xF9	; 249
 26e:	d0 e0       	ldi	r29, 0x00	; 0
 270:	21 97       	sbiw	r28, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <KEYPAD_WaitForKeyPress+0x1e>
 274:	00 c0       	rjmp	.+0      	; 0x276 <KEYPAD_WaitForKeyPress+0x24>
 276:	00 00       	nop
 278:	2c 93       	st	X, r18
 27a:	80 81       	ld	r24, Z
 27c:	8f 70       	andi	r24, 0x0F	; 15
 27e:	8f 30       	cpi	r24, 0x0F	; 15
 280:	81 f3       	breq	.-32     	; 0x262 <KEYPAD_WaitForKeyPress+0x10>
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <KEYPAD_GetKey>:
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	c7 df       	rcall	.-114    	; 0x21c <KEYPAD_WaitForKeyRelease>
 28e:	89 ef       	ldi	r24, 0xF9	; 249
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	01 97       	sbiw	r24, 0x01	; 1
 294:	f1 f7       	brne	.-4      	; 0x292 <KEYPAD_GetKey+0xa>
 296:	00 c0       	rjmp	.+0      	; 0x298 <KEYPAD_GetKey+0x10>
 298:	00 00       	nop
 29a:	db df       	rcall	.-74     	; 0x252 <KEYPAD_WaitForKeyPress>
 29c:	84 e0       	ldi	r24, 0x04	; 4
 29e:	ef ee       	ldi	r30, 0xEF	; 239
 2a0:	c8 e0       	ldi	r28, 0x08	; 8
 2a2:	d1 e0       	ldi	r29, 0x01	; 1
 2a4:	26 e0       	ldi	r18, 0x06	; 6
 2a6:	31 e0       	ldi	r19, 0x01	; 1
 2a8:	e8 83       	st	Y, r30
 2aa:	a9 ef       	ldi	r26, 0xF9	; 249
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	11 97       	sbiw	r26, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <KEYPAD_GetKey+0x26>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <KEYPAD_GetKey+0x2c>
 2b4:	00 00       	nop
 2b6:	d9 01       	movw	r26, r18
 2b8:	9c 91       	ld	r25, X
 2ba:	9f 70       	andi	r25, 0x0F	; 15
 2bc:	9f 30       	cpi	r25, 0x0F	; 15
 2be:	21 f4       	brne	.+8      	; 0x2c8 <KEYPAD_GetKey+0x40>
 2c0:	ee 0f       	add	r30, r30
 2c2:	ef 5f       	subi	r30, 0xFF	; 255
 2c4:	81 50       	subi	r24, 0x01	; 1
 2c6:	81 f7       	brne	.-32     	; 0x2a8 <KEYPAD_GetKey+0x20>
 2c8:	e0 7f       	andi	r30, 0xF0	; 240
 2ca:	e9 0f       	add	r30, r25
 2cc:	8e 2f       	mov	r24, r30
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	fc 01       	movw	r30, r24
 2d2:	e7 57       	subi	r30, 0x77	; 119
 2d4:	f1 09       	sbc	r31, r1
 2d6:	e8 37       	cpi	r30, 0x78	; 120
 2d8:	f1 05       	cpc	r31, r1
 2da:	18 f5       	brcc	.+70     	; 0x322 <KEYPAD_GetKey+0x9a>
 2dc:	88 27       	eor	r24, r24
 2de:	ee 58       	subi	r30, 0x8E	; 142
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	8f 4f       	sbci	r24, 0xFF	; 255
 2e4:	89 c1       	rjmp	.+786    	; 0x5f8 <__tablejump2__>
 2e6:	87 e3       	ldi	r24, 0x37	; 55
 2e8:	1f c0       	rjmp	.+62     	; 0x328 <KEYPAD_GetKey+0xa0>
 2ea:	84 e3       	ldi	r24, 0x34	; 52
 2ec:	1d c0       	rjmp	.+58     	; 0x328 <KEYPAD_GetKey+0xa0>
 2ee:	81 e3       	ldi	r24, 0x31	; 49
 2f0:	1b c0       	rjmp	.+54     	; 0x328 <KEYPAD_GetKey+0xa0>
 2f2:	80 e3       	ldi	r24, 0x30	; 48
 2f4:	19 c0       	rjmp	.+50     	; 0x328 <KEYPAD_GetKey+0xa0>
 2f6:	88 e3       	ldi	r24, 0x38	; 56
 2f8:	17 c0       	rjmp	.+46     	; 0x328 <KEYPAD_GetKey+0xa0>
 2fa:	85 e3       	ldi	r24, 0x35	; 53
 2fc:	15 c0       	rjmp	.+42     	; 0x328 <KEYPAD_GetKey+0xa0>
 2fe:	82 e3       	ldi	r24, 0x32	; 50
 300:	13 c0       	rjmp	.+38     	; 0x328 <KEYPAD_GetKey+0xa0>
 302:	83 e2       	ldi	r24, 0x23	; 35
 304:	11 c0       	rjmp	.+34     	; 0x328 <KEYPAD_GetKey+0xa0>
 306:	89 e3       	ldi	r24, 0x39	; 57
 308:	0f c0       	rjmp	.+30     	; 0x328 <KEYPAD_GetKey+0xa0>
 30a:	86 e3       	ldi	r24, 0x36	; 54
 30c:	0d c0       	rjmp	.+26     	; 0x328 <KEYPAD_GetKey+0xa0>
 30e:	83 e3       	ldi	r24, 0x33	; 51
 310:	0b c0       	rjmp	.+22     	; 0x328 <KEYPAD_GetKey+0xa0>
 312:	84 e4       	ldi	r24, 0x44	; 68
 314:	09 c0       	rjmp	.+18     	; 0x328 <KEYPAD_GetKey+0xa0>
 316:	83 e4       	ldi	r24, 0x43	; 67
 318:	07 c0       	rjmp	.+14     	; 0x328 <KEYPAD_GetKey+0xa0>
 31a:	82 e4       	ldi	r24, 0x42	; 66
 31c:	05 c0       	rjmp	.+10     	; 0x328 <KEYPAD_GetKey+0xa0>
 31e:	81 e4       	ldi	r24, 0x41	; 65
 320:	03 c0       	rjmp	.+6      	; 0x328 <KEYPAD_GetKey+0xa0>
 322:	8a e7       	ldi	r24, 0x7A	; 122
 324:	01 c0       	rjmp	.+2      	; 0x328 <KEYPAD_GetKey+0xa0>
 326:	8a e2       	ldi	r24, 0x2A	; 42
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <USART_Transmit>:
    UCSR0C |= (1 << USBS0) | (3 << UCSZ00);    
}

static void USART_Transmit(unsigned char data, FILE *stream){
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0))){;}
 32e:	e0 ec       	ldi	r30, 0xC0	; 192
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	90 81       	ld	r25, Z
 334:	95 ff       	sbrs	r25, 5
 336:	fd cf       	rjmp	.-6      	; 0x332 <USART_Transmit+0x4>
    
    /* Put the data into a buffer, then send/transmit the data */
    UDR0 = data;
 338:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 33c:	08 95       	ret

0000033e <USART_Receive>:
}

static char USART_Receive(FILE *stream){
    /* Wait until the transmit buffer is empty*/
    while(!(UCSR0A & (1 << UDRE0))){;}
 33e:	e0 ec       	ldi	r30, 0xC0	; 192
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	85 ff       	sbrs	r24, 5
 346:	fd cf       	rjmp	.-6      	; 0x342 <USART_Receive+0x4>
    
    /* Get the received data from the buffer */
    return UDR0;
 348:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
}
 34c:	08 95       	ret

0000034e <__vector_24>:

/* use interrupts to send receive message */
ISR (SPI_STC_vect){   
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	0b b6       	in	r0, 0x3b	; 59
 35a:	0f 92       	push	r0
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
    unsigned char spi_interrupt_byte = SPDR;
 364:	9e b5       	in	r25, 0x2e	; 46
    unsigned char transfer_end_check = '\n';
    SPDR = g_spi_send_data[g_spi_index];
 366:	e0 91 99 02 	lds	r30, 0x0299	; 0x800299 <g_spi_index>
 36a:	0e 2e       	mov	r0, r30
 36c:	00 0c       	add	r0, r0
 36e:	ff 0b       	sbc	r31, r31
 370:	e1 55       	subi	r30, 0x51	; 81
 372:	fd 4f       	sbci	r31, 0xFD	; 253
 374:	80 81       	ld	r24, Z
 376:	8e bd       	out	0x2e, r24	; 46
    g_spi_index++;
 378:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <g_spi_index>
 37c:	8f 5f       	subi	r24, 0xFF	; 255
 37e:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <g_spi_index>
    
    if(g_spi_receive_index < sizeof(g_spi_receive_data)){
 382:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <__data_end>
 386:	84 31       	cpi	r24, 0x14	; 20
 388:	88 f4       	brcc	.+34     	; 0x3ac <__vector_24+0x5e>
        g_spi_receive_data[g_spi_receive_index++] = spi_interrupt_byte;
 38a:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <__data_end>
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	8e 0f       	add	r24, r30
 392:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__data_end>
 396:	0e 2e       	mov	r0, r30
 398:	00 0c       	add	r0, r0
 39a:	ff 0b       	sbc	r31, r31
 39c:	e5 53       	subi	r30, 0x35	; 53
 39e:	fd 4f       	sbci	r31, 0xFD	; 253
 3a0:	90 83       	st	Z, r25
        
        /* check if the received byte == '\n' */
        if (transfer_end_check == spi_interrupt_byte){
 3a2:	9a 30       	cpi	r25, 0x0A	; 10
 3a4:	19 f4       	brne	.+6      	; 0x3ac <__vector_24+0x5e>
            g_b_is_transfer_complete = 1;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <g_b_is_transfer_complete>
        }    
    }  
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	9f 91       	pop	r25
 3b2:	8f 91       	pop	r24
 3b4:	0f 90       	pop	r0
 3b6:	0b be       	out	0x3b, r0	; 59
 3b8:	0f 90       	pop	r0
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	0f 90       	pop	r0
 3be:	1f 90       	pop	r1
 3c0:	18 95       	reti

000003c2 <change_password>:
FILE uart_output = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_Receive, _FDEV_SETUP_READ);

void change_password(char changed_password[], size_t size){
	// Write data to eeprom
	for (uint16_t address_index = 0; address_index < size; address_index++){
 3c2:	61 15       	cp	r22, r1
 3c4:	71 05       	cpc	r23, r1
 3c6:	81 f0       	breq	.+32     	; 0x3e8 <change_password+0x26>
 3c8:	e8 2f       	mov	r30, r24
 3ca:	f9 2f       	mov	r31, r25
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
		while(EECR & (1 << 1)){/* wait for the previous write operation to end */}
 3d0:	f9 99       	sbic	0x1f, 1	; 31
 3d2:	fe cf       	rjmp	.-4      	; 0x3d0 <change_password+0xe>
			
		EEAR = address_index;
 3d4:	92 bd       	out	0x22, r25	; 34
 3d6:	81 bd       	out	0x21, r24	; 33
		EEDR = changed_password[address_index];
 3d8:	21 91       	ld	r18, Z+
 3da:	20 bd       	out	0x20, r18	; 32
		EECR |= (1 << 2); // master programming enable
 3dc:	fa 9a       	sbi	0x1f, 2	; 31
		EECR |= (1 << 1); // EEPROM programming enable
 3de:	f9 9a       	sbi	0x1f, 1	; 31
FILE uart_output = FDEV_SETUP_STREAM(USART_Transmit, NULL, _FDEV_SETUP_WRITE);
FILE uart_input = FDEV_SETUP_STREAM(NULL, USART_Receive, _FDEV_SETUP_READ);

void change_password(char changed_password[], size_t size){
	// Write data to eeprom
	for (uint16_t address_index = 0; address_index < size; address_index++){
 3e0:	01 96       	adiw	r24, 0x01	; 1
 3e2:	68 17       	cp	r22, r24
 3e4:	79 07       	cpc	r23, r25
 3e6:	a1 f7       	brne	.-24     	; 0x3d0 <change_password+0xe>
 3e8:	08 95       	ret

000003ea <main>:
		EECR |= (1 << 2); // master programming enable
		EECR |= (1 << 1); // EEPROM programming enable
	}
}

int main(void){
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	a5 97       	sbiw	r28, 0x25	; 37
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
	//initializing the keypad 
	KEYPAD_Init();
 3fe:	0a df       	rcall	.-492    	; 0x214 <KEYPAD_Init>

    /* set MISO as output, pin 12 (PB4)*/
    DDRB  |= (1 << PB3);
 400:	23 9a       	sbi	0x04, 3	; 4
    /* set SPI enable (SPE) and interrupt enable (SPIE) */
    SPCR  |= (1 << 6) | (1 << 7);
 402:	8c b5       	in	r24, 0x2c	; 44
 404:	80 6c       	ori	r24, 0xC0	; 192
 406:	8c bd       	out	0x2c, r24	; 44
    SPDR = 0;
 408:	1e bc       	out	0x2e, r1	; 46
	
	// set up serial communication
	UBRR0H = (uint8_t)(UBRR_VAL >> 8);
 40a:	45 ec       	ldi	r20, 0xC5	; 197
 40c:	50 e0       	ldi	r21, 0x00	; 0
 40e:	fa 01       	movw	r30, r20
 410:	10 82       	st	Z, r1
	UBRR0L = (uint8_t)UBRR_VAL;
 412:	84 ec       	ldi	r24, 0xC4	; 196
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	27 e6       	ldi	r18, 0x67	; 103
 418:	fc 01       	movw	r30, r24
 41a:	20 83       	st	Z, r18
	UCSR0B = (1 << TXEN0);
 41c:	a1 ec       	ldi	r26, 0xC1	; 193
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	38 e0       	ldi	r19, 0x08	; 8
 422:	3c 93       	st	X, r19
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 424:	62 ec       	ldi	r22, 0xC2	; 194
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	36 e0       	ldi	r19, 0x06	; 6
 42a:	fb 01       	movw	r30, r22
 42c:	30 83       	st	Z, r19
	
	//Set up PIR sensor pin
	DDRD &= ~(1 << PD7);
 42e:	57 98       	cbi	0x0a, 7	; 10
    
    // enable global interrupts
    sei();
 430:	78 94       	sei

bool movement = false;

static void USART_init(uint16_t ubrr){
    /* Set baud rate in the USART Baud Rate Registers (UBRR) */
    UBRR0H = (unsigned char) (ubrr >> 8);
 432:	fa 01       	movw	r30, r20
 434:	10 82       	st	Z, r1
    UBRR0L = (unsigned char) ubrr;
 436:	fc 01       	movw	r30, r24
 438:	20 83       	st	Z, r18
    
    /* Enable receiver and transmitter on RX0 and TX0 */
    UCSR0B |= (1 << RXEN0) | (1 << TXEN0); //NOTE: the ATmega328p has 1 UART: 0
 43a:	8c 91       	ld	r24, X
 43c:	88 61       	ori	r24, 0x18	; 24
 43e:	8c 93       	st	X, r24
    
    /* Set frame format: 8 bit data, 2 stop bit */
    UCSR0C |= (1 << USBS0) | (3 << UCSZ00);    
 440:	fb 01       	movw	r30, r22
 442:	80 81       	ld	r24, Z
 444:	8e 60       	ori	r24, 0x0E	; 14
 446:	80 83       	st	Z, r24
    
    // initialize the UART with 9600 BAUD
    USART_init(MYUBRR);
    
    // redirect the stdin and stdout to UART functions
    stdout = &uart_output;
 448:	ef ed       	ldi	r30, 0xDF	; 223
 44a:	f2 e0       	ldi	r31, 0x02	; 2
 44c:	8e e0       	ldi	r24, 0x0E	; 14
 44e:	92 e0       	ldi	r25, 0x02	; 2
 450:	93 83       	std	Z+3, r25	; 0x03
 452:	82 83       	std	Z+2, r24	; 0x02
    stdin = &uart_input;
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	92 e0       	ldi	r25, 0x02	; 2
 458:	91 83       	std	Z+1, r25	; 0x01
 45a:	80 83       	st	Z, r24
	uint16_t memory_address_max = 32;
	char correct_password[32]; // data read from eeprom
	
	//changing the password can be done here
	
	char changed_password[] = "6651";
 45c:	85 e0       	ldi	r24, 0x05	; 5
 45e:	e2 e9       	ldi	r30, 0x92	; 146
 460:	f2 e0       	ldi	r31, 0x02	; 2
 462:	de 01       	movw	r26, r28
 464:	91 96       	adiw	r26, 0x21	; 33
 466:	01 90       	ld	r0, Z+
 468:	0d 92       	st	X+, r0
 46a:	8a 95       	dec	r24
 46c:	e1 f7       	brne	.-8      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	change_password(changed_password, sizeof(changed_password));
 46e:	65 e0       	ldi	r22, 0x05	; 5
 470:	70 e0       	ldi	r23, 0x00	; 0
 472:	ce 01       	movw	r24, r28
 474:	81 96       	adiw	r24, 0x21	; 33
 476:	a5 df       	rcall	.-182    	; 0x3c2 <change_password>
 478:	fe 01       	movw	r30, r28
 47a:	31 96       	adiw	r30, 0x01	; 1
	
	
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	90 e0       	ldi	r25, 0x00	; 0
		while(EECR & (1 << 1)){/*wait for previous write operation to end*/}
 480:	f9 99       	sbic	0x1f, 1	; 31
 482:	fe cf       	rjmp	.-4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		EEAR = address_index;
 484:	92 bd       	out	0x22, r25	; 34
 486:	81 bd       	out	0x21, r24	; 33
		EECR |=0x01; //enable EEPROM read
 488:	f8 9a       	sbi	0x1f, 0	; 31
		correct_password[address_index] = EEDR;
 48a:	20 b5       	in	r18, 0x20	; 32
 48c:	21 93       	st	Z+, r18
	change_password(changed_password, sizeof(changed_password));
	
	
	
	//read data from eeprom
	for (uint16_t address_index = 0; address_index < memory_address_max; address_index++){
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	80 32       	cpi	r24, 0x20	; 32
 492:	91 05       	cpc	r25, r1
 494:	a9 f7       	brne	.-22     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		EEAR = address_index;
		EECR |=0x01; //enable EEPROM read
		correct_password[address_index] = EEDR;
	}
	
	printf("Memory data was: ");
 496:	84 e3       	ldi	r24, 0x34	; 52
 498:	92 e0       	ldi	r25, 0x02	; 2
 49a:	9f 93       	push	r25
 49c:	8f 93       	push	r24
 49e:	c4 d0       	rcall	.+392    	; 0x628 <printf>
	printf(correct_password);
 4a0:	ce 01       	movw	r24, r28
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	9f 93       	push	r25
 4a6:	8f 93       	push	r24
	printf("\n");
 4a8:	bf d0       	rcall	.+382    	; 0x628 <printf>
 4aa:	8a e0       	ldi	r24, 0x0A	; 10
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	cf d0       	rcall	.+414    	; 0x64e <putchar>
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	0f 90       	pop	r0
	    int i = 0;
		//for loop for getting a 4 long password
		while(1){
			Keypress = KEYPAD_GetKey();
			//turns uint_8 to char
			sprintf(str, "%c", Keypress);
 4b8:	0f 2e       	mov	r0, r31
 4ba:	f6 e4       	ldi	r31, 0x46	; 70
 4bc:	af 2e       	mov	r10, r31
 4be:	f2 e0       	ldi	r31, 0x02	; 2
 4c0:	bf 2e       	mov	r11, r31
 4c2:	f0 2d       	mov	r31, r0
 4c4:	09 ec       	ldi	r16, 0xC9	; 201
 4c6:	12 e0       	ldi	r17, 0x02	; 2
			
			if(str[0] == submit[0]){
 4c8:	0f 2e       	mov	r0, r31
 4ca:	fe e1       	ldi	r31, 0x1E	; 30
 4cc:	6f 2e       	mov	r6, r31
 4ce:	f2 e0       	ldi	r31, 0x02	; 2
 4d0:	7f 2e       	mov	r7, r31
 4d2:	f0 2d       	mov	r31, r0
				break;
			}
			
			if(str[0] == backspace[0] && i > 0){
 4d4:	0f 2e       	mov	r0, r31
 4d6:	fc e1       	ldi	r31, 0x1C	; 28
 4d8:	4f 2e       	mov	r4, r31
 4da:	f2 e0       	ldi	r31, 0x02	; 2
 4dc:	5f 2e       	mov	r5, r31
 4de:	f0 2d       	mov	r31, r0
			else if(i < 4 && str[0] != backspace[0] && str[0] != submit[0]){
				password[i] = str[0];
				i++;
			}
			
			printf("\nPaswd: %s\n", password);
 4e0:	0f 2e       	mov	r0, r31
 4e2:	f3 ec       	ldi	r31, 0xC3	; 195
 4e4:	ef 2e       	mov	r14, r31
 4e6:	f2 e0       	ldi	r31, 0x02	; 2
 4e8:	ff 2e       	mov	r15, r31
 4ea:	f0 2d       	mov	r31, r0
 4ec:	0f 2e       	mov	r0, r31
 4ee:	f9 e4       	ldi	r31, 0x49	; 73
 4f0:	8f 2e       	mov	r8, r31
 4f2:	f2 e0       	ldi	r31, 0x02	; 2
 4f4:	9f 2e       	mov	r9, r31
 4f6:	f0 2d       	mov	r31, r0
 4f8:	2e 2c       	mov	r2, r14
	printf(correct_password);
	printf("\n");
    
    /* Actual functions */
    while (1){
	    int i = 0;
 4fa:	3f 2c       	mov	r3, r15
 4fc:	c1 2c       	mov	r12, r1
		//for loop for getting a 4 long password
		while(1){
			Keypress = KEYPAD_GetKey();
 4fe:	d1 2c       	mov	r13, r1
 500:	c3 de       	rcall	.-634    	; 0x288 <KEYPAD_GetKey>
 502:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <Keypress>
			//turns uint_8 to char
			sprintf(str, "%c", Keypress);
 506:	1f 92       	push	r1
 508:	8f 93       	push	r24
 50a:	bf 92       	push	r11
 50c:	af 92       	push	r10
 50e:	1f 93       	push	r17
 510:	0f 93       	push	r16
 512:	d2 d0       	rcall	.+420    	; 0x6b8 <sprintf>
			
			if(str[0] == submit[0]){
 514:	f8 01       	movw	r30, r16
 516:	80 81       	ld	r24, Z
 518:	0f 90       	pop	r0
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	f3 01       	movw	r30, r6
 526:	90 81       	ld	r25, Z
 528:	89 17       	cp	r24, r25
 52a:	01 f1       	breq	.+64     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
				break;
			}
			
			if(str[0] == backspace[0] && i > 0){
 52c:	f2 01       	movw	r30, r4
 52e:	90 81       	ld	r25, Z
 530:	89 13       	cpse	r24, r25
 532:	5c c0       	rjmp	.+184    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
 534:	1c 14       	cp	r1, r12
 536:	1d 04       	cpc	r1, r13
 538:	7c f4       	brge	.+30     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
				i--;
 53a:	f1 e0       	ldi	r31, 0x01	; 1
 53c:	cf 1a       	sub	r12, r31
 53e:	d1 08       	sbc	r13, r1
				password[i] = '\0';
 540:	f6 01       	movw	r30, r12
 542:	ed 53       	subi	r30, 0x3D	; 61
 544:	fd 4f       	sbci	r31, 0xFD	; 253
 546:	10 82       	st	Z, r1
 548:	07 c0       	rjmp	.+14     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			}
			else if(i < 4 && str[0] != backspace[0] && str[0] != submit[0]){
				password[i] = str[0];
 54a:	f6 01       	movw	r30, r12
 54c:	ed 53       	subi	r30, 0x3D	; 61
 54e:	fd 4f       	sbci	r31, 0xFD	; 253
 550:	80 83       	st	Z, r24
				i++;
 552:	8f ef       	ldi	r24, 0xFF	; 255
 554:	c8 1a       	sub	r12, r24
			}
			
			printf("\nPaswd: %s\n", password);
 556:	d8 0a       	sbc	r13, r24
 558:	ff 92       	push	r15
 55a:	ef 92       	push	r14
 55c:	9f 92       	push	r9
 55e:	8f 92       	push	r8
 560:	63 d0       	rcall	.+198    	; 0x628 <printf>
			
		}
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	ca cf       	rjmp	.-108    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		password[4] = '\0';
 56c:	f7 01       	movw	r30, r14
		printf("\nPassword entered: %s\n", password);
 56e:	14 82       	std	Z+4, r1	; 0x04
 570:	ff 92       	push	r15
 572:	ef 92       	push	r14
 574:	85 e5       	ldi	r24, 0x55	; 85
 576:	92 e0       	ldi	r25, 0x02	; 2
 578:	9f 93       	push	r25
 57a:	8f 93       	push	r24
		
		if (strcmp(correct_password, password) != 0) {
 57c:	55 d0       	rcall	.+170    	; 0x628 <printf>
 57e:	62 2d       	mov	r22, r2
 580:	73 2d       	mov	r23, r3
 582:	ce 01       	movw	r24, r28
 584:	01 96       	adiw	r24, 0x01	; 1
 586:	40 d0       	rcall	.+128    	; 0x608 <strcmp>
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
			printf("Incorrect password.\n");
 590:	89 2b       	or	r24, r25
 592:	21 f0       	breq	.+8      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
 594:	8c e6       	ldi	r24, 0x6C	; 108
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	5f d0       	rcall	.+190    	; 0x658 <puts>
		} 
		else {
			printf("Correct password.\n");
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
 59c:	80 e8       	ldi	r24, 0x80	; 128
 59e:	92 e0       	ldi	r25, 0x02	; 2
		}
		
		//clears the password that was typed
		memset(password, 0, sizeof(password));
 5a0:	5b d0       	rcall	.+182    	; 0x658 <puts>
 5a2:	85 e0       	ldi	r24, 0x05	; 5
 5a4:	f7 01       	movw	r30, r14
 5a6:	11 92       	st	Z+, r1
 5a8:	8a 95       	dec	r24
		
	    if (PIND & (1 << PD7)) {
 5aa:	e9 f7       	brne	.-6      	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
		    strcpy(g_spi_send_data, movementSpotted);
 5ac:	4f 9b       	sbis	0x09, 7	; 9
 5ae:	06 c0       	rjmp	.+12     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
 5b0:	60 e2       	ldi	r22, 0x20	; 32
 5b2:	72 e0       	ldi	r23, 0x02	; 2
 5b4:	8f ea       	ldi	r24, 0xAF	; 175
 5b6:	92 e0       	ldi	r25, 0x02	; 2
 5b8:	30 d0       	rcall	.+96     	; 0x61a <strcpy>
		    } else{
		    strcpy(g_spi_send_data, noMovementSpotted);
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
 5bc:	6b e9       	ldi	r22, 0x9B	; 155
 5be:	72 e0       	ldi	r23, 0x02	; 2
 5c0:	8f ea       	ldi	r24, 0xAF	; 175
 5c2:	92 e0       	ldi	r25, 0x02	; 2
	    }
	    
	    if(1 == g_b_is_transfer_complete){
 5c4:	2a d0       	rcall	.+84     	; 0x61a <strcpy>
 5c6:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <g_b_is_transfer_complete>
 5ca:	88 23       	and	r24, r24
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
		    printf(g_spi_receive_data);
 5ce:	96 cf       	rjmp	.-212    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 5d0:	8b ec       	ldi	r24, 0xCB	; 203
 5d2:	92 e0       	ldi	r25, 0x02	; 2
 5d4:	9f 93       	push	r25
 5d6:	8f 93       	push	r24
 5d8:	27 d0       	rcall	.+78     	; 0x628 <printf>
		    g_b_is_transfer_complete = 0;
 5da:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <g_b_is_transfer_complete>
		    g_spi_index = 0;
 5de:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <g_spi_index>
		    g_spi_receive_index = 0;
 5e2:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <__data_end>
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	88 cf       	rjmp	.-240    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
			
			if(str[0] == backspace[0] && i > 0){
				i--;
				password[i] = '\0';
			}
			else if(i < 4 && str[0] != backspace[0] && str[0] != submit[0]){
 5ec:	f4 e0       	ldi	r31, 0x04	; 4
 5ee:	cf 16       	cp	r12, r31
 5f0:	d1 04       	cpc	r13, r1
 5f2:	0c f0       	brlt	.+2      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
 5f4:	b1 cf       	rjmp	.-158    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 5f6:	a9 cf       	rjmp	.-174    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>

000005f8 <__tablejump2__>:
 5f8:	ee 0f       	add	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	88 1f       	adc	r24, r24
 5fe:	8b bf       	out	0x3b, r24	; 59
 600:	07 90       	elpm	r0, Z+
 602:	f6 91       	elpm	r31, Z
 604:	e0 2d       	mov	r30, r0
 606:	19 94       	eijmp

00000608 <strcmp>:
 608:	fb 01       	movw	r30, r22
 60a:	dc 01       	movw	r26, r24
 60c:	8d 91       	ld	r24, X+
 60e:	01 90       	ld	r0, Z+
 610:	80 19       	sub	r24, r0
 612:	01 10       	cpse	r0, r1
 614:	d9 f3       	breq	.-10     	; 0x60c <strcmp+0x4>
 616:	99 0b       	sbc	r25, r25
 618:	08 95       	ret

0000061a <strcpy>:
 61a:	fb 01       	movw	r30, r22
 61c:	dc 01       	movw	r26, r24
 61e:	01 90       	ld	r0, Z+
 620:	0d 92       	st	X+, r0
 622:	00 20       	and	r0, r0
 624:	e1 f7       	brne	.-8      	; 0x61e <strcpy+0x4>
 626:	08 95       	ret

00000628 <printf>:
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	cd b7       	in	r28, 0x3d	; 61
 62e:	de b7       	in	r29, 0x3e	; 62
 630:	ae 01       	movw	r20, r28
 632:	4a 5f       	subi	r20, 0xFA	; 250
 634:	5f 4f       	sbci	r21, 0xFF	; 255
 636:	fa 01       	movw	r30, r20
 638:	61 91       	ld	r22, Z+
 63a:	71 91       	ld	r23, Z+
 63c:	af 01       	movw	r20, r30
 63e:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <__iob+0x2>
 642:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <__iob+0x3>
 646:	66 d0       	rcall	.+204    	; 0x714 <vfprintf>
 648:	df 91       	pop	r29
 64a:	cf 91       	pop	r28
 64c:	08 95       	ret

0000064e <putchar>:
 64e:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <__iob+0x2>
 652:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <__iob+0x3>
 656:	71 c2       	rjmp	.+1250   	; 0xb3a <fputc>

00000658 <puts>:
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	e0 91 e1 02 	lds	r30, 0x02E1	; 0x8002e1 <__iob+0x2>
 664:	f0 91 e2 02 	lds	r31, 0x02E2	; 0x8002e2 <__iob+0x3>
 668:	23 81       	ldd	r18, Z+3	; 0x03
 66a:	21 ff       	sbrs	r18, 1
 66c:	1b c0       	rjmp	.+54     	; 0x6a4 <puts+0x4c>
 66e:	8c 01       	movw	r16, r24
 670:	d0 e0       	ldi	r29, 0x00	; 0
 672:	c0 e0       	ldi	r28, 0x00	; 0
 674:	f8 01       	movw	r30, r16
 676:	81 91       	ld	r24, Z+
 678:	8f 01       	movw	r16, r30
 67a:	60 91 e1 02 	lds	r22, 0x02E1	; 0x8002e1 <__iob+0x2>
 67e:	70 91 e2 02 	lds	r23, 0x02E2	; 0x8002e2 <__iob+0x3>
 682:	db 01       	movw	r26, r22
 684:	18 96       	adiw	r26, 0x08	; 8
 686:	ed 91       	ld	r30, X+
 688:	fc 91       	ld	r31, X
 68a:	19 97       	sbiw	r26, 0x09	; 9
 68c:	88 23       	and	r24, r24
 68e:	31 f0       	breq	.+12     	; 0x69c <puts+0x44>
 690:	19 95       	eicall
 692:	89 2b       	or	r24, r25
 694:	79 f3       	breq	.-34     	; 0x674 <puts+0x1c>
 696:	df ef       	ldi	r29, 0xFF	; 255
 698:	cf ef       	ldi	r28, 0xFF	; 255
 69a:	ec cf       	rjmp	.-40     	; 0x674 <puts+0x1c>
 69c:	8a e0       	ldi	r24, 0x0A	; 10
 69e:	19 95       	eicall
 6a0:	89 2b       	or	r24, r25
 6a2:	19 f0       	breq	.+6      	; 0x6aa <puts+0x52>
 6a4:	8f ef       	ldi	r24, 0xFF	; 255
 6a6:	9f ef       	ldi	r25, 0xFF	; 255
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <puts+0x56>
 6aa:	8d 2f       	mov	r24, r29
 6ac:	9c 2f       	mov	r25, r28
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	08 95       	ret

000006b8 <sprintf>:
 6b8:	0f 93       	push	r16
 6ba:	1f 93       	push	r17
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
 6c4:	2e 97       	sbiw	r28, 0x0e	; 14
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	f8 94       	cli
 6ca:	de bf       	out	0x3e, r29	; 62
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	cd bf       	out	0x3d, r28	; 61
 6d0:	0e 89       	ldd	r16, Y+22	; 0x16
 6d2:	1f 89       	ldd	r17, Y+23	; 0x17
 6d4:	86 e0       	ldi	r24, 0x06	; 6
 6d6:	8c 83       	std	Y+4, r24	; 0x04
 6d8:	1a 83       	std	Y+2, r17	; 0x02
 6da:	09 83       	std	Y+1, r16	; 0x01
 6dc:	8f ef       	ldi	r24, 0xFF	; 255
 6de:	9f e7       	ldi	r25, 0x7F	; 127
 6e0:	9e 83       	std	Y+6, r25	; 0x06
 6e2:	8d 83       	std	Y+5, r24	; 0x05
 6e4:	ae 01       	movw	r20, r28
 6e6:	46 5e       	subi	r20, 0xE6	; 230
 6e8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ea:	68 8d       	ldd	r22, Y+24	; 0x18
 6ec:	79 8d       	ldd	r23, Y+25	; 0x19
 6ee:	ce 01       	movw	r24, r28
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	10 d0       	rcall	.+32     	; 0x714 <vfprintf>
 6f4:	ef 81       	ldd	r30, Y+7	; 0x07
 6f6:	f8 85       	ldd	r31, Y+8	; 0x08
 6f8:	e0 0f       	add	r30, r16
 6fa:	f1 1f       	adc	r31, r17
 6fc:	10 82       	st	Z, r1
 6fe:	2e 96       	adiw	r28, 0x0e	; 14
 700:	0f b6       	in	r0, 0x3f	; 63
 702:	f8 94       	cli
 704:	de bf       	out	0x3e, r29	; 62
 706:	0f be       	out	0x3f, r0	; 63
 708:	cd bf       	out	0x3d, r28	; 61
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	1f 91       	pop	r17
 710:	0f 91       	pop	r16
 712:	08 95       	ret

00000714 <vfprintf>:
 714:	2f 92       	push	r2
 716:	3f 92       	push	r3
 718:	4f 92       	push	r4
 71a:	5f 92       	push	r5
 71c:	6f 92       	push	r6
 71e:	7f 92       	push	r7
 720:	8f 92       	push	r8
 722:	9f 92       	push	r9
 724:	af 92       	push	r10
 726:	bf 92       	push	r11
 728:	cf 92       	push	r12
 72a:	df 92       	push	r13
 72c:	ef 92       	push	r14
 72e:	ff 92       	push	r15
 730:	0f 93       	push	r16
 732:	1f 93       	push	r17
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	cd b7       	in	r28, 0x3d	; 61
 73a:	de b7       	in	r29, 0x3e	; 62
 73c:	2b 97       	sbiw	r28, 0x0b	; 11
 73e:	0f b6       	in	r0, 0x3f	; 63
 740:	f8 94       	cli
 742:	de bf       	out	0x3e, r29	; 62
 744:	0f be       	out	0x3f, r0	; 63
 746:	cd bf       	out	0x3d, r28	; 61
 748:	6c 01       	movw	r12, r24
 74a:	7b 01       	movw	r14, r22
 74c:	8a 01       	movw	r16, r20
 74e:	fc 01       	movw	r30, r24
 750:	17 82       	std	Z+7, r1	; 0x07
 752:	16 82       	std	Z+6, r1	; 0x06
 754:	83 81       	ldd	r24, Z+3	; 0x03
 756:	81 ff       	sbrs	r24, 1
 758:	bf c1       	rjmp	.+894    	; 0xad8 <vfprintf+0x3c4>
 75a:	ce 01       	movw	r24, r28
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	3c 01       	movw	r6, r24
 760:	f6 01       	movw	r30, r12
 762:	93 81       	ldd	r25, Z+3	; 0x03
 764:	f7 01       	movw	r30, r14
 766:	93 fd       	sbrc	r25, 3
 768:	85 91       	lpm	r24, Z+
 76a:	93 ff       	sbrs	r25, 3
 76c:	81 91       	ld	r24, Z+
 76e:	7f 01       	movw	r14, r30
 770:	88 23       	and	r24, r24
 772:	09 f4       	brne	.+2      	; 0x776 <vfprintf+0x62>
 774:	ad c1       	rjmp	.+858    	; 0xad0 <vfprintf+0x3bc>
 776:	85 32       	cpi	r24, 0x25	; 37
 778:	39 f4       	brne	.+14     	; 0x788 <vfprintf+0x74>
 77a:	93 fd       	sbrc	r25, 3
 77c:	85 91       	lpm	r24, Z+
 77e:	93 ff       	sbrs	r25, 3
 780:	81 91       	ld	r24, Z+
 782:	7f 01       	movw	r14, r30
 784:	85 32       	cpi	r24, 0x25	; 37
 786:	21 f4       	brne	.+8      	; 0x790 <vfprintf+0x7c>
 788:	b6 01       	movw	r22, r12
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	d6 d1       	rcall	.+940    	; 0xb3a <fputc>
 78e:	e8 cf       	rjmp	.-48     	; 0x760 <vfprintf+0x4c>
 790:	91 2c       	mov	r9, r1
 792:	21 2c       	mov	r2, r1
 794:	31 2c       	mov	r3, r1
 796:	ff e1       	ldi	r31, 0x1F	; 31
 798:	f3 15       	cp	r31, r3
 79a:	d8 f0       	brcs	.+54     	; 0x7d2 <vfprintf+0xbe>
 79c:	8b 32       	cpi	r24, 0x2B	; 43
 79e:	79 f0       	breq	.+30     	; 0x7be <vfprintf+0xaa>
 7a0:	38 f4       	brcc	.+14     	; 0x7b0 <vfprintf+0x9c>
 7a2:	80 32       	cpi	r24, 0x20	; 32
 7a4:	79 f0       	breq	.+30     	; 0x7c4 <vfprintf+0xb0>
 7a6:	83 32       	cpi	r24, 0x23	; 35
 7a8:	a1 f4       	brne	.+40     	; 0x7d2 <vfprintf+0xbe>
 7aa:	23 2d       	mov	r18, r3
 7ac:	20 61       	ori	r18, 0x10	; 16
 7ae:	1d c0       	rjmp	.+58     	; 0x7ea <vfprintf+0xd6>
 7b0:	8d 32       	cpi	r24, 0x2D	; 45
 7b2:	61 f0       	breq	.+24     	; 0x7cc <vfprintf+0xb8>
 7b4:	80 33       	cpi	r24, 0x30	; 48
 7b6:	69 f4       	brne	.+26     	; 0x7d2 <vfprintf+0xbe>
 7b8:	23 2d       	mov	r18, r3
 7ba:	21 60       	ori	r18, 0x01	; 1
 7bc:	16 c0       	rjmp	.+44     	; 0x7ea <vfprintf+0xd6>
 7be:	83 2d       	mov	r24, r3
 7c0:	82 60       	ori	r24, 0x02	; 2
 7c2:	38 2e       	mov	r3, r24
 7c4:	e3 2d       	mov	r30, r3
 7c6:	e4 60       	ori	r30, 0x04	; 4
 7c8:	3e 2e       	mov	r3, r30
 7ca:	2a c0       	rjmp	.+84     	; 0x820 <vfprintf+0x10c>
 7cc:	f3 2d       	mov	r31, r3
 7ce:	f8 60       	ori	r31, 0x08	; 8
 7d0:	1d c0       	rjmp	.+58     	; 0x80c <vfprintf+0xf8>
 7d2:	37 fc       	sbrc	r3, 7
 7d4:	2d c0       	rjmp	.+90     	; 0x830 <vfprintf+0x11c>
 7d6:	20 ed       	ldi	r18, 0xD0	; 208
 7d8:	28 0f       	add	r18, r24
 7da:	2a 30       	cpi	r18, 0x0A	; 10
 7dc:	40 f0       	brcs	.+16     	; 0x7ee <vfprintf+0xda>
 7de:	8e 32       	cpi	r24, 0x2E	; 46
 7e0:	b9 f4       	brne	.+46     	; 0x810 <vfprintf+0xfc>
 7e2:	36 fc       	sbrc	r3, 6
 7e4:	75 c1       	rjmp	.+746    	; 0xad0 <vfprintf+0x3bc>
 7e6:	23 2d       	mov	r18, r3
 7e8:	20 64       	ori	r18, 0x40	; 64
 7ea:	32 2e       	mov	r3, r18
 7ec:	19 c0       	rjmp	.+50     	; 0x820 <vfprintf+0x10c>
 7ee:	36 fe       	sbrs	r3, 6
 7f0:	06 c0       	rjmp	.+12     	; 0x7fe <vfprintf+0xea>
 7f2:	8a e0       	ldi	r24, 0x0A	; 10
 7f4:	98 9e       	mul	r9, r24
 7f6:	20 0d       	add	r18, r0
 7f8:	11 24       	eor	r1, r1
 7fa:	92 2e       	mov	r9, r18
 7fc:	11 c0       	rjmp	.+34     	; 0x820 <vfprintf+0x10c>
 7fe:	ea e0       	ldi	r30, 0x0A	; 10
 800:	2e 9e       	mul	r2, r30
 802:	20 0d       	add	r18, r0
 804:	11 24       	eor	r1, r1
 806:	22 2e       	mov	r2, r18
 808:	f3 2d       	mov	r31, r3
 80a:	f0 62       	ori	r31, 0x20	; 32
 80c:	3f 2e       	mov	r3, r31
 80e:	08 c0       	rjmp	.+16     	; 0x820 <vfprintf+0x10c>
 810:	8c 36       	cpi	r24, 0x6C	; 108
 812:	21 f4       	brne	.+8      	; 0x81c <vfprintf+0x108>
 814:	83 2d       	mov	r24, r3
 816:	80 68       	ori	r24, 0x80	; 128
 818:	38 2e       	mov	r3, r24
 81a:	02 c0       	rjmp	.+4      	; 0x820 <vfprintf+0x10c>
 81c:	88 36       	cpi	r24, 0x68	; 104
 81e:	41 f4       	brne	.+16     	; 0x830 <vfprintf+0x11c>
 820:	f7 01       	movw	r30, r14
 822:	93 fd       	sbrc	r25, 3
 824:	85 91       	lpm	r24, Z+
 826:	93 ff       	sbrs	r25, 3
 828:	81 91       	ld	r24, Z+
 82a:	7f 01       	movw	r14, r30
 82c:	81 11       	cpse	r24, r1
 82e:	b3 cf       	rjmp	.-154    	; 0x796 <vfprintf+0x82>
 830:	98 2f       	mov	r25, r24
 832:	9f 7d       	andi	r25, 0xDF	; 223
 834:	95 54       	subi	r25, 0x45	; 69
 836:	93 30       	cpi	r25, 0x03	; 3
 838:	28 f4       	brcc	.+10     	; 0x844 <vfprintf+0x130>
 83a:	0c 5f       	subi	r16, 0xFC	; 252
 83c:	1f 4f       	sbci	r17, 0xFF	; 255
 83e:	9f e3       	ldi	r25, 0x3F	; 63
 840:	99 83       	std	Y+1, r25	; 0x01
 842:	0d c0       	rjmp	.+26     	; 0x85e <vfprintf+0x14a>
 844:	83 36       	cpi	r24, 0x63	; 99
 846:	31 f0       	breq	.+12     	; 0x854 <vfprintf+0x140>
 848:	83 37       	cpi	r24, 0x73	; 115
 84a:	71 f0       	breq	.+28     	; 0x868 <vfprintf+0x154>
 84c:	83 35       	cpi	r24, 0x53	; 83
 84e:	09 f0       	breq	.+2      	; 0x852 <vfprintf+0x13e>
 850:	55 c0       	rjmp	.+170    	; 0x8fc <vfprintf+0x1e8>
 852:	20 c0       	rjmp	.+64     	; 0x894 <vfprintf+0x180>
 854:	f8 01       	movw	r30, r16
 856:	80 81       	ld	r24, Z
 858:	89 83       	std	Y+1, r24	; 0x01
 85a:	0e 5f       	subi	r16, 0xFE	; 254
 85c:	1f 4f       	sbci	r17, 0xFF	; 255
 85e:	88 24       	eor	r8, r8
 860:	83 94       	inc	r8
 862:	91 2c       	mov	r9, r1
 864:	53 01       	movw	r10, r6
 866:	12 c0       	rjmp	.+36     	; 0x88c <vfprintf+0x178>
 868:	28 01       	movw	r4, r16
 86a:	f2 e0       	ldi	r31, 0x02	; 2
 86c:	4f 0e       	add	r4, r31
 86e:	51 1c       	adc	r5, r1
 870:	f8 01       	movw	r30, r16
 872:	a0 80       	ld	r10, Z
 874:	b1 80       	ldd	r11, Z+1	; 0x01
 876:	36 fe       	sbrs	r3, 6
 878:	03 c0       	rjmp	.+6      	; 0x880 <vfprintf+0x16c>
 87a:	69 2d       	mov	r22, r9
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	02 c0       	rjmp	.+4      	; 0x884 <vfprintf+0x170>
 880:	6f ef       	ldi	r22, 0xFF	; 255
 882:	7f ef       	ldi	r23, 0xFF	; 255
 884:	c5 01       	movw	r24, r10
 886:	4e d1       	rcall	.+668    	; 0xb24 <strnlen>
 888:	4c 01       	movw	r8, r24
 88a:	82 01       	movw	r16, r4
 88c:	f3 2d       	mov	r31, r3
 88e:	ff 77       	andi	r31, 0x7F	; 127
 890:	3f 2e       	mov	r3, r31
 892:	15 c0       	rjmp	.+42     	; 0x8be <vfprintf+0x1aa>
 894:	28 01       	movw	r4, r16
 896:	22 e0       	ldi	r18, 0x02	; 2
 898:	42 0e       	add	r4, r18
 89a:	51 1c       	adc	r5, r1
 89c:	f8 01       	movw	r30, r16
 89e:	a0 80       	ld	r10, Z
 8a0:	b1 80       	ldd	r11, Z+1	; 0x01
 8a2:	36 fe       	sbrs	r3, 6
 8a4:	03 c0       	rjmp	.+6      	; 0x8ac <vfprintf+0x198>
 8a6:	69 2d       	mov	r22, r9
 8a8:	70 e0       	ldi	r23, 0x00	; 0
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <vfprintf+0x19c>
 8ac:	6f ef       	ldi	r22, 0xFF	; 255
 8ae:	7f ef       	ldi	r23, 0xFF	; 255
 8b0:	c5 01       	movw	r24, r10
 8b2:	2d d1       	rcall	.+602    	; 0xb0e <strnlen_P>
 8b4:	4c 01       	movw	r8, r24
 8b6:	f3 2d       	mov	r31, r3
 8b8:	f0 68       	ori	r31, 0x80	; 128
 8ba:	3f 2e       	mov	r3, r31
 8bc:	82 01       	movw	r16, r4
 8be:	33 fc       	sbrc	r3, 3
 8c0:	19 c0       	rjmp	.+50     	; 0x8f4 <vfprintf+0x1e0>
 8c2:	82 2d       	mov	r24, r2
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	88 16       	cp	r8, r24
 8c8:	99 06       	cpc	r9, r25
 8ca:	a0 f4       	brcc	.+40     	; 0x8f4 <vfprintf+0x1e0>
 8cc:	b6 01       	movw	r22, r12
 8ce:	80 e2       	ldi	r24, 0x20	; 32
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	33 d1       	rcall	.+614    	; 0xb3a <fputc>
 8d4:	2a 94       	dec	r2
 8d6:	f5 cf       	rjmp	.-22     	; 0x8c2 <vfprintf+0x1ae>
 8d8:	f5 01       	movw	r30, r10
 8da:	37 fc       	sbrc	r3, 7
 8dc:	85 91       	lpm	r24, Z+
 8de:	37 fe       	sbrs	r3, 7
 8e0:	81 91       	ld	r24, Z+
 8e2:	5f 01       	movw	r10, r30
 8e4:	b6 01       	movw	r22, r12
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	28 d1       	rcall	.+592    	; 0xb3a <fputc>
 8ea:	21 10       	cpse	r2, r1
 8ec:	2a 94       	dec	r2
 8ee:	21 e0       	ldi	r18, 0x01	; 1
 8f0:	82 1a       	sub	r8, r18
 8f2:	91 08       	sbc	r9, r1
 8f4:	81 14       	cp	r8, r1
 8f6:	91 04       	cpc	r9, r1
 8f8:	79 f7       	brne	.-34     	; 0x8d8 <vfprintf+0x1c4>
 8fa:	e1 c0       	rjmp	.+450    	; 0xabe <vfprintf+0x3aa>
 8fc:	84 36       	cpi	r24, 0x64	; 100
 8fe:	11 f0       	breq	.+4      	; 0x904 <vfprintf+0x1f0>
 900:	89 36       	cpi	r24, 0x69	; 105
 902:	39 f5       	brne	.+78     	; 0x952 <vfprintf+0x23e>
 904:	f8 01       	movw	r30, r16
 906:	37 fe       	sbrs	r3, 7
 908:	07 c0       	rjmp	.+14     	; 0x918 <vfprintf+0x204>
 90a:	60 81       	ld	r22, Z
 90c:	71 81       	ldd	r23, Z+1	; 0x01
 90e:	82 81       	ldd	r24, Z+2	; 0x02
 910:	93 81       	ldd	r25, Z+3	; 0x03
 912:	0c 5f       	subi	r16, 0xFC	; 252
 914:	1f 4f       	sbci	r17, 0xFF	; 255
 916:	08 c0       	rjmp	.+16     	; 0x928 <vfprintf+0x214>
 918:	60 81       	ld	r22, Z
 91a:	71 81       	ldd	r23, Z+1	; 0x01
 91c:	07 2e       	mov	r0, r23
 91e:	00 0c       	add	r0, r0
 920:	88 0b       	sbc	r24, r24
 922:	99 0b       	sbc	r25, r25
 924:	0e 5f       	subi	r16, 0xFE	; 254
 926:	1f 4f       	sbci	r17, 0xFF	; 255
 928:	f3 2d       	mov	r31, r3
 92a:	ff 76       	andi	r31, 0x6F	; 111
 92c:	3f 2e       	mov	r3, r31
 92e:	97 ff       	sbrs	r25, 7
 930:	09 c0       	rjmp	.+18     	; 0x944 <vfprintf+0x230>
 932:	90 95       	com	r25
 934:	80 95       	com	r24
 936:	70 95       	com	r23
 938:	61 95       	neg	r22
 93a:	7f 4f       	sbci	r23, 0xFF	; 255
 93c:	8f 4f       	sbci	r24, 0xFF	; 255
 93e:	9f 4f       	sbci	r25, 0xFF	; 255
 940:	f0 68       	ori	r31, 0x80	; 128
 942:	3f 2e       	mov	r3, r31
 944:	2a e0       	ldi	r18, 0x0A	; 10
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	a3 01       	movw	r20, r6
 94a:	33 d1       	rcall	.+614    	; 0xbb2 <__ultoa_invert>
 94c:	88 2e       	mov	r8, r24
 94e:	86 18       	sub	r8, r6
 950:	44 c0       	rjmp	.+136    	; 0x9da <vfprintf+0x2c6>
 952:	85 37       	cpi	r24, 0x75	; 117
 954:	31 f4       	brne	.+12     	; 0x962 <vfprintf+0x24e>
 956:	23 2d       	mov	r18, r3
 958:	2f 7e       	andi	r18, 0xEF	; 239
 95a:	b2 2e       	mov	r11, r18
 95c:	2a e0       	ldi	r18, 0x0A	; 10
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	25 c0       	rjmp	.+74     	; 0x9ac <vfprintf+0x298>
 962:	93 2d       	mov	r25, r3
 964:	99 7f       	andi	r25, 0xF9	; 249
 966:	b9 2e       	mov	r11, r25
 968:	8f 36       	cpi	r24, 0x6F	; 111
 96a:	c1 f0       	breq	.+48     	; 0x99c <vfprintf+0x288>
 96c:	18 f4       	brcc	.+6      	; 0x974 <vfprintf+0x260>
 96e:	88 35       	cpi	r24, 0x58	; 88
 970:	79 f0       	breq	.+30     	; 0x990 <vfprintf+0x27c>
 972:	ae c0       	rjmp	.+348    	; 0xad0 <vfprintf+0x3bc>
 974:	80 37       	cpi	r24, 0x70	; 112
 976:	19 f0       	breq	.+6      	; 0x97e <vfprintf+0x26a>
 978:	88 37       	cpi	r24, 0x78	; 120
 97a:	21 f0       	breq	.+8      	; 0x984 <vfprintf+0x270>
 97c:	a9 c0       	rjmp	.+338    	; 0xad0 <vfprintf+0x3bc>
 97e:	e9 2f       	mov	r30, r25
 980:	e0 61       	ori	r30, 0x10	; 16
 982:	be 2e       	mov	r11, r30
 984:	b4 fe       	sbrs	r11, 4
 986:	0d c0       	rjmp	.+26     	; 0x9a2 <vfprintf+0x28e>
 988:	fb 2d       	mov	r31, r11
 98a:	f4 60       	ori	r31, 0x04	; 4
 98c:	bf 2e       	mov	r11, r31
 98e:	09 c0       	rjmp	.+18     	; 0x9a2 <vfprintf+0x28e>
 990:	34 fe       	sbrs	r3, 4
 992:	0a c0       	rjmp	.+20     	; 0x9a8 <vfprintf+0x294>
 994:	29 2f       	mov	r18, r25
 996:	26 60       	ori	r18, 0x06	; 6
 998:	b2 2e       	mov	r11, r18
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <vfprintf+0x294>
 99c:	28 e0       	ldi	r18, 0x08	; 8
 99e:	30 e0       	ldi	r19, 0x00	; 0
 9a0:	05 c0       	rjmp	.+10     	; 0x9ac <vfprintf+0x298>
 9a2:	20 e1       	ldi	r18, 0x10	; 16
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <vfprintf+0x298>
 9a8:	20 e1       	ldi	r18, 0x10	; 16
 9aa:	32 e0       	ldi	r19, 0x02	; 2
 9ac:	f8 01       	movw	r30, r16
 9ae:	b7 fe       	sbrs	r11, 7
 9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <vfprintf+0x2ac>
 9b2:	60 81       	ld	r22, Z
 9b4:	71 81       	ldd	r23, Z+1	; 0x01
 9b6:	82 81       	ldd	r24, Z+2	; 0x02
 9b8:	93 81       	ldd	r25, Z+3	; 0x03
 9ba:	0c 5f       	subi	r16, 0xFC	; 252
 9bc:	1f 4f       	sbci	r17, 0xFF	; 255
 9be:	06 c0       	rjmp	.+12     	; 0x9cc <vfprintf+0x2b8>
 9c0:	60 81       	ld	r22, Z
 9c2:	71 81       	ldd	r23, Z+1	; 0x01
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 5f       	subi	r16, 0xFE	; 254
 9ca:	1f 4f       	sbci	r17, 0xFF	; 255
 9cc:	a3 01       	movw	r20, r6
 9ce:	f1 d0       	rcall	.+482    	; 0xbb2 <__ultoa_invert>
 9d0:	88 2e       	mov	r8, r24
 9d2:	86 18       	sub	r8, r6
 9d4:	fb 2d       	mov	r31, r11
 9d6:	ff 77       	andi	r31, 0x7F	; 127
 9d8:	3f 2e       	mov	r3, r31
 9da:	36 fe       	sbrs	r3, 6
 9dc:	0d c0       	rjmp	.+26     	; 0x9f8 <vfprintf+0x2e4>
 9de:	23 2d       	mov	r18, r3
 9e0:	2e 7f       	andi	r18, 0xFE	; 254
 9e2:	a2 2e       	mov	r10, r18
 9e4:	89 14       	cp	r8, r9
 9e6:	58 f4       	brcc	.+22     	; 0x9fe <vfprintf+0x2ea>
 9e8:	34 fe       	sbrs	r3, 4
 9ea:	0b c0       	rjmp	.+22     	; 0xa02 <vfprintf+0x2ee>
 9ec:	32 fc       	sbrc	r3, 2
 9ee:	09 c0       	rjmp	.+18     	; 0xa02 <vfprintf+0x2ee>
 9f0:	83 2d       	mov	r24, r3
 9f2:	8e 7e       	andi	r24, 0xEE	; 238
 9f4:	a8 2e       	mov	r10, r24
 9f6:	05 c0       	rjmp	.+10     	; 0xa02 <vfprintf+0x2ee>
 9f8:	b8 2c       	mov	r11, r8
 9fa:	a3 2c       	mov	r10, r3
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <vfprintf+0x2f0>
 9fe:	b8 2c       	mov	r11, r8
 a00:	01 c0       	rjmp	.+2      	; 0xa04 <vfprintf+0x2f0>
 a02:	b9 2c       	mov	r11, r9
 a04:	a4 fe       	sbrs	r10, 4
 a06:	0f c0       	rjmp	.+30     	; 0xa26 <vfprintf+0x312>
 a08:	fe 01       	movw	r30, r28
 a0a:	e8 0d       	add	r30, r8
 a0c:	f1 1d       	adc	r31, r1
 a0e:	80 81       	ld	r24, Z
 a10:	80 33       	cpi	r24, 0x30	; 48
 a12:	21 f4       	brne	.+8      	; 0xa1c <vfprintf+0x308>
 a14:	9a 2d       	mov	r25, r10
 a16:	99 7e       	andi	r25, 0xE9	; 233
 a18:	a9 2e       	mov	r10, r25
 a1a:	09 c0       	rjmp	.+18     	; 0xa2e <vfprintf+0x31a>
 a1c:	a2 fe       	sbrs	r10, 2
 a1e:	06 c0       	rjmp	.+12     	; 0xa2c <vfprintf+0x318>
 a20:	b3 94       	inc	r11
 a22:	b3 94       	inc	r11
 a24:	04 c0       	rjmp	.+8      	; 0xa2e <vfprintf+0x31a>
 a26:	8a 2d       	mov	r24, r10
 a28:	86 78       	andi	r24, 0x86	; 134
 a2a:	09 f0       	breq	.+2      	; 0xa2e <vfprintf+0x31a>
 a2c:	b3 94       	inc	r11
 a2e:	a3 fc       	sbrc	r10, 3
 a30:	10 c0       	rjmp	.+32     	; 0xa52 <vfprintf+0x33e>
 a32:	a0 fe       	sbrs	r10, 0
 a34:	06 c0       	rjmp	.+12     	; 0xa42 <vfprintf+0x32e>
 a36:	b2 14       	cp	r11, r2
 a38:	80 f4       	brcc	.+32     	; 0xa5a <vfprintf+0x346>
 a3a:	28 0c       	add	r2, r8
 a3c:	92 2c       	mov	r9, r2
 a3e:	9b 18       	sub	r9, r11
 a40:	0d c0       	rjmp	.+26     	; 0xa5c <vfprintf+0x348>
 a42:	b2 14       	cp	r11, r2
 a44:	58 f4       	brcc	.+22     	; 0xa5c <vfprintf+0x348>
 a46:	b6 01       	movw	r22, r12
 a48:	80 e2       	ldi	r24, 0x20	; 32
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	76 d0       	rcall	.+236    	; 0xb3a <fputc>
 a4e:	b3 94       	inc	r11
 a50:	f8 cf       	rjmp	.-16     	; 0xa42 <vfprintf+0x32e>
 a52:	b2 14       	cp	r11, r2
 a54:	18 f4       	brcc	.+6      	; 0xa5c <vfprintf+0x348>
 a56:	2b 18       	sub	r2, r11
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <vfprintf+0x34a>
 a5a:	98 2c       	mov	r9, r8
 a5c:	21 2c       	mov	r2, r1
 a5e:	a4 fe       	sbrs	r10, 4
 a60:	0f c0       	rjmp	.+30     	; 0xa80 <vfprintf+0x36c>
 a62:	b6 01       	movw	r22, r12
 a64:	80 e3       	ldi	r24, 0x30	; 48
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	68 d0       	rcall	.+208    	; 0xb3a <fputc>
 a6a:	a2 fe       	sbrs	r10, 2
 a6c:	16 c0       	rjmp	.+44     	; 0xa9a <vfprintf+0x386>
 a6e:	a1 fc       	sbrc	r10, 1
 a70:	03 c0       	rjmp	.+6      	; 0xa78 <vfprintf+0x364>
 a72:	88 e7       	ldi	r24, 0x78	; 120
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <vfprintf+0x368>
 a78:	88 e5       	ldi	r24, 0x58	; 88
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	b6 01       	movw	r22, r12
 a7e:	0c c0       	rjmp	.+24     	; 0xa98 <vfprintf+0x384>
 a80:	8a 2d       	mov	r24, r10
 a82:	86 78       	andi	r24, 0x86	; 134
 a84:	51 f0       	breq	.+20     	; 0xa9a <vfprintf+0x386>
 a86:	a1 fe       	sbrs	r10, 1
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <vfprintf+0x37a>
 a8a:	8b e2       	ldi	r24, 0x2B	; 43
 a8c:	01 c0       	rjmp	.+2      	; 0xa90 <vfprintf+0x37c>
 a8e:	80 e2       	ldi	r24, 0x20	; 32
 a90:	a7 fc       	sbrc	r10, 7
 a92:	8d e2       	ldi	r24, 0x2D	; 45
 a94:	b6 01       	movw	r22, r12
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	50 d0       	rcall	.+160    	; 0xb3a <fputc>
 a9a:	89 14       	cp	r8, r9
 a9c:	30 f4       	brcc	.+12     	; 0xaaa <vfprintf+0x396>
 a9e:	b6 01       	movw	r22, r12
 aa0:	80 e3       	ldi	r24, 0x30	; 48
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	4a d0       	rcall	.+148    	; 0xb3a <fputc>
 aa6:	9a 94       	dec	r9
 aa8:	f8 cf       	rjmp	.-16     	; 0xa9a <vfprintf+0x386>
 aaa:	8a 94       	dec	r8
 aac:	f3 01       	movw	r30, r6
 aae:	e8 0d       	add	r30, r8
 ab0:	f1 1d       	adc	r31, r1
 ab2:	80 81       	ld	r24, Z
 ab4:	b6 01       	movw	r22, r12
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	40 d0       	rcall	.+128    	; 0xb3a <fputc>
 aba:	81 10       	cpse	r8, r1
 abc:	f6 cf       	rjmp	.-20     	; 0xaaa <vfprintf+0x396>
 abe:	22 20       	and	r2, r2
 ac0:	09 f4       	brne	.+2      	; 0xac4 <vfprintf+0x3b0>
 ac2:	4e ce       	rjmp	.-868    	; 0x760 <vfprintf+0x4c>
 ac4:	b6 01       	movw	r22, r12
 ac6:	80 e2       	ldi	r24, 0x20	; 32
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	37 d0       	rcall	.+110    	; 0xb3a <fputc>
 acc:	2a 94       	dec	r2
 ace:	f7 cf       	rjmp	.-18     	; 0xabe <vfprintf+0x3aa>
 ad0:	f6 01       	movw	r30, r12
 ad2:	86 81       	ldd	r24, Z+6	; 0x06
 ad4:	97 81       	ldd	r25, Z+7	; 0x07
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <vfprintf+0x3c8>
 ad8:	8f ef       	ldi	r24, 0xFF	; 255
 ada:	9f ef       	ldi	r25, 0xFF	; 255
 adc:	2b 96       	adiw	r28, 0x0b	; 11
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	f8 94       	cli
 ae2:	de bf       	out	0x3e, r29	; 62
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	cd bf       	out	0x3d, r28	; 61
 ae8:	df 91       	pop	r29
 aea:	cf 91       	pop	r28
 aec:	1f 91       	pop	r17
 aee:	0f 91       	pop	r16
 af0:	ff 90       	pop	r15
 af2:	ef 90       	pop	r14
 af4:	df 90       	pop	r13
 af6:	cf 90       	pop	r12
 af8:	bf 90       	pop	r11
 afa:	af 90       	pop	r10
 afc:	9f 90       	pop	r9
 afe:	8f 90       	pop	r8
 b00:	7f 90       	pop	r7
 b02:	6f 90       	pop	r6
 b04:	5f 90       	pop	r5
 b06:	4f 90       	pop	r4
 b08:	3f 90       	pop	r3
 b0a:	2f 90       	pop	r2
 b0c:	08 95       	ret

00000b0e <strnlen_P>:
 b0e:	fc 01       	movw	r30, r24
 b10:	05 90       	lpm	r0, Z+
 b12:	61 50       	subi	r22, 0x01	; 1
 b14:	70 40       	sbci	r23, 0x00	; 0
 b16:	01 10       	cpse	r0, r1
 b18:	d8 f7       	brcc	.-10     	; 0xb10 <strnlen_P+0x2>
 b1a:	80 95       	com	r24
 b1c:	90 95       	com	r25
 b1e:	8e 0f       	add	r24, r30
 b20:	9f 1f       	adc	r25, r31
 b22:	08 95       	ret

00000b24 <strnlen>:
 b24:	fc 01       	movw	r30, r24
 b26:	61 50       	subi	r22, 0x01	; 1
 b28:	70 40       	sbci	r23, 0x00	; 0
 b2a:	01 90       	ld	r0, Z+
 b2c:	01 10       	cpse	r0, r1
 b2e:	d8 f7       	brcc	.-10     	; 0xb26 <strnlen+0x2>
 b30:	80 95       	com	r24
 b32:	90 95       	com	r25
 b34:	8e 0f       	add	r24, r30
 b36:	9f 1f       	adc	r25, r31
 b38:	08 95       	ret

00000b3a <fputc>:
 b3a:	0f 93       	push	r16
 b3c:	1f 93       	push	r17
 b3e:	cf 93       	push	r28
 b40:	df 93       	push	r29
 b42:	fb 01       	movw	r30, r22
 b44:	23 81       	ldd	r18, Z+3	; 0x03
 b46:	21 fd       	sbrc	r18, 1
 b48:	03 c0       	rjmp	.+6      	; 0xb50 <fputc+0x16>
 b4a:	8f ef       	ldi	r24, 0xFF	; 255
 b4c:	9f ef       	ldi	r25, 0xFF	; 255
 b4e:	2c c0       	rjmp	.+88     	; 0xba8 <fputc+0x6e>
 b50:	22 ff       	sbrs	r18, 2
 b52:	16 c0       	rjmp	.+44     	; 0xb80 <fputc+0x46>
 b54:	46 81       	ldd	r20, Z+6	; 0x06
 b56:	57 81       	ldd	r21, Z+7	; 0x07
 b58:	24 81       	ldd	r18, Z+4	; 0x04
 b5a:	35 81       	ldd	r19, Z+5	; 0x05
 b5c:	42 17       	cp	r20, r18
 b5e:	53 07       	cpc	r21, r19
 b60:	44 f4       	brge	.+16     	; 0xb72 <fputc+0x38>
 b62:	a0 81       	ld	r26, Z
 b64:	b1 81       	ldd	r27, Z+1	; 0x01
 b66:	9d 01       	movw	r18, r26
 b68:	2f 5f       	subi	r18, 0xFF	; 255
 b6a:	3f 4f       	sbci	r19, 0xFF	; 255
 b6c:	31 83       	std	Z+1, r19	; 0x01
 b6e:	20 83       	st	Z, r18
 b70:	8c 93       	st	X, r24
 b72:	26 81       	ldd	r18, Z+6	; 0x06
 b74:	37 81       	ldd	r19, Z+7	; 0x07
 b76:	2f 5f       	subi	r18, 0xFF	; 255
 b78:	3f 4f       	sbci	r19, 0xFF	; 255
 b7a:	37 83       	std	Z+7, r19	; 0x07
 b7c:	26 83       	std	Z+6, r18	; 0x06
 b7e:	14 c0       	rjmp	.+40     	; 0xba8 <fputc+0x6e>
 b80:	8b 01       	movw	r16, r22
 b82:	ec 01       	movw	r28, r24
 b84:	fb 01       	movw	r30, r22
 b86:	00 84       	ldd	r0, Z+8	; 0x08
 b88:	f1 85       	ldd	r31, Z+9	; 0x09
 b8a:	e0 2d       	mov	r30, r0
 b8c:	19 95       	eicall
 b8e:	89 2b       	or	r24, r25
 b90:	e1 f6       	brne	.-72     	; 0xb4a <fputc+0x10>
 b92:	d8 01       	movw	r26, r16
 b94:	16 96       	adiw	r26, 0x06	; 6
 b96:	8d 91       	ld	r24, X+
 b98:	9c 91       	ld	r25, X
 b9a:	17 97       	sbiw	r26, 0x07	; 7
 b9c:	01 96       	adiw	r24, 0x01	; 1
 b9e:	17 96       	adiw	r26, 0x07	; 7
 ba0:	9c 93       	st	X, r25
 ba2:	8e 93       	st	-X, r24
 ba4:	16 97       	sbiw	r26, 0x06	; 6
 ba6:	ce 01       	movw	r24, r28
 ba8:	df 91       	pop	r29
 baa:	cf 91       	pop	r28
 bac:	1f 91       	pop	r17
 bae:	0f 91       	pop	r16
 bb0:	08 95       	ret

00000bb2 <__ultoa_invert>:
 bb2:	fa 01       	movw	r30, r20
 bb4:	aa 27       	eor	r26, r26
 bb6:	28 30       	cpi	r18, 0x08	; 8
 bb8:	51 f1       	breq	.+84     	; 0xc0e <__ultoa_invert+0x5c>
 bba:	20 31       	cpi	r18, 0x10	; 16
 bbc:	81 f1       	breq	.+96     	; 0xc1e <__ultoa_invert+0x6c>
 bbe:	e8 94       	clt
 bc0:	6f 93       	push	r22
 bc2:	6e 7f       	andi	r22, 0xFE	; 254
 bc4:	6e 5f       	subi	r22, 0xFE	; 254
 bc6:	7f 4f       	sbci	r23, 0xFF	; 255
 bc8:	8f 4f       	sbci	r24, 0xFF	; 255
 bca:	9f 4f       	sbci	r25, 0xFF	; 255
 bcc:	af 4f       	sbci	r26, 0xFF	; 255
 bce:	b1 e0       	ldi	r27, 0x01	; 1
 bd0:	3e d0       	rcall	.+124    	; 0xc4e <__ultoa_invert+0x9c>
 bd2:	b4 e0       	ldi	r27, 0x04	; 4
 bd4:	3c d0       	rcall	.+120    	; 0xc4e <__ultoa_invert+0x9c>
 bd6:	67 0f       	add	r22, r23
 bd8:	78 1f       	adc	r23, r24
 bda:	89 1f       	adc	r24, r25
 bdc:	9a 1f       	adc	r25, r26
 bde:	a1 1d       	adc	r26, r1
 be0:	68 0f       	add	r22, r24
 be2:	79 1f       	adc	r23, r25
 be4:	8a 1f       	adc	r24, r26
 be6:	91 1d       	adc	r25, r1
 be8:	a1 1d       	adc	r26, r1
 bea:	6a 0f       	add	r22, r26
 bec:	71 1d       	adc	r23, r1
 bee:	81 1d       	adc	r24, r1
 bf0:	91 1d       	adc	r25, r1
 bf2:	a1 1d       	adc	r26, r1
 bf4:	20 d0       	rcall	.+64     	; 0xc36 <__ultoa_invert+0x84>
 bf6:	09 f4       	brne	.+2      	; 0xbfa <__ultoa_invert+0x48>
 bf8:	68 94       	set
 bfa:	3f 91       	pop	r19
 bfc:	2a e0       	ldi	r18, 0x0A	; 10
 bfe:	26 9f       	mul	r18, r22
 c00:	11 24       	eor	r1, r1
 c02:	30 19       	sub	r19, r0
 c04:	30 5d       	subi	r19, 0xD0	; 208
 c06:	31 93       	st	Z+, r19
 c08:	de f6       	brtc	.-74     	; 0xbc0 <__ultoa_invert+0xe>
 c0a:	cf 01       	movw	r24, r30
 c0c:	08 95       	ret
 c0e:	46 2f       	mov	r20, r22
 c10:	47 70       	andi	r20, 0x07	; 7
 c12:	40 5d       	subi	r20, 0xD0	; 208
 c14:	41 93       	st	Z+, r20
 c16:	b3 e0       	ldi	r27, 0x03	; 3
 c18:	0f d0       	rcall	.+30     	; 0xc38 <__ultoa_invert+0x86>
 c1a:	c9 f7       	brne	.-14     	; 0xc0e <__ultoa_invert+0x5c>
 c1c:	f6 cf       	rjmp	.-20     	; 0xc0a <__ultoa_invert+0x58>
 c1e:	46 2f       	mov	r20, r22
 c20:	4f 70       	andi	r20, 0x0F	; 15
 c22:	40 5d       	subi	r20, 0xD0	; 208
 c24:	4a 33       	cpi	r20, 0x3A	; 58
 c26:	18 f0       	brcs	.+6      	; 0xc2e <__ultoa_invert+0x7c>
 c28:	49 5d       	subi	r20, 0xD9	; 217
 c2a:	31 fd       	sbrc	r19, 1
 c2c:	40 52       	subi	r20, 0x20	; 32
 c2e:	41 93       	st	Z+, r20
 c30:	02 d0       	rcall	.+4      	; 0xc36 <__ultoa_invert+0x84>
 c32:	a9 f7       	brne	.-22     	; 0xc1e <__ultoa_invert+0x6c>
 c34:	ea cf       	rjmp	.-44     	; 0xc0a <__ultoa_invert+0x58>
 c36:	b4 e0       	ldi	r27, 0x04	; 4
 c38:	a6 95       	lsr	r26
 c3a:	97 95       	ror	r25
 c3c:	87 95       	ror	r24
 c3e:	77 95       	ror	r23
 c40:	67 95       	ror	r22
 c42:	ba 95       	dec	r27
 c44:	c9 f7       	brne	.-14     	; 0xc38 <__ultoa_invert+0x86>
 c46:	00 97       	sbiw	r24, 0x00	; 0
 c48:	61 05       	cpc	r22, r1
 c4a:	71 05       	cpc	r23, r1
 c4c:	08 95       	ret
 c4e:	9b 01       	movw	r18, r22
 c50:	ac 01       	movw	r20, r24
 c52:	0a 2e       	mov	r0, r26
 c54:	06 94       	lsr	r0
 c56:	57 95       	ror	r21
 c58:	47 95       	ror	r20
 c5a:	37 95       	ror	r19
 c5c:	27 95       	ror	r18
 c5e:	ba 95       	dec	r27
 c60:	c9 f7       	brne	.-14     	; 0xc54 <__ultoa_invert+0xa2>
 c62:	62 0f       	add	r22, r18
 c64:	73 1f       	adc	r23, r19
 c66:	84 1f       	adc	r24, r20
 c68:	95 1f       	adc	r25, r21
 c6a:	a0 1d       	adc	r26, r0
 c6c:	08 95       	ret

00000c6e <_exit>:
 c6e:	f8 94       	cli

00000c70 <__stop_program>:
 c70:	ff cf       	rjmp	.-2      	; 0xc70 <__stop_program>
